<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
  Copyright (c) 2012 Bojan Simic.
  All rights reserved. This program and the accompanying materials
  are made available under the terms of the GNU Lesser Public License v2.1
  which accompanies this distribution, and is available at
  http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
  
  Contributors:
      Bojan Simic - initial API and implementation
-->
<ReportDefinition type="xml">
    <TemplateName>OWASP Top Ten 2010</TemplateName>
    <TemplatePath></TemplatePath>
    <LogoPath>/fortify.jpg</LogoPath>
    <Footnote>Copyright 2010 Fortify Software Inc.</Footnote>
    <UserName>simicb</UserName>
    <ReportSection optionalSubsections="false" enabled="true">
        <Title>Report Overview</Title>
        <SubSection enabled="true">
            <Title>Report Summary</Title>
            <Description>This provides a high level summary of the findings that the analysis produced. Also includes basic information on the scope of the scan.</Description>
            <Text>On May 4, 2012, a source code review was performed over the webgoat code base. 154 files, 12,656 LOC (Executable) were scanned. A total of 268 issues were uncovered during the analysis. This report provides a comprehensive description of all the types of OWASP Top Ten 2010 issues found in this project. Specific examples and source code are provided for each issue type.</Text>
        </SubSection>
        <SubSection enabled="true">
            <Title>Issue Summary</Title>
            <Description>A table summarizing the number of issues found and the breakdown of issues in each OWASP Top Ten 2010 category</Description>
            <IssueListing limit="-1" listing="false">
                <Refinement></Refinement>
                <Chart chartType="table">
                    <Axis>OWASP Top Ten 2010</Axis>
                    <MajorAttribute>Analysis</MajorAttribute>
                    <GroupingSection count="186">
                        <groupTitle>A2 Cross-Site Scripting (XSS)</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="71">
                        <groupTitle>A1 Injection</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="7">
                        <groupTitle>&lt;none&gt;</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="4">
                        <groupTitle>A9 Insufficient Transport Layer Protection</groupTitle>
                    </GroupingSection>
                </Chart>
            </IssueListing>
        </SubSection>
    </ReportSection>
    <ReportSection optionalSubsections="true" enabled="true">
        <Title>Issue Breakdown by OWASP Top Ten 2010</Title>
        <SubSection enabled="true">
            <Title>Issue Breakdown by OWASP Top Ten 2010</Title>
            <IssueListing limit="-1" listing="false">
                <Refinement></Refinement>
                <Chart chartType="pie">
                    <Axis>OWASP Top Ten 2010</Axis>
                    <MajorAttribute>Analysis</MajorAttribute>
                    <GroupingSection count="186">
                        <groupTitle>A2 Cross-Site Scripting (XSS)</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="71">
                        <groupTitle>A1 Injection</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="7">
                        <groupTitle>&lt;none&gt;</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="4">
                        <groupTitle>A9 Insufficient Transport Layer Protection</groupTitle>
                    </GroupingSection>
                </Chart>
            </IssueListing>
        </SubSection>
    </ReportSection>
    <ReportSection optionalSubsections="true" enabled="true">
        <Title>Results Outline</Title>
        <SubSection enabled="true">
            <Title>Vulnerabilties By OWASP Top Ten 2010</Title>
            <Description>Results by OWASP Top Ten 2010</Description>
            <IssueListing limit="-1" listing="true">
                <Refinement>[OWASP Top Ten 2010]:!Not Covered</Refinement>
                <Chart chartType="list">
                    <Axis>OWASP Top Ten 2010</Axis>
                    <MajorAttribute>Analysis</MajorAttribute>
                    <GroupingSection count="186">
                        <groupTitle>A2 Cross-Site Scripting (XSS)</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>Sending unvalidated data to a web browser can result in the browser executing malicious code.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>Cross-site scripting (XSS) vulnerabilities occur when:

1. Data enters a web application through an untrusted source. In the case of Reflected XSS, the untrusted source is typically a web request, while in the case of Persisted (also known as Stored) XSS it is typically a database or other back-end datastore.


2. The data is included in dynamic content that is sent to a web user without being validated for malicious code. 

The malicious content sent to the web browser often takes the form of a segment of JavaScript, but may also include HTML, Flash or any other type of code that the browser may execute. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data like cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.

Example 1: The following JSP code segment reads an employee ID, eid, from an HTTP request and displays it to the user. 


&lt;% String eid = request.getParameter(&quot;eid&quot;); %&gt; 
...
Employee ID: &lt;%= eid %&gt;


The code in this example operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes meta-characters or source code, then the code will be executed by the web browser as it displays the HTTP response.

Initially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use e-mail or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.

Example 2: The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.

 
&lt;%... 
 Statement stmt = conn.createStatement();
 ResultSet rs = stmt.executeQuery(&quot;select * from emp where id=&quot;+eid);
 if (rs != null) {
  rs.next(); 
  String name = rs.getString(&quot;name&quot;);
%&gt;

Employee Name: &lt;%= name %&gt;


As in Example 1, this code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker can execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it more difficult to identify the threat and increases the possibility that the attack will affect multiple users. XSS got its start in this form with web sites that offered a &quot;guestbook&quot; to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.

As the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:

- As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that may include session information, from the user's machine to the attacker or perform other nefarious activities.

- As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.

- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>The solution to XSS is to ensure that validation occurs in the correct places and checks for the correct properties.

Since XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.

Web applications must validate their input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application may accept input through a shared data store or other trusted source, and that data store may accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means the best way to prevent XSS vulnerabilities is to validate everything that enters the application or leaves the application destined for the user. 

The most secure approach to validation for XSS is to create a whitelist of safe characters that are allowed to appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alpha-numeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser should still be considered valid input once they are encoded, such as a web design bulletin board that must accept HTML fragments from its users. 

A more flexible, but less secure approach is known as blacklisting, which selectively rejects or escapes potentially dangerous characters before using the input. In order to form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines what characters have special meaning, many web browsers try to correct common mistakes in HTML and may treat other characters as special in certain contexts. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:

In the content of a block-level element (in the middle of a paragraph of text):

- &quot;&lt;&quot; is special because it introduces a tag.

- &quot;&amp;&quot; is special because it introduces a character entity.

- &quot;&gt;&quot; is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening &quot;&lt;&quot;, but omitted it in error.

The following principles apply to attribute values:

- In attribute values enclosed with double quotes, the double quotes are special because they mark the end of the attribute value.

- In attribute values enclosed with single quote, the single quotes are special because they mark the end of the attribute value.

- In attribute values without any quotes, white-space characters, such as space and tab, are special.

- &quot;&amp;&quot; is special when used with certain attributes, because it introduces a character entity. 

In URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:

- Space, tab, and new line are special because they mark the end of the URL.

- &quot;&amp;&quot; is special because it either introduces a character entity or separates CGI parameters.

- Non-ASCII characters (that is, everything above 128 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.

- The &quot;%&quot; symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, &quot;%&quot; must be filtered if input such as &quot;%68%65%6C%6C%6F&quot; becomes &quot;hello&quot; when it appears on the web page in question.


Within the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:

- The semicolon, parenthesis, curly braces, and new line should be filtered in situations where text could be inserted directly into a pre-existing script tag. 

Server-side scripts:

- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (&quot;) on output might require additional filtering. 

Other possibilities:

- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and may bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).

Once you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option in this situation is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and may be unacceptable in circumstances where the integrity of the input must be preserved for display.

If input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].

Many application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. When an application is developed there are no guarantees about what application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will also stay in sync.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. The HP Fortify Secure Coding Rulepacks treat the database as a source of untrusted data, which can lead to XSS vulnerabilities. If the database is a trusted resource in your environment, use custom filters to filter out dataflow issues that include the DATABASE taint flag or originate from database sources.

2. Even though URL encoding untrusted data protects against many XSS attacks, some browsers (specifically, Internet Explorer 6 and 7 and possibly others) automatically decode content at certain locations within the Document Object Model (DOM) prior to passing it to the JavaScript interpreter. To reflect this danger, the rulepacks no longer treat URL encoding routines as sufficient to protect against Cross-Site Scripting. Data values that are URL encoded and subsequently output will cause Fortify to report Cross-Site Scripting: Poor Validation vulnerabilities.

3. A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Struts 2 are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by HP Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HP Fortify user with the auditing process, the Fortify Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.

4. Fortify RTA adds protection against this category.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>186</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="EA39016909F45F53EEFCE398478A6CED">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doStage3() in ForgotPassword.java sends unvalidated data to a web browser on line 197, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ForgotPassword.java</FileName>
<FilePath>lessons/ForgotPassword.java</FilePath>
<LineStart>197</LineStart>
<Snippet>
		tr = new TR();
		tr.addElement(new TD().addElement(new StringElement(&quot;Color: &quot; + COLOR_RESPONSE)));
		t.addElement(tr);
</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE" iid="49EE68C7C41CA52BADADB983227094F8">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method writeTable() in DatabaseUtilities.java sends unvalidated data to a web browser on line 159, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtilities.java</FileName>
<FilePath>session/DatabaseUtilities.java</FilePath>
<LineStart>159</LineStart>
<Snippet>					String str = results.getString(i);
					if (str == null) str = &quot;&quot;;
					row.addElement(new TD(str.replaceAll(&quot; &quot;, &quot;&amp;nbsp;&quot;)));
				}
</Snippet>
                            </Primary>
                            <Source>
<FileName>SqlNumericInjection.java</FileName>
<FilePath>lessons/SqlNumericInjection.java</FilePath>
<LineStart>189</LineStart>
<Snippet>																			ResultSet.CONCUR_READ_ONLY);
				statement.setInt(1, Integer.parseInt(station));
				ResultSet results = statement.executeQuery();

				if ((results != null) &amp;&amp; (results.first() == true))</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="CAEF78F7ACB495B39AA41859B49D818E">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method injectableQuery() in SqlStringInjection.java sends unvalidated data to a web browser on line 95, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SqlStringInjection.java</FileName>
<FilePath>lessons/SqlStringInjection.java</FilePath>
<LineStart>95</LineStart>
<Snippet>
			String query = &quot;SELECT * FROM user_data WHERE last_name = '&quot; + accountName + &quot;'&quot;;
			ec.addElement(new PRE(query));

			try</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE" iid="B589FB938E368694022519D8D6556E9C">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createSuccessfulLoginContent() in SessionFixation.java sends unvalidated data to a web browser on line 584, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SessionFixation.java</FileName>
<FilePath>lessons/SessionFixation.java</FilePath>
<LineStart>584</LineStart>
<Snippet>
			tr4.addElement(new TD(&quot;&lt;b&gt;Credit Card Number:&lt;/b&gt;&quot;));
			tr4.addElement(new TD(results.getString(&quot;cc_number&quot;)));

		}</Snippet>
                            </Primary>
                            <Source>
<FileName>SessionFixation.java</FileName>
<FilePath>lessons/SessionFixation.java</FilePath>
<LineStart>641</LineStart>
<Snippet>			prepStatement.setString(1, user);

			ResultSet results = prepStatement.executeQuery();

			return results;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="AEC88F822F6F49AF0D7AD498A4599F51">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method getSource() in AbstractLesson.java sends unvalidated data to a web browser on line 531, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>lessons/AbstractLesson.java</FilePath>
<LineStart>531</LineStart>
<Snippet>
		Head head = new Head();
		head.addElement(new Title(getSourceFileName()));

		Body body = new Body();</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="55F2C33769BE71E4E5F636E2E2E25738">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createQtyTable() in ClientSideValidation.java sends unvalidated data to a web browser on line 312, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ClientSideValidation.java</FileName>
<FilePath>lessons/ClientSideValidation.java</FilePath>
<LineStart>312</LineStart>
<Snippet>				.setAlign(&quot;right&quot;));

		input = new Input(Input.TEXT, &quot;QTY2&quot;, s.getParser().getStringParameter(&quot;QTY2&quot;, &quot;0&quot;));

		input.setOnKeyUp(&quot;updateTotals();&quot;);</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE" iid="59C5CEDAD574466F6E0CC993B70F35C0">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method addDBEntriesToEC() in BackDoors.java sends unvalidated data to a web browser on line 98, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>BackDoors.java</FileName>
<FilePath>lessons/BackDoors.java</FilePath>
<LineStart>98</LineStart>
<Snippet>
				tr = new TR();
				tr.addElement(new TD(rs.getString(&quot;userid&quot;)));
				tr.addElement(new TD(rs.getString(&quot;password&quot;)));
				tr.addElement(new TD(rs.getString(&quot;ssn&quot;)));</Snippet>
                            </Primary>
                            <Source>
<FileName>BackDoors.java</FileName>
<FilePath>lessons/BackDoors.java</FilePath>
<LineStart>180</LineStart>
<Snippet>				}
			}
			ResultSet rs = statement.executeQuery(arrSQL[0]);
			addDBEntriesToEC(ec, rs);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="A1D6BAF2CCF180E4CDED6FCF41F184C7">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createContent() in ReflectedXSS.java sends unvalidated data to a web browser on line 187, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ReflectedXSS.java</FileName>
<FilePath>lessons/ReflectedXSS.java</FilePath>
<LineStart>187</LineStart>
<Snippet>			tr = new TR();
			tr.addElement(new TD().addElement(WebGoatI18N.get(&quot;Enter3DigitCode&quot;)+&quot;:&quot;));
			tr.addElement(new TD().addElement(&quot;&lt;input name='field1' type='TEXT' value='&quot; + param1 + &quot;'&gt;&quot;));
			// tr.addElement(new TD().addElement(new Input(Input.TEXT, &quot;field1&quot;,param1)));
			t.addElement(tr);</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE" iid="82B094AE26A7CCE133F40273636FF019">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createSuccessfulLoginContent() in InsecureLogin.java sends unvalidated data to a web browser on line 322, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>InsecureLogin.java</FileName>
<FilePath>lessons/InsecureLogin.java</FilePath>
<LineStart>322</LineStart>
<Snippet>
			tr3.addElement(new TD(&quot;&lt;b&gt;Credit Card Type:&lt;/b&gt;&quot;));
			tr3.addElement(new TD(results.getString(&quot;cc_type&quot;)));

			tr4.addElement(new TD(&quot;&lt;b&gt;Credit Card Number:&lt;/b&gt;&quot;));</Snippet>
                            </Primary>
                            <Source>
<FileName>InsecureLogin.java</FileName>
<FilePath>lessons/InsecureLogin.java</FilePath>
<LineStart>447</LineStart>
<Snippet>			prepStatement.setString(1, user);

			ResultSet results = prepStatement.executeQuery();

			return results;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="713995E0CBF19FA7E893063A6864CBE2">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method injectableQuery() in SqlNumericInjection.java sends unvalidated data to a web browser on line 109, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SqlNumericInjection.java</FileName>
<FilePath>lessons/SqlNumericInjection.java</FilePath>
<LineStart>109</LineStart>
<Snippet>			}

			ec.addElement(new PRE(query));

			if (station == null) return ec;</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="164F50FC73966E07C13D9DBF85E6B422">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createContent() in JavaScriptValidation.java sends unvalidated data to a web browser on line 120, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>JavaScriptValidation.java</FileName>
<FilePath>lessons/JavaScriptValidation.java</FilePath>
<LineStart>120</LineStart>
<Snippet>			TextArea input3 = new TextArea(&quot;field3&quot;, 1, 25).addElement(param3);
			TextArea input4 = new TextArea(&quot;field4&quot;, 1, 25).addElement(param4);
			TextArea input5 = new TextArea(&quot;field5&quot;, 1, 25).addElement(param5);
			TextArea input6 = new TextArea(&quot;field6&quot;, 1, 25).addElement(param6);
			TextArea input7 = new TextArea(&quot;field7&quot;, 1, 25).addElement(param7);</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="DE5500BB259E4DEE5301FEF56094D5D6">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createContent() in BlindScript.java sends unvalidated data to a web browser on line 97, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>BlindScript.java</FileName>
<FilePath>lessons/BlindScript.java</FilePath>
<LineStart>97</LineStart>
<Snippet>			ec.addElement(new StringElement(&quot;Enter your name: &quot;));

			Input input = new Input(Input.TEXT, PERSON, person.toString());
			ec.addElement(input);
</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="3CBAC9D11F228AA2C599D3AA935DD4A6">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method makeLogin() in WeakSessionID.java sends unvalidated data to a web browser on line 251, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>WeakSessionID.java</FileName>
<FilePath>lessons/WeakSessionID.java</FilePath>
<LineStart>251</LineStart>
<Snippet>		Input input1 = new Input(Input.TEXT, USERNAME, &quot;&quot;);
		Input input2 = new Input(Input.PASSWORD, PASSWORD, &quot;&quot;);
		Input input3 = new Input(Input.HIDDEN, SESSIONID, weakid);
		row1.addElement(new TD(input1));
		row2.addElement(new TD(input2));</Snippet>
                            </Primary>
                            <Source>
<FileName>WebSession.java</FileName>
<FilePath>session/WebSession.java</FilePath>
<LineStart>507</LineStart>
<Snippet>	public String getCookie(String cookieName)
	{
		Cookie[] cookies = getRequest().getCookies();

		for (int i = 0; i &lt; cookies.length; i++)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE" iid="CA79C03FFFD4F98B762824551D62F4B8">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method writeTable() in DatabaseUtilities.java sends unvalidated data to a web browser on line 159, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtilities.java</FileName>
<FilePath>session/DatabaseUtilities.java</FilePath>
<LineStart>159</LineStart>
<Snippet>					String str = results.getString(i);
					if (str == null) str = &quot;&quot;;
					row.addElement(new TD(str.replaceAll(&quot; &quot;, &quot;&amp;nbsp;&quot;)));
				}
</Snippet>
                            </Primary>
                            <Source>
<FileName>SqlAddData.java</FileName>
<FilePath>lessons/SqlAddData.java</FilePath>
<LineStart>102</LineStart>
<Snippet>				statement.execute(query);
				
				ResultSet results = statement.getResultSet();

				if ((results != null) &amp;&amp; (results.first() == true))</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="E350095CB012D2ECF7AC8B80E4032750">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doStage1() in BasicAuthentication.java sends unvalidated data to a web browser on line 128, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>BasicAuthentication.java</FileName>
<FilePath>lessons/BasicAuthentication.java</FilePath>
<LineStart>128</LineStart>
<Snippet>
			row1.addElement(new TD(new Input(Input.TEXT, HEADER_NAME, headerName.toString())));
			row2.addElement(new TD(new Input(Input.TEXT, HEADER_VALUE, headerValue.toString())));

			t.addElement(row1);</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="136B8494DBEDB037F4B6373CB3FB1037">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createContent() in WsSqlInjection.java sends unvalidated data to a web browser on line 179, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>WsSqlInjection.java</FileName>
<FilePath>lessons/WsSqlInjection.java</FilePath>
<LineStart>179</LineStart>
<Snippet>
			String query = &quot;SELECT * FROM user_data WHERE userid = &quot; + accountNumber;
			ec.addElement(new PRE(query));
			for (int i = 0; i &lt; accountNumber.length(); i++)
			{</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="A1034B82F01CD7364990B406A98A08FC">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method handleRequest() in MaliciousFileExecution.java sends unvalidated data to a web browser on line 488, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>MaliciousFileExecution.java</FileName>
<FilePath>lessons/MaliciousFileExecution.java</FilePath>
<LineStart>488</LineStart>
<Snippet>			// call createContent first so messages will go somewhere

			Form form = new Form(getFormAction(), Form.POST).setName(&quot;form&quot;)
				.setEncType(&quot;multipart/form-data&quot;);
</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="DF4FAAAE331A13C1E41E7E30239494DB">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method getSource() in AbstractLesson.java sends unvalidated data to a web browser on line 534, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>lessons/AbstractLesson.java</FilePath>
<LineStart>534</LineStart>
<Snippet>
		Body body = new Body();
		body.addElement(new StringElement(src));

		html.addElement(head);</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="BCE407BB56586EA1ECB60962B79933E8">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doHTTPSplitting() in HttpSplitting.java sends unvalidated data to a web browser on line 103, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>HttpSplitting.java</FileName>
<FilePath>lessons/HttpSplitting.java</FilePath>
<LineStart>103</LineStart>
<Snippet>					String message = lang.substring(lang.indexOf(&quot;&lt;html&gt;&quot;));

					out.print(message);
					out.flush();
					out.close();</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="9A75C2F16C64D536498D5DE279270851">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createAttackEnvironment() in HttpSplitting.java sends unvalidated data to a web browser on line 162, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>HttpSplitting.java</FileName>
<FilePath>lessons/HttpSplitting.java</FilePath>
<LineStart>162</LineStart>
<Snippet>
		// add the search by field
		Input input = new Input(Input.TEXT, LANGUAGE, lang.toString());
		ec.addElement(input);
</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="2A6D8B9F21BBDEA364EA54CCAF32710F">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method makeFirstStep() in OffByOne.java sends unvalidated data to a web browser on line 282, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>OffByOne.java</FileName>
<FilePath>lessons/OffByOne.java</FilePath>
<LineStart>282</LineStart>
<Snippet>			param = &quot;&quot;;
		}
		input = new Input(Input.TEXT, ROOM_NUMBER, param);

		tr = new TR();</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE" iid="F8A25478D5347EF6BE82C2A4DA045AE8">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method writeTable() in DatabaseUtilities.java sends unvalidated data to a web browser on line 159, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtilities.java</FileName>
<FilePath>session/DatabaseUtilities.java</FilePath>
<LineStart>159</LineStart>
<Snippet>					String str = results.getString(i);
					if (str == null) str = &quot;&quot;;
					row.addElement(new TD(str.replaceAll(&quot; &quot;, &quot;&amp;nbsp;&quot;)));
				}
</Snippet>
                            </Primary>
                            <Source>
<FileName>UserAdminScreen.java</FileName>
<FilePath>lessons/admin/UserAdminScreen.java</FilePath>
<LineStart>68</LineStart>
<Snippet>			Statement statement = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
																ResultSet.CONCUR_READ_ONLY);
			ResultSet results = statement.executeQuery(QUERY);

			if (results != null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE" iid="69196A7A21B35483FE9D3DA03D2AE088">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method makeStationList() in SqlNumericInjection.java sends unvalidated data to a web browser on line 235, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SqlNumericInjection.java</FileName>
<FilePath>lessons/SqlNumericInjection.java</FilePath>
<LineStart>235</LineStart>
<Snippet>		{
			String key = (String) it.next();
			select.addElement(new Option(key).addElement((String) stations.get(key)));
		}
		ec.addElement(select);</Snippet>
                            </Primary>
                            <Source>
<FileName>SqlNumericInjection.java</FileName>
<FilePath>lessons/SqlNumericInjection.java</FilePath>
<LineStart>263</LineStart>
<Snippet>			Statement statement = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
																ResultSet.CONCUR_READ_ONLY);
			ResultSet results = statement.executeQuery(query);

			if ((results != null) &amp;&amp; (results.first() == true))</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="C370A9741B667F9945D4610B3972E6AC">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method mainContent() in DOMXSS.java sends unvalidated data to a web browser on line 156, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DOMXSS.java</FileName>
<FilePath>lessons/DOMXSS.java</FilePath>
<LineStart>156</LineStart>
<Snippet>			attackString = new StringBuffer(s.getParser().getStringParameter(PERSON, &quot;&quot;));

			Input input = new Input(Input.TEXT, PERSON, attackString.toString());
			input.setOnKeyUp(&quot;displayGreeting(&quot; + PERSON + &quot;.value)&quot;);
			ec.addElement(input);</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="EE13C6739CAF4BC720DE31AF7F8C738C">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createQtyTable() in ClientSideValidation.java sends unvalidated data to a web browser on line 340, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ClientSideValidation.java</FileName>
<FilePath>lessons/ClientSideValidation.java</FilePath>
<LineStart>340</LineStart>
<Snippet>
		tr.addElement(new TD().addElement(
											new Input(Input.TEXT, &quot;TOT3&quot;, s.getParser().getStringParameter(&quot;TOT3&quot;,
																											&quot;$0.00&quot;))
													.setSize(10).setReadOnly(true).setStyle(&quot;border:0px;&quot;))</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE" iid="08AE22A9CA0348F7E15D1203255C58A5">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method addDBEntriesToEC() in BackDoors.java sends unvalidated data to a web browser on line 100, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>BackDoors.java</FileName>
<FilePath>lessons/BackDoors.java</FilePath>
<LineStart>100</LineStart>
<Snippet>				tr.addElement(new TD(rs.getString(&quot;userid&quot;)));
				tr.addElement(new TD(rs.getString(&quot;password&quot;)));
				tr.addElement(new TD(rs.getString(&quot;ssn&quot;)));
				tr.addElement(new TD(rs.getString(&quot;salary&quot;)));
				tr.addElement(new TD(rs.getString(&quot;email&quot;)));</Snippet>
                            </Primary>
                            <Source>
<FileName>BackDoors.java</FileName>
<FilePath>lessons/BackDoors.java</FilePath>
<LineStart>148</LineStart>
<Snippet>				}

				ResultSet rs = statement.executeQuery(arrSQL[0]);
				addDBEntriesToEC(ec, rs);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="C4C9ABC150F74D041D2C56F837D11242">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method handleRequest() in DOMInjection.java sends unvalidated data to a web browser on line 87, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DOMInjection.java</FileName>
<FilePath>lessons/DOMInjection.java</FilePath>
<LineStart>87</LineStart>
<Snippet>			e.printStackTrace();
		}
		Form form = new Form(getFormAction(), Form.POST).setName(&quot;form&quot;).setEncType(&quot;&quot;);

		form.addElement(createContent(s));</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="699EC0C6D59F22AD41D6C82B0643977E">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method makeContent() in HttpOnly.java sends unvalidated data to a web browser on line 255, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>HttpOnly.java</FileName>
<FilePath>lessons/HttpOnly.java</FilePath>
<LineStart>255</LineStart>
<Snippet>		tr = new TR();

		tr.addElement(new TD(new StringElement(&quot;Your browser appears to be: &quot; + getBrowserType(s))));
		t.addElement(tr);
</Snippet>
                            </Primary>
                            <Source>
<FileName>WebSession.java</FileName>
<FilePath>session/WebSession.java</FilePath>
<LineStart>1060</LineStart>
<Snippet>	public String getHeader(String header)
	{
		return getRequest().getHeader(header);
	}
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="762CD42A531DB9C63409543D3F6FCB09">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method handleRequest() in AbstractLesson.java sends unvalidated data to a web browser on line 771, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>lessons/AbstractLesson.java</FilePath>
<LineStart>771</LineStart>
<Snippet>		Form form = new Form(getFormAction(), Form.POST).setName(&quot;form&quot;).setEncType(&quot;&quot;);

		form.addElement(createContent(s));

		setContent(form);</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="A7B10FABE49ECD8520254D581BF6BF2A">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method handleRequest() in XMLInjection.java sends unvalidated data to a web browser on line 123, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>XMLInjection.java</FileName>
<FilePath>lessons/XMLInjection.java</FilePath>
<LineStart>123</LineStart>
<Snippet>		}

		Form form = new Form(getFormAction(), Form.POST).setName(&quot;form&quot;).setEncType(&quot;&quot;);

		form.addElement(createContent(s));</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE" iid="A7C591D2C3440C2AF0E6C996E36B5859">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createSuccessfulLoginContent() in MultiLevelLogin1.java sends unvalidated data to a web browser on line 441, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>MultiLevelLogin1.java</FileName>
<FilePath>lessons/MultiLevelLogin1.java</FilePath>
<LineStart>441</LineStart>
<Snippet>
			tr4.addElement(new TD(&quot;&lt;b&gt;Credit Card Number:&lt;/b&gt;&quot;));
			tr4.addElement(new TD(results.getString(&quot;cc_number&quot;)));

		}</Snippet>
                            </Primary>
                            <Source>
<FileName>MultiLevelLogin1.java</FileName>
<FilePath>lessons/MultiLevelLogin1.java</FilePath>
<LineStart>628</LineStart>
<Snippet>			prepStatement.setString(1, user);

			ResultSet results = prepStatement.executeQuery();

			return results;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="7B84B9DCDFE92ACCB70FBA98CECE65AD">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createTotalTable() in ClientSideValidation.java sends unvalidated data to a web browser on line 208, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ClientSideValidation.java</FileName>
<FilePath>lessons/ClientSideValidation.java</FilePath>
<LineStart>208</LineStart>
<Snippet>		tr.addElement(new TD().addElement(
											new Input(Input.TEXT, &quot;SUBTOT&quot;, s.getParser()
													.getStringParameter(&quot;SUBTOT&quot;, &quot;$0.00&quot;)).setReadOnly(true)
													.setStyle(&quot;border:0px;&quot;)).setAlign(&quot;right&quot;));
		t.addElement(tr);</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="9CDFF0D2BB14EFCFAA80DEB769D54185">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method writeSource() in LessonSource.java sends unvalidated data to a web browser on line 203, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>LessonSource.java</FileName>
<FilePath>LessonSource.java</FilePath>
<LineStart>203</LineStart>
<Snippet>		}

		out.print(s);
		out.close();
	}</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="1F7F1BD475F9EC46572EF665298F7D72">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createGoogleCredentials() in UncheckedEmail.java sends unvalidated data to a web browser on line 318, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>UncheckedEmail.java</FileName>
<FilePath>lessons/UncheckedEmail.java</FilePath>
<LineStart>318</LineStart>
<Snippet>		tr = new TR();
		tr.addElement(new TD().addElement(&quot;GMail login id:&quot;));
		Input input = new Input(Input.TEXT, GMAIL_ID, YOUR_REAL_GMAIL_ID);
		tr.addElement(new TD().addElement(input));
		t1.addElement(tr);</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="737A32658038060D09F9D4E83CEDD366">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createContent() in ReflectedXSS.java sends unvalidated data to a web browser on line 183, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ReflectedXSS.java</FileName>
<FilePath>lessons/ReflectedXSS.java</FilePath>
<LineStart>183</LineStart>
<Snippet>			tr = new TR();
			tr.addElement(new TD().addElement(WebGoatI18N.get(&quot;EnterCreditCard&quot;)+&quot;:&quot;));
			tr.addElement(new TD().addElement(new Input(Input.TEXT, &quot;field2&quot;, param2)));
			t.addElement(tr);
			tr = new TR();</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="CCA76E23FFA0613F0E74F257776A092D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createPurchaseContent() in ConcurrencyCart.java sends unvalidated data to a web browser on line 270, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ConcurrencyCart.java</FileName>
<FilePath>lessons/ConcurrencyCart.java</FilePath>
<LineStart>270</LineStart>
<Snippet>			tr = new TR();
			tr.addElement(new TD().addElement(&quot;Enter your credit card number:&quot;));
			tr.addElement(new TD().addElement(new Input(Input.TEXT, &quot;CC&quot;, param2)).setAlign(&quot;right&quot;));
			table.addElement(tr);
</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="2FCB1B1D45A0293A91910B089B8D5260">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method makeUser() in WeakAuthenticationCookie.java sends unvalidated data to a web browser on line 350, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>WeakAuthenticationCookie.java</FileName>
<FilePath>lessons/WeakAuthenticationCookie.java</FilePath>
<LineStart>350</LineStart>
<Snippet>	{
		ElementContainer ec = new ElementContainer();
		ec.addElement(new P().addElement(WebGoatI18N.get(&quot;WelcomeUser&quot;) + user));
		ec.addElement(new P().addElement(WebGoatI18N.get(&quot;YouHaveBeenAuthenticatedWith&quot;) + method));
		ec.addElement(new P().addElement(ECSFactory.makeLink(WebGoatI18N.get(&quot;Logout&quot;), LOGOUT, true)));</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="891BB2DFEE974E4C42065EE648F0B969">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method getSource() in AbstractLesson.java sends unvalidated data to a web browser on line 534, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>lessons/AbstractLesson.java</FilePath>
<LineStart>534</LineStart>
<Snippet>
		Body body = new Body();
		body.addElement(new StringElement(src));

		html.addElement(head);</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="24D6772E07680F26B70BFB7FD27DA83D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createTotalTable() in ClientSideValidation.java sends unvalidated data to a web browser on line 217, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ClientSideValidation.java</FileName>
<FilePath>lessons/ClientSideValidation.java</FilePath>
<LineStart>217</LineStart>
<Snippet>		tr.addElement(new TD().addElement(
											new Input(Input.TEXT, &quot;GRANDTOT&quot;, s.getParser()
													.getStringParameter(&quot;GRANDTOT&quot;, &quot;$0.00&quot;)).setReadOnly(true)
													.setStyle(&quot;border:0px;&quot;)).setAlign(&quot;right&quot;));
		t.addElement(tr);</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE" iid="2D31BF4DB84940308EB32F9EBED428A1">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method addDBEntriesToEC() in BackDoors.java sends unvalidated data to a web browser on line 101, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>BackDoors.java</FileName>
<FilePath>lessons/BackDoors.java</FilePath>
<LineStart>101</LineStart>
<Snippet>				tr.addElement(new TD(rs.getString(&quot;password&quot;)));
				tr.addElement(new TD(rs.getString(&quot;ssn&quot;)));
				tr.addElement(new TD(rs.getString(&quot;salary&quot;)));
				tr.addElement(new TD(rs.getString(&quot;email&quot;)));
				t.addElement(tr);</Snippet>
                            </Primary>
                            <Source>
<FileName>BackDoors.java</FileName>
<FilePath>lessons/BackDoors.java</FilePath>
<LineStart>180</LineStart>
<Snippet>				}
			}
			ResultSet rs = statement.executeQuery(arrSQL[0]);
			addDBEntriesToEC(ec, rs);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE" iid="613044DC73CA63761DDC77E8D8DFC396">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createSuccessfulLoginContent() in MultiLevelLogin2.java sends unvalidated data to a web browser on line 435, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>MultiLevelLogin2.java</FileName>
<FilePath>lessons/MultiLevelLogin2.java</FilePath>
<LineStart>435</LineStart>
<Snippet>
				tr3.addElement(new TD(&quot;&lt;b&gt;Credit Card Type:&lt;/b&gt;&quot;));
				tr3.addElement(new TD(results.getString(&quot;cc_type&quot;)));

				tr4.addElement(new TD(&quot;&lt;b&gt;Credit Card Number:&lt;/b&gt;&quot;));</Snippet>
                            </Primary>
                            <Source>
<FileName>MultiLevelLogin2.java</FileName>
<FilePath>lessons/MultiLevelLogin2.java</FilePath>
<LineStart>539</LineStart>
<Snippet>			prepStatement.setString(1, user);

			ResultSet results = prepStatement.executeQuery();

			return results;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="2E7359DAC61CBD5EEA7A4A3822651FC3">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method makeUser() in ReportCardScreen.java sends unvalidated data to a web browser on line 274, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ReportCardScreen.java</FileName>
<FilePath>lessons/admin/ReportCardScreen.java</FilePath>
<LineStart>274</LineStart>
<Snippet>		// &quot; [Normal User - Hacked Admin Access]&quot; : &quot; [Normal User]&quot;;
		String type = &quot;&quot;;
		h2.addElement(new StringElement(&quot;Results for: &quot; + user + type));
		return h2;
	}</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>567</LineStart>
<Snippet>		if (request == null) { return (null); }

		return request.getParameterNames();
	}
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="43CD99E25819C93B518B09911A662418">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createQtyTable() in ClientSideValidation.java sends unvalidated data to a web browser on line 288, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ClientSideValidation.java</FileName>
<FilePath>lessons/ClientSideValidation.java</FilePath>
<LineStart>288</LineStart>
<Snippet>				.setAlign(&quot;right&quot;));

		Input input = new Input(Input.TEXT, &quot;QTY1&quot;, s.getParser().getStringParameter(&quot;QTY1&quot;, &quot;0&quot;));

		input.setOnKeyUp(&quot;updateTotals();&quot;);</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="9E9A132DE597D3E1979264F5436A11F5">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createMailMessage() in UncheckedEmail.java sends unvalidated data to a web browser on line 275, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>UncheckedEmail.java</FileName>
<FilePath>lessons/UncheckedEmail.java</FilePath>
<LineStart>275</LineStart>
<Snippet>		tr = new TR();
		TextArea ta = new TextArea(MESSAGE, 5, 40);
		ta.addElement(new StringElement(convertMetachars(message)));
		tr.addElement(new TD().setAlign(&quot;LEFT&quot;).addElement(ta).setColSpan(2));
		tr.addElement(new TD().setAlign(&quot;LEFT&quot;).setVAlign(&quot;MIDDLE&quot;).addElement(ECSFactory.makeButton(&quot;Send!&quot;)));</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="9BCA1B24F5EC90D0CFFC2D301D14FC56">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method makeSearch() in Phishing.java sends unvalidated data to a web browser on line 137, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Phishing.java</FileName>
<FilePath>lessons/Phishing.java</FilePath>
<LineStart>137</LineStart>
<Snippet>		row1.addElement(new TD(new B(new StringElement(&quot;Search: &quot;))).setAlign(&quot;right&quot;));

		Input input1 = new Input(Input.TEXT, SEARCH, searchText);
		row1.addElement(new TD(input1).setAlign(&quot;left&quot;));
		t.addElement(row1);</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="3E1DFE39AC6795E887C355DBA577DA93">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createContent() in JavaScriptValidation.java sends unvalidated data to a web browser on line 122, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>JavaScriptValidation.java</FileName>
<FilePath>lessons/JavaScriptValidation.java</FilePath>
<LineStart>122</LineStart>
<Snippet>			TextArea input5 = new TextArea(&quot;field5&quot;, 1, 25).addElement(param5);
			TextArea input6 = new TextArea(&quot;field6&quot;, 1, 25).addElement(param6);
			TextArea input7 = new TextArea(&quot;field7&quot;, 1, 25).addElement(param7);

			Input b = new Input();</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="E33F54E85FE3D92C18F055C1B738A0CC">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method handleRequest() in DOMInjection.java sends unvalidated data to a web browser on line 87, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DOMInjection.java</FileName>
<FilePath>lessons/DOMInjection.java</FilePath>
<LineStart>87</LineStart>
<Snippet>			e.printStackTrace();
		}
		Form form = new Form(getFormAction(), Form.POST).setName(&quot;form&quot;).setEncType(&quot;&quot;);

		form.addElement(createContent(s));</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="A5B4B2C39CB4345D9B5FFD6693E8163B">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method makeAccountLine() in SqlStringInjection.java sends unvalidated data to a web browser on line 204, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SqlStringInjection.java</FileName>
<FilePath>lessons/SqlStringInjection.java</FilePath>
<LineStart>204</LineStart>
<Snippet>
		accountName = s.getParser().getRawParameter(ACCT_NAME, &quot;Your Name&quot;);
		Input input = new Input(Input.TEXT, ACCT_NAME, accountName.toString());
		ec.addElement(input);
</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE" iid="AAFC1F7059CAAA46A9CD6BDBA80E9309">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method makeCurrent() in CSRF.java sends unvalidated data to a web browser on line 306, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>CSRF.java</FileName>
<FilePath>lessons/CSRF.java</FilePath>
<LineStart>306</LineStart>
<Snippet>
				TR row3 = new TR(new TD(new StringElement(&quot;Posted By:&quot;)));
				row3.addElement(new TD(new StringElement(results.getString(USER_COL))));
				t.addElement(row3);
</Snippet>
                            </Primary>
                            <Source>
<FileName>CSRF.java</FileName>
<FilePath>lessons/CSRF.java</FilePath>
<LineStart>290</LineStart>
<Snippet>			statement.setInt(2, messageNum);
			statement.setString(3, this.getClass().getName());
			ResultSet results = statement.executeQuery();

			if ((results != null) &amp;&amp; results.first())</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="4C12182144646E8CB86DC6A9C540EDBA">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createSuccessfulLoginContent() in InsecureLogin.java sends unvalidated data to a web browser on line 311, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>InsecureLogin.java</FileName>
<FilePath>lessons/InsecureLogin.java</FilePath>
<LineStart>311</LineStart>
<Snippet>		TR tr4 = new TR();
		tr1.addElement(new TD(&quot;&lt;b&gt;Firstname:&lt;/b&gt;&quot;));
		tr1.addElement(new TD(user));

		try</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="B50ACC2002D76D2BE145042267855DB2">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createQtyTable() in ClientSideValidation.java sends unvalidated data to a web browser on line 330, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ClientSideValidation.java</FileName>
<FilePath>lessons/ClientSideValidation.java</FilePath>
<LineStart>330</LineStart>
<Snippet>		tr.addElement(new TD()
				.addElement(
							new Input(Input.TEXT, &quot;PRC3&quot;, s.getParser().getStringParameter(&quot;PRC3&quot;, &quot;$1599.99&quot;))
									.setSize(10).setReadOnly(true).setStyle(&quot;border:0px;&quot;)).setAlign(&quot;right&quot;));
</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="F42DEED1CBE2D594CCC8BF02CC460E3E">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method makeAccountLine() in WsSqlInjection.java sends unvalidated data to a web browser on line 162, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>WsSqlInjection.java</FileName>
<FilePath>lessons/WsSqlInjection.java</FilePath>
<LineStart>162</LineStart>
<Snippet>
		accountNumber = s.getParser().getRawParameter(ACCT_NUM, &quot;101&quot;);
		Input input = new Input(Input.TEXT, ACCT_NUM, accountNumber.toString());
		ec.addElement(input);
</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="D2C75BCF6FA924B40450E82385BEB1DA">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createQtyTable() in ClientSideValidation.java sends unvalidated data to a web browser on line 362, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ClientSideValidation.java</FileName>
<FilePath>lessons/ClientSideValidation.java</FilePath>
<LineStart>362</LineStart>
<Snippet>
		tr.addElement(new TD().addElement(
											new Input(Input.TEXT, &quot;TOT4&quot;, s.getParser().getStringParameter(&quot;TOT4&quot;,
																											&quot;$0.00&quot;))
													.setSize(10).setReadOnly(true).setStyle(&quot;border:0px;&quot;))</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE" iid="81C6BF09430D7517DEFF022D71F3EC88">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method makePulldown() in ECSFactory.java sends unvalidated data to a web browser on line 483, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ECSFactory.java</FileName>
<FilePath>session/ECSFactory.java</FilePath>
<LineStart>483</LineStart>
<Snippet>		Select s = new Select(name);

		s.addElement(options.toArray(new String[options.size()]));

		return (s);</Snippet>
                            </Primary>
                            <Source>
<FileName>Challenge2Screen.java</FileName>
<FilePath>lessons/Challenge2Screen.java</FilePath>
<LineStart>221</LineStart>
<Snippet>		try
		{
			ResultSet results = statement3.executeQuery(query);

			while (results.next())</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="ECB6446AED809B952698D0EE0D3EBD4B">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createContent() in BlindStringSqlInjection.java sends unvalidated data to a web browser on line 81, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>BlindStringSqlInjection.java</FileName>
<FilePath>lessons/BlindStringSqlInjection.java</FilePath>
<LineStart>81</LineStart>
<Snippet>
	    String accountNumber = s.getParser().getRawParameter(ACCT_NUM, &quot;101&quot;);
	    Input input = new Input(Input.TEXT, ACCT_NUM, accountNumber.toString());
	    ec.addElement(input);
</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="7405B1665C003A048B8555581AFB5A8A">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method makeThirdStep() in OffByOne.java sends unvalidated data to a web browser on line 466, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>OffByOne.java</FileName>
<FilePath>lessons/OffByOne.java</FilePath>
<LineStart>466</LineStart>
<Snippet>
		param2 = s.getParser().getStringParameter(FIRST_NAME, &quot;&quot;);
		input = new Input(Input.HIDDEN, &quot;b&quot;, param2);
		ec.addElement(input);
		ec.addElement(&quot;\r\n&quot;);</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="B1FA99884493B0FC33CE4691E972AE8D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method makeSecondStep() in OffByOne.java sends unvalidated data to a web browser on line 384, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>OffByOne.java</FileName>
<FilePath>lessons/OffByOne.java</FilePath>
<LineStart>384</LineStart>
<Snippet>
		param = s.getParser().getStringParameter(ROOM_NUMBER, &quot;&quot;);
		input = new Input(Input.HIDDEN, ROOM_NUMBER, param);
		ec.addElement(input);
		ec.addElement(&quot;\r\n&quot;);</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="5C0267202C8B54E772867763AE84A933">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method handleRequest() in SilentTransactions.java sends unvalidated data to a web browser on line 111, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SilentTransactions.java</FileName>
<FilePath>lessons/SilentTransactions.java</FilePath>
<LineStart>111</LineStart>
<Snippet>		}

		Form form = new Form(getFormAction(), Form.POST).setName(&quot;form&quot;).setEncType(&quot;&quot;);

		form.addElement(createContent(s));</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="7F0DF6304F4DC8F0ECE223953754E808">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createQtyTable() in ClientSideValidation.java sends unvalidated data to a web browser on line 355, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ClientSideValidation.java</FileName>
<FilePath>lessons/ClientSideValidation.java</FilePath>
<LineStart>355</LineStart>
<Snippet>				.setAlign(&quot;right&quot;));

		input = new Input(Input.TEXT, &quot;QTY4&quot;, s.getParser().getStringParameter(&quot;QTY4&quot;, &quot;0&quot;));

		input.setOnKeyUp(&quot;updateTotals();&quot;);</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE" iid="17A6384CEBB51F37B0891662889D965B">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method addDBEntriesToEC() in BackDoors.java sends unvalidated data to a web browser on line 100, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>BackDoors.java</FileName>
<FilePath>lessons/BackDoors.java</FilePath>
<LineStart>100</LineStart>
<Snippet>				tr.addElement(new TD(rs.getString(&quot;userid&quot;)));
				tr.addElement(new TD(rs.getString(&quot;password&quot;)));
				tr.addElement(new TD(rs.getString(&quot;ssn&quot;)));
				tr.addElement(new TD(rs.getString(&quot;salary&quot;)));
				tr.addElement(new TD(rs.getString(&quot;email&quot;)));</Snippet>
                            </Primary>
                            <Source>
<FileName>BackDoors.java</FileName>
<FilePath>lessons/BackDoors.java</FilePath>
<LineStart>180</LineStart>
<Snippet>				}
			}
			ResultSet rs = statement.executeQuery(arrSQL[0]);
			addDBEntriesToEC(ec, rs);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="7E29B49E42036569BB51EF5AD7810192">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createContent() in Encoding.java sends unvalidated data to a web browser on line 193, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>lessons/Encoding.java</FilePath>
<LineStart>193</LineStart>
<Snippet>			tr.addElement(new TD(&quot;Enter a string: &quot;));

			Input input = new Input(Input.TEXT, INPUT, userInput);

			tr.addElement(new TD().addElement(input));</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="81B34FB358F9A709EFB3FEF0E850CEE8">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method makeMessages() in Screen.java sends unvalidated data to a web browser on line 198, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Screen.java</FileName>
<FilePath>session/Screen.java</FilePath>
<LineStart>198</LineStart>
<Snippet>		String message = s.getMessage();

		f.addElement(message);

		return (f);</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="810D175C4EDAA53D4E428DF3881905C8">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method makeAccountLine() in SqlModifyData.java sends unvalidated data to a web browser on line 167, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SqlModifyData.java</FileName>
<FilePath>lessons/SqlModifyData.java</FilePath>
<LineStart>167</LineStart>
<Snippet>
		userid = s.getParser().getRawParameter(USERID, &quot;jsmith&quot;);
		Input input = new Input(Input.TEXT, USERID, userid.toString());
		ec.addElement(input);
</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE" iid="5760CE0BBDA499AE0AE1D860ACBAC88F">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method addDBEntriesToEC() in BackDoors.java sends unvalidated data to a web browser on line 102, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>BackDoors.java</FileName>
<FilePath>lessons/BackDoors.java</FilePath>
<LineStart>102</LineStart>
<Snippet>				tr.addElement(new TD(rs.getString(&quot;ssn&quot;)));
				tr.addElement(new TD(rs.getString(&quot;salary&quot;)));
				tr.addElement(new TD(rs.getString(&quot;email&quot;)));
				t.addElement(tr);
				while (rs.next())</Snippet>
                            </Primary>
                            <Source>
<FileName>BackDoors.java</FileName>
<FilePath>lessons/BackDoors.java</FilePath>
<LineStart>148</LineStart>
<Snippet>				}

				ResultSet rs = statement.executeQuery(arrSQL[0]);
				addDBEntriesToEC(ec, rs);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="699798F33ADBA612175FB2D5C904D8B2">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createTotalTable() in ClientSideValidation.java sends unvalidated data to a web browser on line 233, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ClientSideValidation.java</FileName>
<FilePath>lessons/ClientSideValidation.java</FilePath>
<LineStart>233</LineStart>
<Snippet>		tr.addElement(new TD().addElement(&quot;Enter your coupon code:&quot;));

		Input input = new Input(Input.TEXT, &quot;field1&quot;, param1);
		input.setOnKeyUp(&quot;isValidCoupon(field1.value)&quot;);
		tr.addElement(new TD().addElement(input));</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="5FA2BAB936A3EE51F9CD8D6E3A66FB7F">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method handleRequest() in SessionFixation.java sends unvalidated data to a web browser on line 778, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SessionFixation.java</FileName>
<FilePath>lessons/SessionFixation.java</FilePath>
<LineStart>778</LineStart>
<Snippet>		Form form = new Form();
		form.addElement(createContent(s));
		form.setAction(getFormAction());
		form.setMethod(Form.POST);
		form.setName(&quot;form&quot;);</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="95E7CF7288C12AEC3A209A76AD161558">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method makeRow() in Encoding.java sends unvalidated data to a web browser on line 612, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>lessons/Encoding.java</FilePath>
<LineStart>612</LineStart>
<Snippet>				.setBgColor(&quot;#dddddd&quot;);
		TD val2 = new TD()
				.addElement(new Div().addElement(value2).setStyle(&quot;overflow:auto; height:60px; width:100px;&quot;))
				.setBgColor(&quot;#dddddd&quot;);
		TR tr = new TR();</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="976B940901D5F4F431C12B7BD365AFD5">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method makeAccountLine() in SqlAddData.java sends unvalidated data to a web browser on line 149, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SqlAddData.java</FileName>
<FilePath>lessons/SqlAddData.java</FilePath>
<LineStart>149</LineStart>
<Snippet>
		userid = s.getParser().getRawParameter(USERID, &quot;jsmith&quot;);
		Input input = new Input(Input.TEXT, USERID, userid.toString());
		ec.addElement(input);
</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="01104AD8B3D348099F605FAB6ECA770A">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createContent() in DangerousEval.java sends unvalidated data to a web browser on line 110, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DangerousEval.java</FileName>
<FilePath>lessons/DangerousEval.java</FilePath>
<LineStart>110</LineStart>
<Snippet>			tr.addElement(new TD().addElement(&quot;Studio RTA - Laptop/Reading Cart with Tilting Surface - Cherry &quot;));
			tr.addElement(new TD().addElement(&quot;69.99&quot;).setAlign(&quot;right&quot;));
		    tr.addElement(new TD().addElement(new Input(Input.TEXT, &quot;QTY1&quot;, s.getParser().getStringParameter(&quot;QTY1&quot;, &quot;1&quot;))).setAlign(&quot;right&quot;));
			quantity = s.getParser().getFloatParameter(&quot;QTY1&quot;, 0.0f);
			total = quantity * 69.99f;</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE" iid="5968037DF9A55AD25E173A81822A3CF8">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method addDBEntriesToEC() in BackDoors.java sends unvalidated data to a web browser on line 107, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>BackDoors.java</FileName>
<FilePath>lessons/BackDoors.java</FilePath>
<LineStart>107</LineStart>
<Snippet>				{
					tr = new TR();
					tr.addElement(new TD(rs.getString(&quot;userid&quot;)));
					tr.addElement(new TD(rs.getString(&quot;password&quot;)));
					tr.addElement(new TD(rs.getString(&quot;ssn&quot;)));</Snippet>
                            </Primary>
                            <Source>
<FileName>BackDoors.java</FileName>
<FilePath>lessons/BackDoors.java</FilePath>
<LineStart>148</LineStart>
<Snippet>				}

				ResultSet rs = statement.executeQuery(arrSQL[0]);
				addDBEntriesToEC(ec, rs);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE" iid="31335CA31F53FB273AAE4C31E6E97570">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method addDBEntriesToEC() in BackDoors.java sends unvalidated data to a web browser on line 108, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>BackDoors.java</FileName>
<FilePath>lessons/BackDoors.java</FilePath>
<LineStart>108</LineStart>
<Snippet>					tr = new TR();
					tr.addElement(new TD(rs.getString(&quot;userid&quot;)));
					tr.addElement(new TD(rs.getString(&quot;password&quot;)));
					tr.addElement(new TD(rs.getString(&quot;ssn&quot;)));
					tr.addElement(new TD(rs.getString(&quot;salary&quot;)));</Snippet>
                            </Primary>
                            <Source>
<FileName>BackDoors.java</FileName>
<FilePath>lessons/BackDoors.java</FilePath>
<LineStart>180</LineStart>
<Snippet>				}
			}
			ResultSet rs = statement.executeQuery(arrSQL[0]);
			addDBEntriesToEC(ec, rs);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="8F666CBD2C244F19D32C2178B200AF4A">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method makeUser() in WeakAuthenticationCookie.java sends unvalidated data to a web browser on line 350, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>WeakAuthenticationCookie.java</FileName>
<FilePath>lessons/WeakAuthenticationCookie.java</FilePath>
<LineStart>350</LineStart>
<Snippet>	{
		ElementContainer ec = new ElementContainer();
		ec.addElement(new P().addElement(WebGoatI18N.get(&quot;WelcomeUser&quot;) + user));
		ec.addElement(new P().addElement(WebGoatI18N.get(&quot;YouHaveBeenAuthenticatedWith&quot;) + method));
		ec.addElement(new P().addElement(ECSFactory.makeLink(WebGoatI18N.get(&quot;Logout&quot;), LOGOUT, true)));</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="72C729E1CE68FD1CDE292F43800D8F79">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createSuccessfulLoginContent() in SessionFixation.java sends unvalidated data to a web browser on line 570, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SessionFixation.java</FileName>
<FilePath>lessons/SessionFixation.java</FilePath>
<LineStart>570</LineStart>
<Snippet>		TR tr4 = new TR();
		tr1.addElement(new TD(&quot;&lt;b&gt;Firstname:&lt;/b&gt;&quot;));
		tr1.addElement(new TD(getLoggedInUser(s)));

		try</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="5A2081A2492CA584357E9B3F6126D6B7">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createContent() in LogSpoofing.java sends unvalidated data to a web browser on line 108, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>LogSpoofing.java</FileName>
<FilePath>lessons/LogSpoofing.java</FilePath>
<LineStart>108</LineStart>
<Snippet>			Table t2 = new Table(0).setCellSpacing(0).setCellPadding(0).setBorder(0);
			TR row4 = new TR();
			row4.addElement(new TD(new PRE(WebGoatI18N.get(&quot;LoginFailedForUserName&quot;)+&quot;: &quot; + inputUsername))).setBgColor(HtmlColor.GRAY);

			t2.addElement(row4);</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="EB3B473F2445E5F0A53D92F1FBC270F0">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createContent() in WSDLScanning.java sends unvalidated data to a web browser on line 216, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>WSDLScanning.java</FileName>
<FilePath>lessons/WSDLScanning.java</FilePath>
<LineStart>216</LineStart>
<Snippet>			for (int i = 0; i &lt; fields.length; i++)
			{
				header.addElement(new TD().addElement(fields[i]));
				results.addElement(new TD().addElement((String) accessWGService(s, &quot;WSDLScanning&quot;, port, fields[i],
																				&quot;acct_num&quot;, new Integer(id))));</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>581</LineStart>
<Snippet>		if (request == null) { return (null); }

		return request.getParameterValues(name);
	}
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="ECCDC093B44A753B2043DDE5391DD4EC">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createContent() in WsSqlInjection.java sends unvalidated data to a web browser on line 179, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>WsSqlInjection.java</FileName>
<FilePath>lessons/WsSqlInjection.java</FilePath>
<LineStart>179</LineStart>
<Snippet>
			String query = &quot;SELECT * FROM user_data WHERE userid = &quot; + accountNumber;
			ec.addElement(new PRE(query));
			for (int i = 0; i &lt; accountNumber.length(); i++)
			{</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="F43BDDFF1F11C667ED524A1D125ACA63">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method getSource() in AbstractLesson.java sends unvalidated data to a web browser on line 531, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>lessons/AbstractLesson.java</FilePath>
<LineStart>531</LineStart>
<Snippet>
		Head head = new Head();
		head.addElement(new Title(getSourceFileName()));

		Body body = new Body();</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE" iid="17A6384CEBB51F37B0891662889D965C">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method addDBEntriesToEC() in BackDoors.java sends unvalidated data to a web browser on line 109, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>BackDoors.java</FileName>
<FilePath>lessons/BackDoors.java</FilePath>
<LineStart>109</LineStart>
<Snippet>					tr.addElement(new TD(rs.getString(&quot;userid&quot;)));
					tr.addElement(new TD(rs.getString(&quot;password&quot;)));
					tr.addElement(new TD(rs.getString(&quot;ssn&quot;)));
					tr.addElement(new TD(rs.getString(&quot;salary&quot;)));
					tr.addElement(new TD(rs.getString(&quot;email&quot;)));</Snippet>
                            </Primary>
                            <Source>
<FileName>BackDoors.java</FileName>
<FilePath>lessons/BackDoors.java</FilePath>
<LineStart>180</LineStart>
<Snippet>				}
			}
			ResultSet rs = statement.executeQuery(arrSQL[0]);
			addDBEntriesToEC(ec, rs);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="B304AB3B-61AD-4EBE-B24A-DDDB1F8A9C2F" iid="FDFD7C1F5539D54D337C78FF883CFEFD">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Medium</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method makeRow() in Encoding.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Medium</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>lessons/Encoding.java</FilePath>
<LineStart>609</LineStart>
<Snippet>		TD desc = new TD().addElement(description).setBgColor(&quot;#bbbbbb&quot;);
		TD val1 = new TD()
				.addElement(new Div().addElement(value1).setStyle(&quot;overflow:auto; height:60px; width:100px;&quot;))
				.setBgColor(&quot;#dddddd&quot;);
		TD val2 = new TD()</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="453DDCDCCDEE8B0D5D183D8745A1093D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method output() in Screen.java sends unvalidated data to a web browser on line 227, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Screen.java</FileName>
<FilePath>session/Screen.java</FilePath>
<LineStart>227</LineStart>
<Snippet>		// otherwise we're doing way too much SSL encryption work

		out.print(getContent());

	}</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="95E832576731E4F348EF78AC85A1084A">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createContent() in BlindNumericSqlInjection.java sends unvalidated data to a web browser on line 81, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>BlindNumericSqlInjection.java</FileName>
<FilePath>lessons/BlindNumericSqlInjection.java</FilePath>
<LineStart>81</LineStart>
<Snippet>
	    String accountNumber = s.getParser().getRawParameter(ACCT_NUM, &quot;101&quot;);
	    Input input = new Input(Input.TEXT, ACCT_NUM, accountNumber.toString());
	    ec.addElement(input);
</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE" iid="64452AB3D1FE100D7669FF14C7494626">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method writeTable() in DatabaseUtilities.java sends unvalidated data to a web browser on line 159, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtilities.java</FileName>
<FilePath>session/DatabaseUtilities.java</FilePath>
<LineStart>159</LineStart>
<Snippet>					String str = results.getString(i);
					if (str == null) str = &quot;&quot;;
					row.addElement(new TD(str.replaceAll(&quot; &quot;, &quot;&amp;nbsp;&quot;)));
				}
</Snippet>
                            </Primary>
                            <Source>
<FileName>ProductsAdminScreen.java</FileName>
<FilePath>lessons/admin/ProductsAdminScreen.java</FilePath>
<LineStart>68</LineStart>
<Snippet>			Statement statement = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
																ResultSet.CONCUR_READ_ONLY);
			ResultSet results = statement.executeQuery(QUERY);

			if (results != null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="EA39016909F45F53EEFCE398478A6CEC">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doStage3() in ForgotPassword.java sends unvalidated data to a web browser on line 193, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ForgotPassword.java</FileName>
<FilePath>lessons/ForgotPassword.java</FilePath>
<LineStart>193</LineStart>
<Snippet>
		tr = new TR();
		tr.addElement(new TD().addElement(new StringElement(&quot;Username: &quot; + USERNAME_RESPONSE)));
		t.addElement(tr);
</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE" iid="1B86E38E1323F81979E76E50E0BB4D97">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createSuccessfulLoginContent() in InsecureLogin.java sends unvalidated data to a web browser on line 325, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>InsecureLogin.java</FileName>
<FilePath>lessons/InsecureLogin.java</FilePath>
<LineStart>325</LineStart>
<Snippet>
			tr4.addElement(new TD(&quot;&lt;b&gt;Credit Card Number:&lt;/b&gt;&quot;));
			tr4.addElement(new TD(results.getString(&quot;cc_number&quot;)));

		}</Snippet>
                            </Primary>
                            <Source>
<FileName>InsecureLogin.java</FileName>
<FilePath>lessons/InsecureLogin.java</FilePath>
<LineStart>447</LineStart>
<Snippet>			prepStatement.setString(1, user);

			ResultSet results = prepStatement.executeQuery();

			return results;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE" iid="9AB98DEBEF8B12229B80A2F911B5D8D9">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createSuccessfulLoginContent() in MultiLevelLogin1.java sends unvalidated data to a web browser on line 438, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>MultiLevelLogin1.java</FileName>
<FilePath>lessons/MultiLevelLogin1.java</FilePath>
<LineStart>438</LineStart>
<Snippet>
			tr3.addElement(new TD(&quot;&lt;b&gt;Credit Card Type:&lt;/b&gt;&quot;));
			tr3.addElement(new TD(results.getString(&quot;cc_type&quot;)));

			tr4.addElement(new TD(&quot;&lt;b&gt;Credit Card Number:&lt;/b&gt;&quot;));</Snippet>
                            </Primary>
                            <Source>
<FileName>MultiLevelLogin1.java</FileName>
<FilePath>lessons/MultiLevelLogin1.java</FilePath>
<LineStart>628</LineStart>
<Snippet>			prepStatement.setString(1, user);

			ResultSet results = prepStatement.executeQuery();

			return results;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="AD369356003E8FDF1BE045DC0DBD47C6">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createContent() in HttpBasics.java sends unvalidated data to a web browser on line 68, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>HttpBasics.java</FileName>
<FilePath>lessons/HttpBasics.java</FilePath>
<LineStart>68</LineStart>
<Snippet>			person.reverse();

			Input input = new Input(Input.TEXT, PERSON, person.toString());
			ec.addElement(input);
</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE" iid="18AA416834CBA423C7B6167463098CE0">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method writeTable() in DatabaseUtilities.java sends unvalidated data to a web browser on line 159, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtilities.java</FileName>
<FilePath>session/DatabaseUtilities.java</FilePath>
<LineStart>159</LineStart>
<Snippet>					String str = results.getString(i);
					if (str == null) str = &quot;&quot;;
					row.addElement(new TD(str.replaceAll(&quot; &quot;, &quot;&amp;nbsp;&quot;)));
				}
</Snippet>
                            </Primary>
                            <Source>
<FileName>SqlNumericInjection.java</FileName>
<FilePath>lessons/SqlNumericInjection.java</FilePath>
<LineStart>119</LineStart>
<Snippet>				Statement statement = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
																	ResultSet.CONCUR_READ_ONLY);
				ResultSet results = statement.executeQuery(query);

				if ((results != null) &amp;&amp; (results.first() == true))</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="6999DE3FC99AF2500FE3F95C518BC7D3">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method makeUsername() in BackDoors.java sends unvalidated data to a web browser on line 250, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>BackDoors.java</FileName>
<FilePath>lessons/BackDoors.java</FilePath>
<LineStart>250</LineStart>
<Snippet>
		String formattedInput = &quot;&lt;span class='myClass'&gt;&quot; + userInput + &quot;&lt;/span&gt;&quot;;
		ec.addElement(new Div(SELECT_ST + formattedInput));

		Input b = new Input();</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="BDC530F36AC693299AFA524089900733">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createContent() in ReflectedXSS.java sends unvalidated data to a web browser on line 128, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ReflectedXSS.java</FileName>
<FilePath>lessons/ReflectedXSS.java</FilePath>
<LineStart>128</LineStart>
<Snippet>			tr.addElement(new TD().addElement(&quot;27.99&quot;).setAlign(&quot;right&quot;));
			tr.addElement(new TD().addElement(
												new Input(Input.TEXT, &quot;QTY2&quot;, s.getParser().getStringParameter(&quot;QTY2&quot;,
																												&quot;1&quot;))
														.setSize(6)).setAlign(&quot;right&quot;));</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="1C401E1C095A76D7097B63FE5023C1FB">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method makeMessages() in Screen.java sends unvalidated data to a web browser on line 198, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Screen.java</FileName>
<FilePath>session/Screen.java</FilePath>
<LineStart>198</LineStart>
<Snippet>		String message = s.getMessage();

		f.addElement(message);

		return (f);</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="97BA5F6CFFA7CE2669A297AF767A1380">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method handleRequest() in SilentTransactions.java sends unvalidated data to a web browser on line 89, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SilentTransactions.java</FileName>
<FilePath>lessons/SilentTransactions.java</FilePath>
<LineStart>89</LineStart>
<Snippet>							.append(&quot;Now you can send out a spam email containing this link and whoever clicks on it&lt;br&gt;&quot;);
					result.append(&quot; and happens to be logged in the same time will loose their money !!&quot;);
					out.print(result.toString());
					out.flush();
					out.close();</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="D4705B4C28473A663F05C899F3F913B5">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createGoogleCredentials() in UncheckedEmail.java sends unvalidated data to a web browser on line 323, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>UncheckedEmail.java</FileName>
<FilePath>lessons/UncheckedEmail.java</FilePath>
<LineStart>323</LineStart>
<Snippet>		tr = new TR();
		tr.addElement(new TD().addElement(&quot;GMail password:&quot;));
		input = new Input(Input.PASSWORD, GMAIL_PASS, YOUR_REAL_GMAIL_PASSWORD);
		tr.addElement(new TD().addElement(input));
		t1.addElement(tr);</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="1F2812DFC26323B71B4329E128DA75E4">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method handleRequest() in AbstractLesson.java sends unvalidated data to a web browser on line 771, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>lessons/AbstractLesson.java</FilePath>
<LineStart>771</LineStart>
<Snippet>		Form form = new Form(getFormAction(), Form.POST).setName(&quot;form&quot;).setEncType(&quot;&quot;);

		form.addElement(createContent(s));

		setContent(form);</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE" iid="CE1A52025CA0D8C1F9F134CA386768A0">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method addDBEntriesToEC() in BackDoors.java sends unvalidated data to a web browser on line 102, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>BackDoors.java</FileName>
<FilePath>lessons/BackDoors.java</FilePath>
<LineStart>102</LineStart>
<Snippet>				tr.addElement(new TD(rs.getString(&quot;ssn&quot;)));
				tr.addElement(new TD(rs.getString(&quot;salary&quot;)));
				tr.addElement(new TD(rs.getString(&quot;email&quot;)));
				t.addElement(tr);
				while (rs.next())</Snippet>
                            </Primary>
                            <Source>
<FileName>BackDoors.java</FileName>
<FilePath>lessons/BackDoors.java</FilePath>
<LineStart>180</LineStart>
<Snippet>				}
			}
			ResultSet rs = statement.executeQuery(arrSQL[0]);
			addDBEntriesToEC(ec, rs);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="4A4F65DF904AE654B966418AC074A32D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createStage1Content() in SessionFixation.java sends unvalidated data to a web browser on line 315, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SessionFixation.java</FileName>
<FilePath>lessons/SessionFixation.java</FilePath>
<LineStart>315</LineStart>
<Snippet>		mailContent.addAttribute(&quot;cols&quot;, 67);
		mailContent.addAttribute(&quot;rows&quot;, 8);
		mailContent.addElement(mailText);
		mailContent.setName(MAILCONTENTNAME);
		td7.addElement(mailContent);</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="9964369F7E5F91EF12EC096F6A74CF3D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createGoogleCredentials() in UncheckedEmail.java sends unvalidated data to a web browser on line 323, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>UncheckedEmail.java</FileName>
<FilePath>lessons/UncheckedEmail.java</FilePath>
<LineStart>323</LineStart>
<Snippet>		tr = new TR();
		tr.addElement(new TD().addElement(&quot;GMail password:&quot;));
		input = new Input(Input.PASSWORD, GMAIL_PASS, YOUR_REAL_GMAIL_PASSWORD);
		tr.addElement(new TD().addElement(input));
		t1.addElement(tr);</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="E06F2980868277436B90452B37FA8712">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createQtyTable() in ClientSideValidation.java sends unvalidated data to a web browser on line 307, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ClientSideValidation.java</FileName>
<FilePath>lessons/ClientSideValidation.java</FilePath>
<LineStart>307</LineStart>
<Snippet>
		tr.addElement(new TD().addElement(
											new Input(Input.TEXT, &quot;PRC2&quot;, s.getParser().getStringParameter(&quot;PRC2&quot;,
																											&quot;$27.99&quot;))
													.setSize(10).setReadOnly(true).setStyle(&quot;border:0px;&quot;))</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="E134399AA0F4355F93DF99E36B945F41">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method handleRequest() in XMLInjection.java sends unvalidated data to a web browser on line 123, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>XMLInjection.java</FileName>
<FilePath>lessons/XMLInjection.java</FilePath>
<LineStart>123</LineStart>
<Snippet>		}

		Form form = new Form(getFormAction(), Form.POST).setName(&quot;form&quot;).setEncType(&quot;&quot;);

		form.addElement(createContent(s));</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="9CD0B6907BE7E1D1CC4FE62DEE0AE7FE">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method makeSecondStep() in OffByOne.java sends unvalidated data to a web browser on line 374, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>OffByOne.java</FileName>
<FilePath>lessons/OffByOne.java</FilePath>
<LineStart>374</LineStart>
<Snippet>		// Hidden Form Fields
		param = s.getParser().getStringParameter(LAST_NAME, &quot;&quot;);
		Input input = new Input(Input.HIDDEN, LAST_NAME, param);
		ec.addElement(input);
		ec.addElement(&quot;\r\n&quot;);</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="011CBF50B0452709FF1FE1CC8FA779EA">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createContent() in JavaScriptValidation.java sends unvalidated data to a web browser on line 121, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>JavaScriptValidation.java</FileName>
<FilePath>lessons/JavaScriptValidation.java</FilePath>
<LineStart>121</LineStart>
<Snippet>			TextArea input4 = new TextArea(&quot;field4&quot;, 1, 25).addElement(param4);
			TextArea input5 = new TextArea(&quot;field5&quot;, 1, 25).addElement(param5);
			TextArea input6 = new TextArea(&quot;field6&quot;, 1, 25).addElement(param6);
			TextArea input7 = new TextArea(&quot;field7&quot;, 1, 25).addElement(param7);
</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE" iid="5968037DF9A55AD25E173A81822A3CF7">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method addDBEntriesToEC() in BackDoors.java sends unvalidated data to a web browser on line 98, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>BackDoors.java</FileName>
<FilePath>lessons/BackDoors.java</FilePath>
<LineStart>98</LineStart>
<Snippet>
				tr = new TR();
				tr.addElement(new TD(rs.getString(&quot;userid&quot;)));
				tr.addElement(new TD(rs.getString(&quot;password&quot;)));
				tr.addElement(new TD(rs.getString(&quot;ssn&quot;)));</Snippet>
                            </Primary>
                            <Source>
<FileName>BackDoors.java</FileName>
<FilePath>lessons/BackDoors.java</FilePath>
<LineStart>148</LineStart>
<Snippet>				}

				ResultSet rs = statement.executeQuery(arrSQL[0]);
				addDBEntriesToEC(ec, rs);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="17A3ECFDB690FDBAE6F129AFCB16B3FD">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method handleRequest() in JSONInjection.java sends unvalidated data to a web browser on line 90, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>JSONInjection.java</FileName>
<FilePath>lessons/JSONInjection.java</FilePath>
<LineStart>90</LineStart>
<Snippet>		}

		Form form = new Form(getFormAction(), Form.POST).setName(&quot;form&quot;).setEncType(&quot;&quot;);
		form.setOnSubmit(&quot;return check();&quot;);
</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE" iid="3A8E3BB2450E531B99FA728F81DEA042">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method makeCurrent() in StoredXss.java sends unvalidated data to a web browser on line 230, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>StoredXss.java</FileName>
<FilePath>lessons/StoredXss.java</FilePath>
<LineStart>230</LineStart>
<Snippet>				String messageData = results.getString(MESSAGE_COL);
				TR row2 = new TR(new TD(new B(new StringElement(WebGoatI18N.get(&quot;Message&quot;)+&quot;:&quot;))));
				row2.addElement(new TD(new StringElement(messageData)));
				t.addElement(row2);
</Snippet>
                            </Primary>
                            <Source>
<FileName>StoredXss.java</FileName>
<FilePath>lessons/StoredXss.java</FilePath>
<LineStart>218</LineStart>
<Snippet>			statement.setInt(2, messageNum);
			statement.setString(3, this.getClass().getName());
			ResultSet results = statement.executeQuery();

			if ((results != null) &amp;&amp; results.first())</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE" iid="CE1A52025CA0D8C1F9F134CA386768A1">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method addDBEntriesToEC() in BackDoors.java sends unvalidated data to a web browser on line 111, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>BackDoors.java</FileName>
<FilePath>lessons/BackDoors.java</FilePath>
<LineStart>111</LineStart>
<Snippet>					tr.addElement(new TD(rs.getString(&quot;ssn&quot;)));
					tr.addElement(new TD(rs.getString(&quot;salary&quot;)));
					tr.addElement(new TD(rs.getString(&quot;email&quot;)));
					t.addElement(tr);
				}</Snippet>
                            </Primary>
                            <Source>
<FileName>BackDoors.java</FileName>
<FilePath>lessons/BackDoors.java</FilePath>
<LineStart>180</LineStart>
<Snippet>				}
			}
			ResultSet rs = statement.executeQuery(arrSQL[0]);
			addDBEntriesToEC(ec, rs);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="A412FA53802934245A87A29CDC5FE474">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createTotalTable() in ClientSideValidation.java sends unvalidated data to a web browser on line 228, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ClientSideValidation.java</FileName>
<FilePath>lessons/ClientSideValidation.java</FilePath>
<LineStart>228</LineStart>
<Snippet>		tr = new TR();
		tr.addElement(new TD().addElement(&quot;Enter your credit card number:&quot;));
		tr.addElement(new TD().addElement(new Input(Input.TEXT, &quot;field2&quot;, param2)));
		t.addElement(tr);
		tr = new TR();</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="982D17DF98D091EC594644998DA316D3">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createQtyTable() in ClientSideValidation.java sends unvalidated data to a web browser on line 350, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ClientSideValidation.java</FileName>
<FilePath>lessons/ClientSideValidation.java</FilePath>
<LineStart>350</LineStart>
<Snippet>
		tr.addElement(new TD().addElement(
											new Input(Input.TEXT, &quot;PRC4&quot;, s.getParser().getStringParameter(&quot;PRC4&quot;,
																											&quot;$299.99&quot;))
													.setSize(10).setReadOnly(true).setStyle(&quot;border:0px;&quot;))</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="7412DA01AFB89508C1CD07AC4E818018">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method sendSimulatedMail() in UncheckedEmail.java sends unvalidated data to a web browser on line 195, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>UncheckedEmail.java</FileName>
<FilePath>lessons/UncheckedEmail.java</FilePath>
<LineStart>195</LineStart>
<Snippet>		// Tue, 09 Jan 2002 22:14:02 -0500

		ec.addElement(new Center().addElement(new B().addElement(&quot;You sent the following message to: &quot; + to)));
		ec.addElement(new BR());
		ec.addElement(new StringElement(&quot;&lt;b&gt;Return-Path:&lt;/b&gt; &amp;lt;webgoat@owasp.org&amp;gt;&quot;));</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="DC5D19686F4CCDB7E1F54381EA39DF0F">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method makeThirdStep() in OffByOne.java sends unvalidated data to a web browser on line 461, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>OffByOne.java</FileName>
<FilePath>lessons/OffByOne.java</FilePath>
<LineStart>461</LineStart>
<Snippet>		// Hidden Form Fields
		param1 = s.getParser().getStringParameter(LAST_NAME, &quot;&quot;);
		Input input = new Input(Input.HIDDEN, &quot;a&quot;, param1);
		ec.addElement(input);
		ec.addElement(&quot;\r\n&quot;);</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="AA37D52B3F55F7CDA66CD42ADCEA6755">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method handleRequest() in AbstractLesson.java sends unvalidated data to a web browser on line 769, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>lessons/AbstractLesson.java</FilePath>
<LineStart>769</LineStart>
<Snippet>		// call createContent first so messages will go somewhere

		Form form = new Form(getFormAction(), Form.POST).setName(&quot;form&quot;).setEncType(&quot;&quot;);

		form.addElement(createContent(s));</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE" iid="F20DB3A548FEF6F15ED13F6DBE45B4C7">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createSuccessfulLoginContent() in InsecureLogin.java sends unvalidated data to a web browser on line 319, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>InsecureLogin.java</FileName>
<FilePath>lessons/InsecureLogin.java</FilePath>
<LineStart>319</LineStart>
<Snippet>
			tr2.addElement(new TD(&quot;&lt;b&gt;Lastname:&lt;/b&gt;&quot;));
			tr2.addElement(new TD(results.getString(&quot;last_name&quot;)));

			tr3.addElement(new TD(&quot;&lt;b&gt;Credit Card Type:&lt;/b&gt;&quot;));</Snippet>
                            </Primary>
                            <Source>
<FileName>InsecureLogin.java</FileName>
<FilePath>lessons/InsecureLogin.java</FilePath>
<LineStart>447</LineStart>
<Snippet>			prepStatement.setString(1, user);

			ResultSet results = prepStatement.executeQuery();

			return results;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE" iid="AAD195787C5D344A4277AAD30481ADB9">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method writeTable() in DatabaseUtilities.java sends unvalidated data to a web browser on line 159, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtilities.java</FileName>
<FilePath>session/DatabaseUtilities.java</FilePath>
<LineStart>159</LineStart>
<Snippet>					String str = results.getString(i);
					if (str == null) str = &quot;&quot;;
					row.addElement(new TD(str.replaceAll(&quot; &quot;, &quot;&amp;nbsp;&quot;)));
				}
</Snippet>
                            </Primary>
                            <Source>
<FileName>DOS_Login.java</FileName>
<FilePath>lessons/DOS_Login.java</FilePath>
<LineStart>106</LineStart>
<Snippet>				Statement statement = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
																	ResultSet.CONCUR_READ_ONLY);
				ResultSet results = statement.executeQuery(query);

				if ((results != null) &amp;&amp; (results.first() == true))</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE" iid="3A8E3BB2450E531B99FA728F81DEA041">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method makeCurrent() in StoredXss.java sends unvalidated data to a web browser on line 225, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>StoredXss.java</FileName>
<FilePath>lessons/StoredXss.java</FilePath>
<LineStart>225</LineStart>
<Snippet>				Table t = new Table(0).setCellSpacing(0).setCellPadding(0).setBorder(0);
				TR row1 = new TR(new TD(new B(new StringElement(WebGoatI18N.get(&quot;Title&quot;)+&quot;:&quot;))));
				row1.addElement(new TD(new StringElement(results.getString(TITLE_COL))));
				t.addElement(row1);
</Snippet>
                            </Primary>
                            <Source>
<FileName>StoredXss.java</FileName>
<FilePath>lessons/StoredXss.java</FilePath>
<LineStart>218</LineStart>
<Snippet>			statement.setInt(2, messageNum);
			statement.setString(3, this.getClass().getName());
			ResultSet results = statement.executeQuery();

			if ((results != null) &amp;&amp; results.first())</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="D2DD522D3AF50C9E9E3538CC9DFAF81D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createAskForTanContent() in MultiLevelLogin2.java sends unvalidated data to a web browser on line 381, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>MultiLevelLogin2.java</FileName>
<FilePath>lessons/MultiLevelLogin2.java</FilePath>
<LineStart>381</LineStart>
<Snippet>		table.addElement(tr2);

		ec.addElement(new Input(Input.HIDDEN, HIDDEN_USER, user));
		loginDiv.addElement(table);
		ec.addElement(loginDiv);</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="580A009822B187DCAF2F74782AD9FCA7">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createSuccessfulLoginContent() in MultiLevelLogin1.java sends unvalidated data to a web browser on line 427, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>MultiLevelLogin1.java</FileName>
<FilePath>lessons/MultiLevelLogin1.java</FilePath>
<LineStart>427</LineStart>
<Snippet>		TR tr4 = new TR();
		tr1.addElement(new TD(&quot;&lt;b&gt;Firstname:&lt;/b&gt;&quot;));
		tr1.addElement(new TD(getLoggedInUser(s)));

		try</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="7E149174E38826816773EA17CEB19C98">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createGoogleCredentials() in UncheckedEmail.java sends unvalidated data to a web browser on line 318, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>UncheckedEmail.java</FileName>
<FilePath>lessons/UncheckedEmail.java</FilePath>
<LineStart>318</LineStart>
<Snippet>		tr = new TR();
		tr.addElement(new TD().addElement(&quot;GMail login id:&quot;));
		Input input = new Input(Input.TEXT, GMAIL_ID, YOUR_REAL_GMAIL_ID);
		tr.addElement(new TD().addElement(input));
		t1.addElement(tr);</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="5DAA8BA05005AB2C4C67C2816EEE1BA2">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method output() in Screen.java sends unvalidated data to a web browser on line 227, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Screen.java</FileName>
<FilePath>session/Screen.java</FilePath>
<LineStart>227</LineStart>
<Snippet>		// otherwise we're doing way too much SSL encryption work

		out.print(getContent());

	}</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE" iid="7D40BDD6798B8A0F851BA8413CECF8F5">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createSuccessfulLoginContent() in SessionFixation.java sends unvalidated data to a web browser on line 578, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SessionFixation.java</FileName>
<FilePath>lessons/SessionFixation.java</FilePath>
<LineStart>578</LineStart>
<Snippet>
			tr2.addElement(new TD(&quot;&lt;b&gt;Lastname:&lt;/b&gt;&quot;));
			tr2.addElement(new TD(results.getString(&quot;last_name&quot;)));

			tr3.addElement(new TD(&quot;&lt;b&gt;Credit Card Type:&lt;/b&gt;&quot;));</Snippet>
                            </Primary>
                            <Source>
<FileName>SessionFixation.java</FileName>
<FilePath>lessons/SessionFixation.java</FilePath>
<LineStart>641</LineStart>
<Snippet>			prepStatement.setString(1, user);

			ResultSet results = prepStatement.executeQuery();

			return results;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="0F020CBF6A9EDA7B50746458578B9E2D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createPurchaseContent() in ConcurrencyCart.java sends unvalidated data to a web browser on line 276, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ConcurrencyCart.java</FileName>
<FilePath>lessons/ConcurrencyCart.java</FilePath>
<LineStart>276</LineStart>
<Snippet>			tr = new TR();
			tr.addElement(new TD().addElement(&quot;Enter your three digit access code:&quot;));
			tr.addElement(new TD().addElement(new Input(Input.TEXT, &quot;PAC&quot;, param1)).setAlign(&quot;right&quot;));
			table.addElement(tr);
</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE" iid="5BF68E39C4826FE152F6D45484F7B1AE">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method makeLink() in ECSFactory.java sends unvalidated data to a web browser on line 316, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ECSFactory.java</FileName>
<FilePath>session/ECSFactory.java</FilePath>
<LineStart>316</LineStart>
<Snippet>		A a = new A(href);

		a.addElement(new U().addElement(text));

		a.addAttribute(&quot;style&quot;, &quot;cursor:hand&quot;);</Snippet>
                            </Primary>
                            <Source>
<FileName>StoredXss.java</FileName>
<FilePath>lessons/StoredXss.java</FilePath>
<LineStart>332</LineStart>
<Snippet>			statement.setString(1, getNameroot(s.getUserName()) + &quot;%&quot;);
			statement.setString(2, getClass().getName());
			ResultSet results = statement.executeQuery();

			if ((results != null) &amp;&amp; (results.first() == true))</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="27054C1C60FF93F008A72761A672E678">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createContent() in ReflectedXSS.java sends unvalidated data to a web browser on line 140, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ReflectedXSS.java</FileName>
<FilePath>lessons/ReflectedXSS.java</FilePath>
<LineStart>140</LineStart>
<Snippet>			tr.addElement(new TD().addElement(&quot;1599.99&quot;).setAlign(&quot;right&quot;));
			tr.addElement(new TD().addElement(
												new Input(Input.TEXT, &quot;QTY3&quot;, s.getParser().getStringParameter(&quot;QTY3&quot;,
																												&quot;1&quot;))
														.setSize(6)).setAlign(&quot;right&quot;));</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="855A95B78EDD43416CCC1AE36767637D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method makeUser() in ReportCardScreen.java sends unvalidated data to a web browser on line 274, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ReportCardScreen.java</FileName>
<FilePath>lessons/admin/ReportCardScreen.java</FilePath>
<LineStart>274</LineStart>
<Snippet>		// &quot; [Normal User - Hacked Admin Access]&quot; : &quot; [Normal User]&quot;;
		String type = &quot;&quot;;
		h2.addElement(new StringElement(&quot;Results for: &quot; + user + type));
		return h2;
	}</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="7301D589B66FA41DBA27DB202B5E3D64">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createContent() in TraceXSS.java sends unvalidated data to a web browser on line 113, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>TraceXSS.java</FileName>
<FilePath>lessons/TraceXSS.java</FilePath>
<LineStart>113</LineStart>
<Snippet>			tr.addElement(new TD().addElement(&quot;69.99&quot;).setAlign(&quot;right&quot;));
			tr.addElement(new TD().addElement(
												new Input(Input.TEXT, &quot;QTY1&quot;, s.getParser().getStringParameter(&quot;QTY1&quot;,
																												&quot;1&quot;)))
					.setAlign(&quot;right&quot;));</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE" iid="A6812F7C6FC5DE38A4539262BA6AA1A6">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method makeStationList() in SqlNumericInjection.java sends unvalidated data to a web browser on line 235, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SqlNumericInjection.java</FileName>
<FilePath>lessons/SqlNumericInjection.java</FilePath>
<LineStart>235</LineStart>
<Snippet>		{
			String key = (String) it.next();
			select.addElement(new Option(key).addElement((String) stations.get(key)));
		}
		ec.addElement(select);</Snippet>
                            </Primary>
                            <Source>
<FileName>SqlNumericInjection.java</FileName>
<FilePath>lessons/SqlNumericInjection.java</FilePath>
<LineStart>263</LineStart>
<Snippet>			Statement statement = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
																ResultSet.CONCUR_READ_ONLY);
			ResultSet results = statement.executeQuery(query);

			if ((results != null) &amp;&amp; (results.first() == true))</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="DA6374D12FE5BE5AC8EDFDDB6958C420">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createQtyTable() in ClientSideValidation.java sends unvalidated data to a web browser on line 283, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ClientSideValidation.java</FileName>
<FilePath>lessons/ClientSideValidation.java</FilePath>
<LineStart>283</LineStart>
<Snippet>
		tr.addElement(new TD().addElement(
											new Input(Input.TEXT, &quot;PRC1&quot;, s.getParser().getStringParameter(&quot;PRC1&quot;,
																											&quot;$69.99&quot;))
													.setSize(10).setReadOnly(true).setStyle(&quot;border:0px;&quot;))</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE" iid="8CC9571120C893BF238665ACA99E9F41">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createContent() in WSDLScanning.java sends unvalidated data to a web browser on line 217, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>WSDLScanning.java</FileName>
<FilePath>lessons/WSDLScanning.java</FilePath>
<LineStart>217</LineStart>
<Snippet>			{
				header.addElement(new TD().addElement(fields[i]));
				results.addElement(new TD().addElement((String) accessWGService(s, &quot;WSDLScanning&quot;, port, fields[i],
																				&quot;acct_num&quot;, new Integer(id))));
			}</Snippet>
                            </Primary>
                            <Source>
<FileName>WSDLScanning.java</FileName>
<FilePath>lessons/WSDLScanning.java</FilePath>
<LineStart>154</LineStart>
<Snippet>			call.setPassword(&quot;guest&quot;);
			call.setTargetEndpointAddress(&quot;http://localhost:&quot; + port + &quot;/&quot; + s.getRequest().getContextPath() + &quot;/services/&quot; + serv);
			Object result = call.invoke(new Object[] { parameterValue });
			return result;
		} catch (RemoteException e)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE" iid="F9DB71C9BFE00BBC5D5DE7BE1FC3AC60">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createSuccessfulLoginContent() in SessionFixation.java sends unvalidated data to a web browser on line 581, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SessionFixation.java</FileName>
<FilePath>lessons/SessionFixation.java</FilePath>
<LineStart>581</LineStart>
<Snippet>
			tr3.addElement(new TD(&quot;&lt;b&gt;Credit Card Type:&lt;/b&gt;&quot;));
			tr3.addElement(new TD(results.getString(&quot;cc_type&quot;)));

			tr4.addElement(new TD(&quot;&lt;b&gt;Credit Card Number:&lt;/b&gt;&quot;));</Snippet>
                            </Primary>
                            <Source>
<FileName>SessionFixation.java</FileName>
<FilePath>lessons/SessionFixation.java</FilePath>
<LineStart>641</LineStart>
<Snippet>			prepStatement.setString(1, user);

			ResultSet results = prepStatement.executeQuery();

			return results;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="FC1C493291DD08D8177F54E0138154AC">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method writeSource() in LessonSource.java sends unvalidated data to a web browser on line 203, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>LessonSource.java</FileName>
<FilePath>LessonSource.java</FilePath>
<LineStart>203</LineStart>
<Snippet>		}

		out.print(s);
		out.close();
	}</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE" iid="EFF24E1CFE027369F4D59614E6D2BCC0">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method writeTable() in DatabaseUtilities.java sends unvalidated data to a web browser on line 159, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtilities.java</FileName>
<FilePath>session/DatabaseUtilities.java</FilePath>
<LineStart>159</LineStart>
<Snippet>					String str = results.getString(i);
					if (str == null) str = &quot;&quot;;
					row.addElement(new TD(str.replaceAll(&quot; &quot;, &quot;&amp;nbsp;&quot;)));
				}
</Snippet>
                            </Primary>
                            <Source>
<FileName>WsSqlInjection.java</FileName>
<FilePath>lessons/WsSqlInjection.java</FilePath>
<LineStart>233</LineStart>
<Snippet>				Statement statement = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
																	ResultSet.CONCUR_READ_ONLY);
				ResultSet results = statement.executeQuery(query);
				return results;
			} catch (SQLException sqle)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE" iid="2CE9F0120ACBD32E2E063F10D5012478">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method addDBEntriesToEC() in BackDoors.java sends unvalidated data to a web browser on line 108, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>BackDoors.java</FileName>
<FilePath>lessons/BackDoors.java</FilePath>
<LineStart>108</LineStart>
<Snippet>					tr = new TR();
					tr.addElement(new TD(rs.getString(&quot;userid&quot;)));
					tr.addElement(new TD(rs.getString(&quot;password&quot;)));
					tr.addElement(new TD(rs.getString(&quot;ssn&quot;)));
					tr.addElement(new TD(rs.getString(&quot;salary&quot;)));</Snippet>
                            </Primary>
                            <Source>
<FileName>BackDoors.java</FileName>
<FilePath>lessons/BackDoors.java</FilePath>
<LineStart>148</LineStart>
<Snippet>				}

				ResultSet rs = statement.executeQuery(arrSQL[0]);
				addDBEntriesToEC(ec, rs);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="33ADB22325F193F677D42E030B2918D4">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createContent() in Encoding.java sends unvalidated data to a web browser on line 203, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>lessons/Encoding.java</FilePath>
<LineStart>203</LineStart>
<Snippet>			tr.addElement(new TD(&quot;Enter a password (optional): &quot;));

			Input key = new Input(Input.TEXT, KEY, userKey);

			tr.addElement(new TD().addElement(key));</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="DD7F566079E21AD4CD51627746A0C5DD">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method handleRequest() in AbstractLesson.java sends unvalidated data to a web browser on line 769, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>lessons/AbstractLesson.java</FilePath>
<LineStart>769</LineStart>
<Snippet>		// call createContent first so messages will go somewhere

		Form form = new Form(getFormAction(), Form.POST).setName(&quot;form&quot;).setEncType(&quot;&quot;);

		form.addElement(createContent(s));</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE" iid="DCCF5D34D3571B544D9FFD28A860A085">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method writeTable() in DatabaseUtilities.java sends unvalidated data to a web browser on line 159, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtilities.java</FileName>
<FilePath>session/DatabaseUtilities.java</FilePath>
<LineStart>159</LineStart>
<Snippet>					String str = results.getString(i);
					if (str == null) str = &quot;&quot;;
					row.addElement(new TD(str.replaceAll(&quot; &quot;, &quot;&amp;nbsp;&quot;)));
				}
</Snippet>
                            </Primary>
                            <Source>
<FileName>SqlStringInjection.java</FileName>
<FilePath>lessons/SqlStringInjection.java</FilePath>
<LineStart>101</LineStart>
<Snippet>				Statement statement = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
																	ResultSet.CONCUR_READ_ONLY);
				ResultSet results = statement.executeQuery(query);

				if ((results != null) &amp;&amp; (results.first() == true))</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="44FDD9D3ECD8BB124A2D2AE3DB505BFB">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createContent() in TraceXSS.java sends unvalidated data to a web browser on line 125, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>TraceXSS.java</FileName>
<FilePath>lessons/TraceXSS.java</FilePath>
<LineStart>125</LineStart>
<Snippet>			tr.addElement(new TD().addElement(&quot;27.99&quot;).setAlign(&quot;right&quot;));
			tr.addElement(new TD().addElement(
												new Input(Input.TEXT, &quot;QTY2&quot;, s.getParser().getStringParameter(&quot;QTY2&quot;,
																												&quot;1&quot;)))
					.setAlign(&quot;right&quot;));</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="D5C3ED4CE0DAF762A1F6D507F0B2914F">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doStage1() in BasicAuthentication.java sends unvalidated data to a web browser on line 127, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>BasicAuthentication.java</FileName>
<FilePath>lessons/BasicAuthentication.java</FilePath>
<LineStart>127</LineStart>
<Snippet>			row2.addElement(new TD(new StringElement(WebGoatI18N.get(&quot;BasicAuthenticationWhatIsDecodedValueOfHeader&quot;))));

			row1.addElement(new TD(new Input(Input.TEXT, HEADER_NAME, headerName.toString())));
			row2.addElement(new TD(new Input(Input.TEXT, HEADER_VALUE, headerValue.toString())));
</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="1CF3CFB41C4C76FAC598353E2F971803">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method handleRequest() in JSONInjection.java sends unvalidated data to a web browser on line 90, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>JSONInjection.java</FileName>
<FilePath>lessons/JSONInjection.java</FilePath>
<LineStart>90</LineStart>
<Snippet>		}

		Form form = new Form(getFormAction(), Form.POST).setName(&quot;form&quot;).setEncType(&quot;&quot;);
		form.setOnSubmit(&quot;return check();&quot;);
</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE" iid="5720B5D12AA4B8D33A9408CC67C190C3">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createContent() in MaliciousFileExecution.java sends unvalidated data to a web browser on line 160, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>MaliciousFileExecution.java</FileName>
<FilePath>lessons/MaliciousFileExecution.java</FilePath>
<LineStart>160</LineStart>
<Snippet>			String image_url = image_results.getString(1);
	    	
	    	ec.addElement(new IMG(image_url).setBorder(0).setHspace(0).setVspace(0));
	    	
	    	System.out.println(&quot;Found image named: &quot; + image_url);</Snippet>
                            </Primary>
                            <Source>
<FileName>MaliciousFileExecution.java</FileName>
<FilePath>lessons/MaliciousFileExecution.java</FilePath>
<LineStart>150</LineStart>
<Snippet>	    Statement image_statement = connection.createStatement(
				ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
		ResultSet image_results = image_statement.executeQuery(image_query);
		
		if(image_results.next() == false) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="6592244DAD921F6CA8C03A934997B34D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createQtyTable() in ClientSideValidation.java sends unvalidated data to a web browser on line 319, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ClientSideValidation.java</FileName>
<FilePath>lessons/ClientSideValidation.java</FilePath>
<LineStart>319</LineStart>
<Snippet>
		tr.addElement(new TD().addElement(
											new Input(Input.TEXT, &quot;TOT2&quot;, s.getParser().getStringParameter(&quot;TOT2&quot;,
																											&quot;$0.00&quot;))
													.setSize(10).setReadOnly(true).setStyle(&quot;border:0px;&quot;))</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="66F76D6EE0A0E7768934D3B152C1F631">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method handleRequest() in SessionFixation.java sends unvalidated data to a web browser on line 778, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SessionFixation.java</FileName>
<FilePath>lessons/SessionFixation.java</FilePath>
<LineStart>778</LineStart>
<Snippet>		Form form = new Form();
		form.addElement(createContent(s));
		form.setAction(getFormAction());
		form.setMethod(Form.POST);
		form.setName(&quot;form&quot;);</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE" iid="5760CE0BBDA499AE0AE1D860ACBAC890">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method addDBEntriesToEC() in BackDoors.java sends unvalidated data to a web browser on line 111, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>BackDoors.java</FileName>
<FilePath>lessons/BackDoors.java</FilePath>
<LineStart>111</LineStart>
<Snippet>					tr.addElement(new TD(rs.getString(&quot;ssn&quot;)));
					tr.addElement(new TD(rs.getString(&quot;salary&quot;)));
					tr.addElement(new TD(rs.getString(&quot;email&quot;)));
					t.addElement(tr);
				}</Snippet>
                            </Primary>
                            <Source>
<FileName>BackDoors.java</FileName>
<FilePath>lessons/BackDoors.java</FilePath>
<LineStart>148</LineStart>
<Snippet>				}

				ResultSet rs = statement.executeQuery(arrSQL[0]);
				addDBEntriesToEC(ec, rs);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE" iid="87D42760F1C01E1D7DBB51E0DFCE8BB7">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createSuccessfulLoginContent() in MultiLevelLogin2.java sends unvalidated data to a web browser on line 432, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>MultiLevelLogin2.java</FileName>
<FilePath>lessons/MultiLevelLogin2.java</FilePath>
<LineStart>432</LineStart>
<Snippet>
				tr2.addElement(new TD(&quot;&lt;b&gt;Lastname:&lt;/b&gt;&quot;));
				tr2.addElement(new TD(results.getString(&quot;last_name&quot;)));

				tr3.addElement(new TD(&quot;&lt;b&gt;Credit Card Type:&lt;/b&gt;&quot;));</Snippet>
                            </Primary>
                            <Source>
<FileName>MultiLevelLogin2.java</FileName>
<FilePath>lessons/MultiLevelLogin2.java</FilePath>
<LineStart>539</LineStart>
<Snippet>			prepStatement.setString(1, user);

			ResultSet results = prepStatement.executeQuery();

			return results;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="0E0CE8A9C2B1F827612536E92E906C5D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createContent() in ReflectedXSS.java sends unvalidated data to a web browser on line 153, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ReflectedXSS.java</FileName>
<FilePath>lessons/ReflectedXSS.java</FilePath>
<LineStart>153</LineStart>
<Snippet>
			tr.addElement(new TD().addElement(
												new Input(Input.TEXT, &quot;QTY4&quot;, s.getParser().getStringParameter(&quot;QTY4&quot;,
																												&quot;1&quot;))
														.setSize(6)).setAlign(&quot;right&quot;));</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="4C806713BCB15430BD4C3D13C35B9884">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createQtyTable() in ClientSideValidation.java sends unvalidated data to a web browser on line 333, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ClientSideValidation.java</FileName>
<FilePath>lessons/ClientSideValidation.java</FilePath>
<LineStart>333</LineStart>
<Snippet>									.setSize(10).setReadOnly(true).setStyle(&quot;border:0px;&quot;)).setAlign(&quot;right&quot;));

		input = new Input(Input.TEXT, &quot;QTY3&quot;, s.getParser().getStringParameter(&quot;QTY3&quot;, &quot;0&quot;));

		input.setOnKeyUp(&quot;updateTotals();&quot;);</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="1445610B4C8E07515BF148920ACE87BF">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method makeRow() in Encoding.java sends unvalidated data to a web browser on line 609, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>lessons/Encoding.java</FilePath>
<LineStart>609</LineStart>
<Snippet>		TD desc = new TD().addElement(description).setBgColor(&quot;#bbbbbb&quot;);
		TD val1 = new TD()
				.addElement(new Div().addElement(value1).setStyle(&quot;overflow:auto; height:60px; width:100px;&quot;))
				.setBgColor(&quot;#dddddd&quot;);
		TD val2 = new TD()</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="159E73006D0C73D9F0C1DA7C6294FA16">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method makeThirdStep() in OffByOne.java sends unvalidated data to a web browser on line 471, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>OffByOne.java</FileName>
<FilePath>lessons/OffByOne.java</FilePath>
<LineStart>471</LineStart>
<Snippet>
		param3 = s.getParser().getStringParameter(ROOM_NUMBER, &quot;&quot;);
		input = new Input(Input.HIDDEN, &quot;c&quot;, param3);
		ec.addElement(input);
		ec.addElement(&quot;\r\n&quot;);</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="D11E0B87142124CC48C8951B4F5780E3">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method makeFirstStep() in OffByOne.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>OffByOne.java</FileName>
<FilePath>lessons/OffByOne.java</FilePath>
<LineStart>261</LineStart>
<Snippet>			param = &quot;&quot;;
		}
		input = new Input(Input.TEXT, LAST_NAME, param);

		tr = new TR();</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="F4234FFE417E22CE535656E88D5CCA53">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createContent() in TraceXSS.java sends unvalidated data to a web browser on line 180, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>TraceXSS.java</FileName>
<FilePath>lessons/TraceXSS.java</FilePath>
<LineStart>180</LineStart>
<Snippet>			tr = new TR();
			tr.addElement(new TD().addElement(&quot;Enter your credit card number:&quot;));
			tr.addElement(new TD().addElement(new Input(Input.TEXT, &quot;field2&quot;, param2)));
			t.addElement(tr);
			tr = new TR();</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE" iid="AAFC1F7059CAAA46A9CD6BDBA80E9307">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method makeCurrent() in CSRF.java sends unvalidated data to a web browser on line 297, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>CSRF.java</FileName>
<FilePath>lessons/CSRF.java</FilePath>
<LineStart>297</LineStart>
<Snippet>				Table t = new Table(0).setCellSpacing(0).setCellPadding(0).setBorder(0);
				TR row1 = new TR(new TD(new B(new StringElement(&quot;Title:&quot;))));
				row1.addElement(new TD(new StringElement(results.getString(TITLE_COL))));
				t.addElement(row1);
</Snippet>
                            </Primary>
                            <Source>
<FileName>CSRF.java</FileName>
<FilePath>lessons/CSRF.java</FilePath>
<LineStart>290</LineStart>
<Snippet>			statement.setInt(2, messageNum);
			statement.setString(3, this.getClass().getName());
			ResultSet results = statement.executeQuery();

			if ((results != null) &amp;&amp; results.first())</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE" iid="4166C32D162CB62311332F55C4AD1A03">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method writeTable() in DatabaseUtilities.java sends unvalidated data to a web browser on line 159, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtilities.java</FileName>
<FilePath>session/DatabaseUtilities.java</FilePath>
<LineStart>159</LineStart>
<Snippet>					String str = results.getString(i);
					if (str == null) str = &quot;&quot;;
					row.addElement(new TD(str.replaceAll(&quot; &quot;, &quot;&amp;nbsp;&quot;)));
				}
</Snippet>
                            </Primary>
                            <Source>
<FileName>ViewDatabase.java</FileName>
<FilePath>lessons/admin/ViewDatabase.java</FilePath>
<LineStart>82</LineStart>
<Snippet>				Statement statement = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
																	ResultSet.CONCUR_READ_ONLY);
				ResultSet results = statement.executeQuery(sqlStatement.toString());

				if ((results != null) &amp;&amp; (results.first() == true))</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="C4A6414001E3775D4C6165848BE06106">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doStage2() in Challenge2Screen.java sends unvalidated data to a web browser on line 252, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Challenge2Screen.java</FileName>
<FilePath>lessons/Challenge2Screen.java</FilePath>
<LineStart>252</LineStart>
<Snippet>
			ec.addElement(new BR());
			Input input = new Input(Input.HIDDEN, USER, user);
			ec.addElement(input);
</Snippet>
                            </Primary>
                            <Source>
<FileName>Challenge2Screen.java</FileName>
<FilePath>lessons/Challenge2Screen.java</FilePath>
<LineStart>793</LineStart>
<Snippet>	protected String getCookie(WebSession s)
	{
		Cookie[] cookies = s.getRequest().getCookies();

		for (int i = 0; i &lt; cookies.length; i++)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE" iid="BFC40FBA3F9B73C3A8654B3F76C62244">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method makeCurrent() in CSRF.java sends unvalidated data to a web browser on line 294, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>CSRF.java</FileName>
<FilePath>lessons/CSRF.java</FilePath>
<LineStart>294</LineStart>
<Snippet>			if ((results != null) &amp;&amp; results.first())
			{
				ec.addElement(new H1(&quot;Message Contents For: &quot; + results.getString(TITLE_COL)));
				Table t = new Table(0).setCellSpacing(0).setCellPadding(0).setBorder(0);
				TR row1 = new TR(new TD(new B(new StringElement(&quot;Title:&quot;))));</Snippet>
                            </Primary>
                            <Source>
<FileName>CSRF.java</FileName>
<FilePath>lessons/CSRF.java</FilePath>
<LineStart>290</LineStart>
<Snippet>			statement.setInt(2, messageNum);
			statement.setString(3, this.getClass().getName());
			ResultSet results = statement.executeQuery();

			if ((results != null) &amp;&amp; results.first())</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="6D839FD4FF3C7C9D318E33593549D73A">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createContent() in TraceXSS.java sends unvalidated data to a web browser on line 150, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>TraceXSS.java</FileName>
<FilePath>lessons/TraceXSS.java</FilePath>
<LineStart>150</LineStart>
<Snippet>
			tr.addElement(new TD().addElement(
												new Input(Input.TEXT, &quot;QTY4&quot;, s.getParser().getStringParameter(&quot;QTY4&quot;,
																												&quot;1&quot;)))
					.setAlign(&quot;right&quot;));</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE" iid="A54733BCD450024923CCBA2A47C11169">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createSuccessfulLoginContent() in MultiLevelLogin2.java sends unvalidated data to a web browser on line 438, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>MultiLevelLogin2.java</FileName>
<FilePath>lessons/MultiLevelLogin2.java</FilePath>
<LineStart>438</LineStart>
<Snippet>
				tr4.addElement(new TD(&quot;&lt;b&gt;Credit Card Number:&lt;/b&gt;&quot;));
				tr4.addElement(new TD(results.getString(&quot;cc_number&quot;)));

				if (!user.equals(getLoggedInUser(s)))</Snippet>
                            </Primary>
                            <Source>
<FileName>MultiLevelLogin2.java</FileName>
<FilePath>lessons/MultiLevelLogin2.java</FilePath>
<LineStart>539</LineStart>
<Snippet>			prepStatement.setString(1, user);

			ResultSet results = prepStatement.executeQuery();

			return results;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE" iid="AAFC1F7059CAAA46A9CD6BDBA80E9308">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method makeCurrent() in CSRF.java sends unvalidated data to a web browser on line 302, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>CSRF.java</FileName>
<FilePath>lessons/CSRF.java</FilePath>
<LineStart>302</LineStart>
<Snippet>				String messageData = results.getString(MESSAGE_COL);
				TR row2 = new TR(new TD(new B(new StringElement(&quot;Message:&quot;))));
				row2.addElement(new TD(new StringElement(messageData)));
				t.addElement(row2);
</Snippet>
                            </Primary>
                            <Source>
<FileName>CSRF.java</FileName>
<FilePath>lessons/CSRF.java</FilePath>
<LineStart>290</LineStart>
<Snippet>			statement.setInt(2, messageNum);
			statement.setString(3, this.getClass().getName());
			ResultSet results = statement.executeQuery();

			if ((results != null) &amp;&amp; results.first())</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="E4C288AABC832D50D5EAD02C06A5B684">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createContent() in TraceXSS.java sends unvalidated data to a web browser on line 137, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>TraceXSS.java</FileName>
<FilePath>lessons/TraceXSS.java</FilePath>
<LineStart>137</LineStart>
<Snippet>			tr.addElement(new TD().addElement(&quot;1599.99&quot;).setAlign(&quot;right&quot;));
			tr.addElement(new TD().addElement(
												new Input(Input.TEXT, &quot;QTY3&quot;, s.getParser().getStringParameter(&quot;QTY3&quot;,
																												&quot;1&quot;)))
					.setAlign(&quot;right&quot;));</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE" iid="E26AFB401AC951CC2B910CB327139FF5">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method writeTable() in DatabaseUtilities.java sends unvalidated data to a web browser on line 159, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtilities.java</FileName>
<FilePath>session/DatabaseUtilities.java</FilePath>
<LineStart>159</LineStart>
<Snippet>					String str = results.getString(i);
					if (str == null) str = &quot;&quot;;
					row.addElement(new TD(str.replaceAll(&quot; &quot;, &quot;&amp;nbsp;&quot;)));
				}
</Snippet>
                            </Primary>
                            <Source>
<FileName>SqlStringInjection.java</FileName>
<FilePath>lessons/SqlStringInjection.java</FilePath>
<LineStart>167</LineStart>
<Snippet>																			ResultSet.CONCUR_READ_ONLY);
				statement.setString(1, accountName);
				ResultSet results = statement.executeQuery();

				if ((results != null) &amp;&amp; (results.first() == true))</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="EF7FC07411D3272ECAB35DB08A8BA691">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createContent() in DangerousEval.java sends unvalidated data to a web browser on line 119, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DangerousEval.java</FileName>
<FilePath>lessons/DangerousEval.java</FilePath>
<LineStart>119</LineStart>
<Snippet>			tr.addElement(new TD().addElement(&quot;Dynex - Traditional Notebook Case&quot;));
			tr.addElement(new TD().addElement(&quot;27.99&quot;).setAlign(&quot;right&quot;));
		    tr.addElement(new TD().addElement(new Input(Input.TEXT, &quot;QTY2&quot;, s.getParser().getStringParameter(&quot;QTY2&quot;, &quot;1&quot;))).setAlign(&quot;right&quot;));
			quantity = s.getParser().getFloatParameter(&quot;QTY2&quot;, 0.0f);
			total = quantity * 27.99f;</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE" iid="1011C75C32070E1D1E97F92B2D0EF68C">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createSuccessfulLoginContent() in MultiLevelLogin1.java sends unvalidated data to a web browser on line 435, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>MultiLevelLogin1.java</FileName>
<FilePath>lessons/MultiLevelLogin1.java</FilePath>
<LineStart>435</LineStart>
<Snippet>
			tr2.addElement(new TD(&quot;&lt;b&gt;Lastname:&lt;/b&gt;&quot;));
			tr2.addElement(new TD(results.getString(&quot;last_name&quot;)));

			tr3.addElement(new TD(&quot;&lt;b&gt;Credit Card Type:&lt;/b&gt;&quot;));</Snippet>
                            </Primary>
                            <Source>
<FileName>MultiLevelLogin1.java</FileName>
<FilePath>lessons/MultiLevelLogin1.java</FilePath>
<LineStart>628</LineStart>
<Snippet>			prepStatement.setString(1, user);

			ResultSet results = prepStatement.executeQuery();

			return results;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="E70051E0F59E3D49770C9AA3C7ECF6E3">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method makeFirstStep() in OffByOne.java sends unvalidated data to a web browser on line 240, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>OffByOne.java</FileName>
<FilePath>lessons/OffByOne.java</FilePath>
<LineStart>240</LineStart>
<Snippet>			param = &quot;&quot;;
		}
		Input input = new Input(Input.TEXT, FIRST_NAME, param);

		TR tr = new TR();</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="E7650F080FCA7F6E00F264D3F365723C">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createContent() in JavaScriptValidation.java sends unvalidated data to a web browser on line 118, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>JavaScriptValidation.java</FileName>
<FilePath>lessons/JavaScriptValidation.java</FilePath>
<LineStart>118</LineStart>
<Snippet>			TextArea input1 = new TextArea(&quot;field1&quot;, 1, 25).addElement(param1);
			TextArea input2 = new TextArea(&quot;field2&quot;, 1, 25).addElement(param2);
			TextArea input3 = new TextArea(&quot;field3&quot;, 1, 25).addElement(param3);
			TextArea input4 = new TextArea(&quot;field4&quot;, 1, 25).addElement(param4);
			TextArea input5 = new TextArea(&quot;field5&quot;, 1, 25).addElement(param5);</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE" iid="F01C955DBE79A3E10D059F2A78534229">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method makeCurrent() in StoredXss.java sends unvalidated data to a web browser on line 222, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>StoredXss.java</FileName>
<FilePath>lessons/StoredXss.java</FilePath>
<LineStart>222</LineStart>
<Snippet>			if ((results != null) &amp;&amp; results.first())
			{
				ec.addElement(new H1(WebGoatI18N.get(&quot;MessageContentsFor&quot;)+&quot;: &quot; + results.getString(TITLE_COL)));
				Table t = new Table(0).setCellSpacing(0).setCellPadding(0).setBorder(0);
				TR row1 = new TR(new TD(new B(new StringElement(WebGoatI18N.get(&quot;Title&quot;)+&quot;:&quot;))));</Snippet>
                            </Primary>
                            <Source>
<FileName>StoredXss.java</FileName>
<FilePath>lessons/StoredXss.java</FilePath>
<LineStart>218</LineStart>
<Snippet>			statement.setInt(2, messageNum);
			statement.setString(3, this.getClass().getName());
			ResultSet results = statement.executeQuery();

			if ((results != null) &amp;&amp; results.first())</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE" iid="3A8E3BB2450E531B99FA728F81DEA043">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method makeCurrent() in StoredXss.java sends unvalidated data to a web browser on line 240, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>StoredXss.java</FileName>
<FilePath>lessons/StoredXss.java</FilePath>
<LineStart>240</LineStart>
<Snippet>
				TR row3 = new TR(new TD(new StringElement(WebGoatI18N.get(&quot;PostedBy&quot;)+&quot;:&quot;)));
				row3.addElement(new TD(new StringElement(results.getString(USER_COL))));
				t.addElement(row3);
</Snippet>
                            </Primary>
                            <Source>
<FileName>StoredXss.java</FileName>
<FilePath>lessons/StoredXss.java</FilePath>
<LineStart>218</LineStart>
<Snippet>			statement.setInt(2, messageNum);
			statement.setString(3, this.getClass().getName());
			ResultSet results = statement.executeQuery();

			if ((results != null) &amp;&amp; results.first())</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE" iid="77B707978C8738EBBC540C01EA90E82B">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method writeTable() in DatabaseUtilities.java sends unvalidated data to a web browser on line 159, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtilities.java</FileName>
<FilePath>session/DatabaseUtilities.java</FilePath>
<LineStart>159</LineStart>
<Snippet>					String str = results.getString(i);
					if (str == null) str = &quot;&quot;;
					row.addElement(new TD(str.replaceAll(&quot; &quot;, &quot;&amp;nbsp;&quot;)));
				}
</Snippet>
                            </Primary>
                            <Source>
<FileName>SqlModifyData.java</FileName>
<FilePath>lessons/SqlModifyData.java</FilePath>
<LineStart>110</LineStart>
<Snippet>				statement.execute(query);
				
				ResultSet results = statement.getResultSet();

				if ((results != null) &amp;&amp; (results.first() == true))</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="67479E5D27D466B1FF4EC8510AF92AAB">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createContent() in ReflectedXSS.java sends unvalidated data to a web browser on line 116, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ReflectedXSS.java</FileName>
<FilePath>lessons/ReflectedXSS.java</FilePath>
<LineStart>116</LineStart>
<Snippet>			tr.addElement(new TD().addElement(&quot;69.99&quot;).setAlign(&quot;right&quot;));
			tr.addElement(new TD().addElement(
												new Input(Input.TEXT, &quot;QTY1&quot;, s.getParser().getStringParameter(&quot;QTY1&quot;,
																												&quot;1&quot;))
														.setSize(6)).setAlign(&quot;right&quot;));</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="644C0089F9A80D3D403A40D5BAB916F0">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method makeSecondStep() in OffByOne.java sends unvalidated data to a web browser on line 379, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>OffByOne.java</FileName>
<FilePath>lessons/OffByOne.java</FilePath>
<LineStart>379</LineStart>
<Snippet>
		param = s.getParser().getStringParameter(FIRST_NAME, &quot;&quot;);
		input = new Input(Input.HIDDEN, FIRST_NAME, param);
		ec.addElement(input);
		ec.addElement(&quot;\r\n&quot;);</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="72E80034A854BC7CE1B1F12CB56C7AE2">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method handleRequest() in MaliciousFileExecution.java sends unvalidated data to a web browser on line 488, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>MaliciousFileExecution.java</FileName>
<FilePath>lessons/MaliciousFileExecution.java</FilePath>
<LineStart>488</LineStart>
<Snippet>			// call createContent first so messages will go somewhere

			Form form = new Form(getFormAction(), Form.POST).setName(&quot;form&quot;)
				.setEncType(&quot;multipart/form-data&quot;);
</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE" iid="D05591B03EC5C634F4CE3997D49FFA1D">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method writeTable() in DatabaseUtilities.java sends unvalidated data to a web browser on line 159, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtilities.java</FileName>
<FilePath>session/DatabaseUtilities.java</FilePath>
<LineStart>159</LineStart>
<Snippet>					String str = results.getString(i);
					if (str == null) str = &quot;&quot;;
					row.addElement(new TD(str.replaceAll(&quot; &quot;, &quot;&amp;nbsp;&quot;)));
				}
</Snippet>
                            </Primary>
                            <Source>
<FileName>ThreadSafetyProblem.java</FileName>
<FilePath>lessons/ThreadSafetyProblem.java</FilePath>
<LineStart>98</LineStart>
<Snippet>				Statement statement = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
																	ResultSet.CONCUR_READ_ONLY);
				ResultSet results = statement.executeQuery(query);

				if ((results != null) &amp;&amp; (results.first() == true))</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="C80E0301DF4C1A8EE16AE17C722DE066">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createQtyTable() in ClientSideValidation.java sends unvalidated data to a web browser on line 297, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ClientSideValidation.java</FileName>
<FilePath>lessons/ClientSideValidation.java</FilePath>
<LineStart>297</LineStart>
<Snippet>
		tr.addElement(new TD().addElement(
											new Input(Input.TEXT, &quot;TOT1&quot;, s.getParser().getStringParameter(&quot;TOT1&quot;,
																											&quot;$0.00&quot;))
													.setSize(10).setReadOnly(true).setStyle(&quot;border:0px;&quot;))</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="93F97B3A177C153308259C27EB2D6645">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createContent() in DangerousEval.java sends unvalidated data to a web browser on line 128, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DangerousEval.java</FileName>
<FilePath>lessons/DangerousEval.java</FilePath>
<LineStart>128</LineStart>
<Snippet>			tr.addElement(new TD().addElement(&quot;Hewlett-Packard - Pavilion Notebook with Intel? Centrino?&quot;));
			tr.addElement(new TD().addElement(&quot;1599.99&quot;).setAlign(&quot;right&quot;));
		    tr.addElement(new TD().addElement(new Input(Input.TEXT, &quot;QTY3&quot;, s.getParser().getStringParameter(&quot;QTY3&quot;, &quot;1&quot;))).setAlign(&quot;right&quot;));
			quantity = s.getParser().getFloatParameter(&quot;QTY3&quot;, 0.0f);
			total = quantity * 1599.99f;</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="DDF21C7928D0862974445A3FE742FCEC">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createContent() in ViewDatabase.java sends unvalidated data to a web browser on line 69, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewDatabase.java</FileName>
<FilePath>lessons/admin/ViewDatabase.java</FilePath>
<LineStart>69</LineStart>
<Snippet>
			StringBuffer sqlStatement = new StringBuffer(s.getParser().getRawParameter(SQL, &quot;&quot;));
			Input input = new Input(Input.TEXT, SQL, sqlStatement.toString());
			ec.addElement(input);
</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="7254A7590AFC4358ECE78B61DC667AC7">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createContent() in JavaScriptValidation.java sends unvalidated data to a web browser on line 116, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>JavaScriptValidation.java</FileName>
<FilePath>lessons/JavaScriptValidation.java</FilePath>
<LineStart>116</LineStart>
<Snippet>			String param7 = s.getParser().getRawParameter(&quot;field7&quot;, &quot;301-604-4882&quot;);
			ec.addElement(new StringElement(script));
			TextArea input1 = new TextArea(&quot;field1&quot;, 1, 25).addElement(param1);
			TextArea input2 = new TextArea(&quot;field2&quot;, 1, 25).addElement(param2);
			TextArea input3 = new TextArea(&quot;field3&quot;, 1, 25).addElement(param3);</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="2B2E80C3F1C5324EC70FFBD406310CAB">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createContent() in JavaScriptValidation.java sends unvalidated data to a web browser on line 119, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>JavaScriptValidation.java</FileName>
<FilePath>lessons/JavaScriptValidation.java</FilePath>
<LineStart>119</LineStart>
<Snippet>			TextArea input2 = new TextArea(&quot;field2&quot;, 1, 25).addElement(param2);
			TextArea input3 = new TextArea(&quot;field3&quot;, 1, 25).addElement(param3);
			TextArea input4 = new TextArea(&quot;field4&quot;, 1, 25).addElement(param4);
			TextArea input5 = new TextArea(&quot;field5&quot;, 1, 25).addElement(param5);
			TextArea input6 = new TextArea(&quot;field6&quot;, 1, 25).addElement(param6);</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE" iid="2D31BF4DB84940308EB32F9EBED428A2">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method addDBEntriesToEC() in BackDoors.java sends unvalidated data to a web browser on line 110, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>BackDoors.java</FileName>
<FilePath>lessons/BackDoors.java</FilePath>
<LineStart>110</LineStart>
<Snippet>					tr.addElement(new TD(rs.getString(&quot;password&quot;)));
					tr.addElement(new TD(rs.getString(&quot;ssn&quot;)));
					tr.addElement(new TD(rs.getString(&quot;salary&quot;)));
					tr.addElement(new TD(rs.getString(&quot;email&quot;)));
					t.addElement(tr);</Snippet>
                            </Primary>
                            <Source>
<FileName>BackDoors.java</FileName>
<FilePath>lessons/BackDoors.java</FilePath>
<LineStart>180</LineStart>
<Snippet>				}
			}
			ResultSet rs = statement.executeQuery(arrSQL[0]);
			addDBEntriesToEC(ec, rs);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE" iid="08AE22A9CA0348F7E15D1203255C58A6">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method addDBEntriesToEC() in BackDoors.java sends unvalidated data to a web browser on line 109, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>BackDoors.java</FileName>
<FilePath>lessons/BackDoors.java</FilePath>
<LineStart>109</LineStart>
<Snippet>					tr.addElement(new TD(rs.getString(&quot;userid&quot;)));
					tr.addElement(new TD(rs.getString(&quot;password&quot;)));
					tr.addElement(new TD(rs.getString(&quot;ssn&quot;)));
					tr.addElement(new TD(rs.getString(&quot;salary&quot;)));
					tr.addElement(new TD(rs.getString(&quot;email&quot;)));</Snippet>
                            </Primary>
                            <Source>
<FileName>BackDoors.java</FileName>
<FilePath>lessons/BackDoors.java</FilePath>
<LineStart>148</LineStart>
<Snippet>				}

				ResultSet rs = statement.executeQuery(arrSQL[0]);
				addDBEntriesToEC(ec, rs);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="77579ABDEA046AB68AA73D4024F6287F">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method makeRow() in Encoding.java sends unvalidated data to a web browser on line 612, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Encoding.java</FileName>
<FilePath>lessons/Encoding.java</FilePath>
<LineStart>612</LineStart>
<Snippet>				.setBgColor(&quot;#dddddd&quot;);
		TD val2 = new TD()
				.addElement(new Div().addElement(value2).setStyle(&quot;overflow:auto; height:60px; width:100px;&quot;))
				.setBgColor(&quot;#dddddd&quot;);
		TR tr = new TR();</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="7DCA70B4BA1061E14FB34018488AD663">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createContent() in TraceXSS.java sends unvalidated data to a web browser on line 184, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>TraceXSS.java</FileName>
<FilePath>lessons/TraceXSS.java</FilePath>
<LineStart>184</LineStart>
<Snippet>			tr = new TR();
			tr.addElement(new TD().addElement(&quot;Enter your three digit access code:&quot;));
			tr.addElement(new TD().addElement(new Input(Input.TEXT, &quot;field1&quot;, param1)));
			t.addElement(tr);
</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE" iid="59C5CEDAD574466F6E0CC993B70F35C1">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method addDBEntriesToEC() in BackDoors.java sends unvalidated data to a web browser on line 107, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>BackDoors.java</FileName>
<FilePath>lessons/BackDoors.java</FilePath>
<LineStart>107</LineStart>
<Snippet>				{
					tr = new TR();
					tr.addElement(new TD(rs.getString(&quot;userid&quot;)));
					tr.addElement(new TD(rs.getString(&quot;password&quot;)));
					tr.addElement(new TD(rs.getString(&quot;ssn&quot;)));</Snippet>
                            </Primary>
                            <Source>
<FileName>BackDoors.java</FileName>
<FilePath>lessons/BackDoors.java</FilePath>
<LineStart>180</LineStart>
<Snippet>				}
			}
			ResultSet rs = statement.executeQuery(arrSQL[0]);
			addDBEntriesToEC(ec, rs);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="F823DF60A920405312EAD8D12E68D5F5">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createContent() in WsSAXInjection.java sends unvalidated data to a web browser on line 139, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>WsSAXInjection.java</FileName>
<FilePath>lessons/WsSAXInjection.java</FilePath>
<LineStart>139</LineStart>
<Snippet>			xml = xml + (password == null ? &quot;[password]&quot; : password);
			xml = xml + template2;
			pre.addElement(HtmlEncoder.encode(xml));
			ec.addElement(pre);
</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="044E71B477F5057A4D2DF677B6E640DC">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createSuccessfulLoginContent() in MultiLevelLogin2.java sends unvalidated data to a web browser on line 422, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>MultiLevelLogin2.java</FileName>
<FilePath>lessons/MultiLevelLogin2.java</FilePath>
<LineStart>422</LineStart>
<Snippet>		TR tr4 = new TR();
		tr1.addElement(new TD(&quot;&lt;b&gt;Firstname:&lt;/b&gt;&quot;));
		tr1.addElement(new TD(user));

		try</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE" iid="14C5780D3C6DFD67A20155A67D5803B5">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method addDBEntriesToEC() in BackDoors.java sends unvalidated data to a web browser on line 101, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>BackDoors.java</FileName>
<FilePath>lessons/BackDoors.java</FilePath>
<LineStart>101</LineStart>
<Snippet>				tr.addElement(new TD(rs.getString(&quot;password&quot;)));
				tr.addElement(new TD(rs.getString(&quot;ssn&quot;)));
				tr.addElement(new TD(rs.getString(&quot;salary&quot;)));
				tr.addElement(new TD(rs.getString(&quot;email&quot;)));
				t.addElement(tr);</Snippet>
                            </Primary>
                            <Source>
<FileName>BackDoors.java</FileName>
<FilePath>lessons/BackDoors.java</FilePath>
<LineStart>148</LineStart>
<Snippet>				}

				ResultSet rs = statement.executeQuery(arrSQL[0]);
				addDBEntriesToEC(ec, rs);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE" iid="2CE9F0120ACBD32E2E063F10D5012477">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method addDBEntriesToEC() in BackDoors.java sends unvalidated data to a web browser on line 99, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>BackDoors.java</FileName>
<FilePath>lessons/BackDoors.java</FilePath>
<LineStart>99</LineStart>
<Snippet>				tr = new TR();
				tr.addElement(new TD(rs.getString(&quot;userid&quot;)));
				tr.addElement(new TD(rs.getString(&quot;password&quot;)));
				tr.addElement(new TD(rs.getString(&quot;ssn&quot;)));
				tr.addElement(new TD(rs.getString(&quot;salary&quot;)));</Snippet>
                            </Primary>
                            <Source>
<FileName>BackDoors.java</FileName>
<FilePath>lessons/BackDoors.java</FilePath>
<LineStart>148</LineStart>
<Snippet>				}

				ResultSet rs = statement.executeQuery(arrSQL[0]);
				addDBEntriesToEC(ec, rs);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE" iid="14C5780D3C6DFD67A20155A67D5803B6">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method addDBEntriesToEC() in BackDoors.java sends unvalidated data to a web browser on line 110, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>BackDoors.java</FileName>
<FilePath>lessons/BackDoors.java</FilePath>
<LineStart>110</LineStart>
<Snippet>					tr.addElement(new TD(rs.getString(&quot;password&quot;)));
					tr.addElement(new TD(rs.getString(&quot;ssn&quot;)));
					tr.addElement(new TD(rs.getString(&quot;salary&quot;)));
					tr.addElement(new TD(rs.getString(&quot;email&quot;)));
					t.addElement(tr);</Snippet>
                            </Primary>
                            <Source>
<FileName>BackDoors.java</FileName>
<FilePath>lessons/BackDoors.java</FilePath>
<LineStart>148</LineStart>
<Snippet>				}

				ResultSet rs = statement.executeQuery(arrSQL[0]);
				addDBEntriesToEC(ec, rs);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="19446190ED48006EA5FC0AC7391FB73C">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createContent() in JavaScriptValidation.java sends unvalidated data to a web browser on line 117, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>JavaScriptValidation.java</FileName>
<FilePath>lessons/JavaScriptValidation.java</FilePath>
<LineStart>117</LineStart>
<Snippet>			ec.addElement(new StringElement(script));
			TextArea input1 = new TextArea(&quot;field1&quot;, 1, 25).addElement(param1);
			TextArea input2 = new TextArea(&quot;field2&quot;, 1, 25).addElement(param2);
			TextArea input3 = new TextArea(&quot;field3&quot;, 1, 25).addElement(param3);
			TextArea input4 = new TextArea(&quot;field4&quot;, 1, 25).addElement(param4);</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="297738AF95B7E535E53F6753A35C7EF5">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method handleRequest() in SilentTransactions.java sends unvalidated data to a web browser on line 111, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SilentTransactions.java</FileName>
<FilePath>lessons/SilentTransactions.java</FilePath>
<LineStart>111</LineStart>
<Snippet>		}

		Form form = new Form(getFormAction(), Form.POST).setName(&quot;form&quot;).setEncType(&quot;&quot;);

		form.addElement(createContent(s));</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE" iid="31335CA31F53FB273AAE4C31E6E9756F">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method addDBEntriesToEC() in BackDoors.java sends unvalidated data to a web browser on line 99, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>BackDoors.java</FileName>
<FilePath>lessons/BackDoors.java</FilePath>
<LineStart>99</LineStart>
<Snippet>				tr = new TR();
				tr.addElement(new TD(rs.getString(&quot;userid&quot;)));
				tr.addElement(new TD(rs.getString(&quot;password&quot;)));
				tr.addElement(new TD(rs.getString(&quot;ssn&quot;)));
				tr.addElement(new TD(rs.getString(&quot;salary&quot;)));</Snippet>
                            </Primary>
                            <Source>
<FileName>BackDoors.java</FileName>
<FilePath>lessons/BackDoors.java</FilePath>
<LineStart>180</LineStart>
<Snippet>				}
			}
			ResultSet rs = statement.executeQuery(arrSQL[0]);
			addDBEntriesToEC(ec, rs);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="DBDBBFC6-DE26-4FC5-8347-D48032B2BF5D" iid="904099EEB05A8FF195A5BCDBC21FE12C">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method createContent() in DangerousEval.java sends unvalidated data to a web browser on line 138, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DangerousEval.java</FileName>
<FilePath>lessons/DangerousEval.java</FilePath>
<LineStart>138</LineStart>
<Snippet>			tr.addElement(new TD().addElement(&quot;299.99&quot;).setAlign(&quot;right&quot;));

		    tr.addElement(new TD().addElement(new Input(Input.TEXT, &quot;QTY4&quot;, s.getParser().getStringParameter(&quot;QTY4&quot;, &quot;1&quot;))).setAlign(&quot;right&quot;));
			quantity = s.getParser().getFloatParameter(&quot;QTY4&quot;, 0.0f);
			total = quantity * 299.99f;</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="94B3FB0E-4AED-4006-9CDD-B2B1C13747EE" iid="91604D62008F72E686F4780F31278ECA">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method makeList() in CSRF.java sends unvalidated data to a web browser on line 245, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>CSRF.java</FileName>
<FilePath>lessons/CSRF.java</FilePath>
<LineStart>245</LineStart>
<Snippet>					String link = &quot;&lt;a href='&quot; + getLink() + &quot;&amp;&quot; + NUMBER + &quot;=&quot; + results.getInt(NUM_COL)
							+ &quot;' style='cursor:hand'&gt;&quot; + results.getString(TITLE_COL) + &quot;&lt;/a&gt;&quot;;
					TD td = new TD().addElement(link);
					TR tr = new TR().addElement(td);
					t.addElement(tr);</Snippet>
                            </Primary>
                            <Source>
<FileName>CSRF.java</FileName>
<FilePath>lessons/CSRF.java</FilePath>
<LineStart>235</LineStart>
<Snippet>			statement.setString(1, getNameroot(s.getUserName()) + &quot;%&quot;);
			statement.setString(2, getClass().getName());
			ResultSet results = statement.executeQuery();

			if ((results != null) &amp;&amp; (results.first() == true))</Snippet>
                            </Source>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="71">
                        <groupTitle>A1 Injection</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>Constructing a dynamic SQL statement with user input could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands. </Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>SQL injection errors occur when:

1. Data enters a program from an untrusted source.

In this case HP Fortify Static Code Analyzer could not determine that the source of the data is trusted.

2. The data is used to dynamically construct a SQL query. 



Example 1: The following code dynamically constructs and executes a SQL query that searches for items matching a specified name. The query restricts the items displayed to those where the owner matches the user name of the currently-authenticated user. 


...
	String userName = ctx.getAuthenticatedUserName();
	String itemName = request.getParameter(&quot;itemName&quot;);
	String query = &quot;SELECT * FROM items WHERE owner = '&quot; 
				+ userName + &quot;' AND itemname = '&quot;  
				+ itemName + &quot;'&quot;;
	ResultSet rs = stmt.execute(query);
	...


The query that this code intends to execute follows:


	SELECT * FROM items
	WHERE owner = &lt;userName&gt;
	AND itemname = &lt;itemName&gt;;


However, because the query is constructed dynamically by concatenating a constant base query string and a user input string, the query only behaves correctly if itemName does not contain a single-quote character. If an attacker with the user name wiley enters the string &quot;name' OR 'a'='a&quot; for itemName, then the query becomes the following:


	SELECT * FROM items
	WHERE owner = 'wiley'
	AND itemname = 'name' OR 'a'='a';


The addition of the OR 'a'='a' condition causes the where clause to always evaluate to true, so the query becomes logically equivalent to the much simpler query:


	SELECT * FROM items;


This simplification of the query allows the attacker to bypass the requirement that the query only return items owned by the authenticated user; the query now returns all entries stored in the items table, regardless of their specified owner.

Example 2: This example examines the effects of a different malicious value passed to the query constructed and executed in Example 1. If an attacker with the user name wiley enters the string &quot;name'; DELETE FROM items; --&quot; for itemName, then the query becomes the following two queries:


	SELECT * FROM items 
	WHERE owner = 'wiley'
	AND itemname = 'name';

	DELETE FROM items;

	--'


Many database servers, including Microsoft(R) SQL Server 2000, allow multiple SQL statements separated by semicolons to be executed at once. While this attack string results in an error on Oracle and other database servers that do not allow the batch-execution of statements separated by semicolons, on databases that do allow batch execution, this type of attack allows the attacker to execute arbitrary commands against the database. 

Notice the trailing pair of hyphens (--), which specifies to most database servers that the remainder of the statement is to be treated as a comment and not executed [4]. In this case the comment character serves to remove the trailing single-quote left over from the modified query. On a database where comments are not allowed to be used in this way, the general attack could still be made effective using a trick similar to the one used in Example 1. If an attacker enters the string &quot;name'); DELETE FROM items; SELECT * FROM items WHERE 'a'='a&quot;, the following three valid statements will be created: 


	SELECT * FROM items 
	WHERE owner = 'wiley'
	AND itemname = 'name';

	DELETE FROM items;

	SELECT * FROM items WHERE 'a'='a';


One traditional approach to preventing SQL injection attacks is to handle them as an input validation problem and either accept only characters from a whitelist of safe values or identify and escape a blacklist of potentially malicious values. Whitelisting can be a very effective means of enforcing strict input validation rules, but parameterized SQL statements require less maintenance and can offer more guarantees with respect to security. As is almost always the case, blacklisting is riddled with loopholes that make it ineffective at preventing SQL injection attacks. For example, attackers can: 

- Target fields that are not quoted

- Find ways to bypass the need for certain escaped meta-characters

- Use stored procedures to hide the injected meta-characters

Manually escaping characters in input to SQL queries can help, but it will not make your application secure from SQL injection attacks. 

Another solution commonly proposed for dealing with SQL injection attacks is to use stored procedures. Although stored procedures prevent some types of SQL injection attacks, they fail to protect against many others. Stored procedures typically help prevent SQL injection attacks by limiting the types of statements that can be passed to their parameters. However, there are many ways around the limitations and many interesting statements that can still be passed to stored procedures. Again, stored procedures can prevent some exploits, but they will not make your application secure against SQL injection attacks. 
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>The root cause of a SQL injection vulnerability is the ability of an attacker to change context in the SQL query, causing a value that the programmer intended to be interpreted as data to be interpreted as a command instead. When a SQL query is constructed, the programmer knows what should be interpreted as part of the command and what should be interpreted as data. Parameterized SQL statements can enforce this behavior by disallowing data-directed context changes and preventing nearly all SQL injection attacks. Parameterized SQL statements are constructed using strings of regular SQL, but when user-supplied data needs to be included, they create bind parameters, which are placeholders for data that is subsequently inserted. Bind parameters allow the program to explicitly specify to the database what should be treated as a command and what should be treated as data. When the program is ready to execute a statement, it specifies to the database the runtime values to use for the value of each of the bind parameters, without the risk of the data being interpreted as commands. 

The previous example can be rewritten to use parameterized SQL statements (instead of concatenating user supplied strings) as follows:


...
String userName = ctx.getAuthenticatedUserName();
String itemName = request.getParameter(&quot;itemName&quot;);
String query =
        &quot;SELECT * FROM items WHERE itemname=? AND owner=?&quot;; 
PreparedStatement stmt = conn.prepareStatement(query);
stmt.setString(1, itemName);
stmt.setString(2, userName);
ResultSet results = stmt.execute();
...


More complicated scenarios, often found in report generation code, require that user input affect the command structure of the SQL statement, such as the addition of dynamic constraints in the WHERE clause. Do not use this requirement to justify concatenating user input into query strings. Prevent SQL injection attacks where user input must affect statement command structure with a level of indirection: create a set of legitimate strings that correspond to different elements you might include in a SQL statement. When constructing a statement, use input from the user to select from this set of application-controlled values. 
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. A common mistake is to use parameterized SQL statements that are constructed by concatenating user-controlled strings. Of course, this defeats the purpose of using parameterized SQL statements. If you are not certain that the strings used to form statements are constants controlled by the application, do not assume that they are safe because they are not being executed directly as SQL strings. Thoroughly investigate all uses of user-controlled strings in SQL statements and verify that none can be used to modify the meaning of the query. 

2. Data is untrustworthy if it originates from public non-final string fields of a class. These types of fields may be modified by an unknown source.

3. Fortify RTA adds protection against this category.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>71</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue ruleID="66FF2F11-2B0E-4AF9-9D75-0DD555BD0DB6" iid="6ACDBF61A065239C1290A0C12C773D70">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 100 of SqlAddData.java, the method createContent() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SqlAddData.java</FileName>
<FilePath>lessons/SqlAddData.java</FilePath>
<LineStart>100</LineStart>
<Snippet>																	ResultSet.CONCUR_READ_ONLY);
				
				statement.execute(query);
				
				ResultSet results = statement.getResultSet();</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="66FF2F11-2B0E-4AF9-9D75-0DD555BD0DB6" iid="A3021F1D45B7B87B79A7D5D83DB8696D">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 100 of SqlAddData.java, the method createContent() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SqlAddData.java</FileName>
<FilePath>lessons/SqlAddData.java</FilePath>
<LineStart>100</LineStart>
<Snippet>																	ResultSet.CONCUR_READ_ONLY);
				
				statement.execute(query);
				
				ResultSet results = statement.getResultSet();</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="44346ECC-FA69-4531-BA0E-F91D030672E1" iid="9C6A92D032F5471E511A27C044B3EDDF">
                            <Category>Command Injection</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method execOptions() in Exec.java calls write() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>util/Exec.java</FilePath>
<LineStart>307</LineStart>
<Snippet>				try
				{
					processOut.write(input.getBytes());
					processOut.flush();
					processOut.close();</Snippet>
                            </Primary>
                            <Source>
<FileName>Exec.java</FileName>
<FilePath>util/Exec.java</FilePath>
<LineStart>293</LineStart>
<Snippet>			InputStream processIn = child.getInputStream();
			InputStream processError = child.getErrorStream();
			OutputStream processOut = child.getOutputStream();

			// start the clock running</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5760613C-9AF8-41EF-8431-66B6FBD4717A" iid="1EE43C8EBD079E2A1595DC2E202F0C9A">
                            <Category>Command Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method execOptions() in Exec.java calls exec() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>util/Exec.java</FilePath>
<LineStart>288</LineStart>
<Snippet>		{
			// start the command
			child = Runtime.getRuntime().exec(command);

			// get the streams in and out of the command</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="60F9D5A5BACF1173373E19CA96ADAA60">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 114 of BlindNumericSqlInjection.java, the method createContent() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>BlindNumericSqlInjection.java</FileName>
<FilePath>lessons/BlindNumericSqlInjection.java</FilePath>
<LineStart>114</LineStart>
<Snippet>		    Statement statement = connection.createStatement(
			    ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
		    ResultSet results = statement.executeQuery(query);

		    if ((results != null) &amp;&amp; (results.first() == true))</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="EF6376164962EA7BF26F1A871F672D41">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 108 of ViewProfile.java, the method getEmployeeProfile() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>108</LineStart>
<Snippet>				Statement answer_statement = WebSession.getConnection(s)
						.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
				ResultSet answer_results = answer_statement.executeQuery(query);
				if (answer_results.next())
				{</Snippet>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>lessons/CrossSiteScripting/EditProfile.java</FilePath>
<LineStart>87</LineStart>
<Snippet>						.prepareStatement(query, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
				answer_statement.setInt(1, subjectUserId);
				ResultSet answer_results = answer_statement.executeQuery();
				if (answer_results.next())
				{</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="D1EF88605230D7F736402E17D85C0DCE">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 166 of Login.java, the method login_BACKUP() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Login.java</FileName>
<FilePath>lessons/SQLInjection/Login.java</FilePath>
<LineStart>166</LineStart>
<Snippet>				Statement answer_statement = WebSession.getConnection(s)
						.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
				ResultSet answer_results = answer_statement.executeQuery(query);
				if (answer_results.first())
				{</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1C7A212C-7723-452B-97D5-4D94EC85829E" iid="1FF3A6C9E4A29C8BDC91616FF674BE16">
                            <Category>Command Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method accessWGService() in WSDLScanning.java calls setTargetEndpointAddress() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>WSDLScanning.java</FileName>
<FilePath>lessons/WSDLScanning.java</FilePath>
<LineStart>153</LineStart>
<Snippet>			call.setUsername(&quot;guest&quot;);
			call.setPassword(&quot;guest&quot;);
			call.setTargetEndpointAddress(&quot;http://localhost:&quot; + port + &quot;/&quot; + s.getRequest().getContextPath() + &quot;/services/&quot; + serv);
			Object result = call.invoke(new Object[] { parameterValue });
			return result;</Snippet>
                            </Primary>
                            <Source>
<FileName>WSDLScanning.java</FileName>
<FilePath>lessons/WSDLScanning.java</FilePath>
<LineStart>213</LineStart>
<Snippet>			TR header = new TR();
			TR results = new TR();
			int port = s.getRequest().getServerPort();
			for (int i = 0; i &lt; fields.length; i++)
			{</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="AB181F77-DEC9-44BE-A798-47D9CBA60BD0" iid="B15E95FA6258EF3D1600E56A964B35C0">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 232 of UpdateProfile.java, the method createEmployeeProfile() invokes a SQL query built using potentially unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>lessons/RoleBasedAccessControl/UpdateProfile.java</FilePath>
<LineStart>232</LineStart>
<Snippet>			try
			{
				PreparedStatement ps = WebSession.getConnection(s).prepareStatement(query);

				ps.setString(1, employee.getFirstName().toLowerCase());</Snippet>
                            </Primary>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="16B00222B6C0C59FE29421B12AEB550A">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 463 of MaliciousFileExecution.java, the method handleRequest() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>MaliciousFileExecution.java</FileName>
<FilePath>lessons/MaliciousFileExecution.java</FilePath>
<LineStart>463</LineStart>
<Snippet>			    		
				        System.out.println(&quot;Updating row:\n&quot; + updateData1 );
				    	if(statement.executeUpdate(updateData1) == 0) {
				        
				    		// update failed, we need to add a row</Snippet>
                            </Primary>
                            <Source>
<FileName>MaliciousFileExecution.java</FileName>
<FilePath>lessons/MaliciousFileExecution.java</FilePath>
<LineStart>421</LineStart>
<Snippet>			
//			 Parse the request
			List /* FileItem */ items = upload.parseRequest(s.getRequest());
			
//			 Process the uploaded items</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="3C28D82145088B948472DC4A76A2AA72">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 114 of BlindStringSqlInjection.java, the method createContent() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>BlindStringSqlInjection.java</FileName>
<FilePath>lessons/BlindStringSqlInjection.java</FilePath>
<LineStart>114</LineStart>
<Snippet>		    Statement statement = connection.createStatement(
			    ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
		    ResultSet results = statement.executeQuery(query);

		    if ((results != null) &amp;&amp; (results.first() == true))</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="6F6AC2229DF8D02A530F051A6AD33967">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 82 of ViewDatabase.java, the method createContent() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewDatabase.java</FileName>
<FilePath>lessons/admin/ViewDatabase.java</FilePath>
<LineStart>82</LineStart>
<Snippet>				Statement statement = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
																	ResultSet.CONCUR_READ_ONLY);
				ResultSet results = statement.executeQuery(sqlStatement.toString());

				if ((results != null) &amp;&amp; (results.first() == true))</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57" iid="360E3CE77448ED1F01C49BC9140332BF">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 146 of DOS_Login.java, the method createContent() invokes a SQL query built using potentially unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DOS_Login.java</FileName>
<FilePath>lessons/DOS_Login.java</FilePath>
<LineStart>146</LineStart>
<Snippet>					// check the total count of logins
					query = &quot;SELECT * FROM user_login WHERE webgoat_user = '&quot; + s.getUserName() + &quot;'&quot;;
					results = statement.executeQuery(query);
					results.last();
					ec.addElement(new H2(&quot;Successfull login count: &quot; + results.getRow()));</Snippet>
                            </Primary>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="6DE0B69E4C72AACE7BB3D697566BC862">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 127 of Login.java, the method login() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Login.java</FileName>
<FilePath>lessons/GoatHillsFinancial/Login.java</FilePath>
<LineStart>127</LineStart>
<Snippet>				Statement answer_statement = WebSession.getConnection(s)
						.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
				ResultSet answer_results = answer_statement.executeQuery(query);
				if (answer_results.first())
				{</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="5CBB6A6AEB923017A04B657386398765">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 252 of DefaultLessonAction.java, the method isAuthorized() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>lessons/GoatHillsFinancial/DefaultLessonAction.java</FilePath>
<LineStart>252</LineStart>
<Snippet>				Statement answer_statement = WebSession.getConnection(s)
						.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
				ResultSet answer_results = answer_statement.executeQuery(query);
				authorized = answer_results.first();
</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="D4E4CFA1BF2840CDA84756586860D1D2">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 108 of ViewProfile.java, the method getEmployeeProfile() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>108</LineStart>
<Snippet>				Statement answer_statement = WebSession.getConnection(s)
						.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
				ResultSet answer_results = answer_statement.executeQuery(query);
				if (answer_results.next())
				{</Snippet>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>lessons/GoatHillsFinancial/ViewProfile.java</FilePath>
<LineStart>94</LineStart>
<Snippet>				Statement answer_statement = WebSession.getConnection(s)
						.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
				ResultSet answer_results = answer_statement.executeQuery(query);
				if (answer_results.next())
				{</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="AB181F77-DEC9-44BE-A798-47D9CBA60BD0" iid="A5559944CF99FD97C3671AF15C89CC4E">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 178 of UpdateProfile.java, the method createEmployeeProfile() invokes a SQL query built using potentially unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>lessons/DBCrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>178</LineStart>
<Snippet>			try
			{
				PreparedStatement ps = WebSession.getConnection(s).prepareStatement(query);

				ps.setString(1, employee.getFirstName().toLowerCase());</Snippet>
                            </Primary>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="4160ACF7C5386BB94D9EB42EE0C9EF5E">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 108 of ViewProfile.java, the method getEmployeeProfile() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>108</LineStart>
<Snippet>				Statement answer_statement = WebSession.getConnection(s)
						.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
				ResultSet answer_results = answer_statement.executeQuery(query);
				if (answer_results.next())
				{</Snippet>
                            </Primary>
                            <Source>
<FileName>ViewProfile_i.java</FileName>
<FilePath>lessons/instructor/RoleBasedAccessControl/ViewProfile_i.java</FilePath>
<LineStart>88</LineStart>
<Snippet>					Statement answer_statement = WebSession.getConnection(s)
							.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
					ResultSet answer_results = answer_statement.executeQuery(query);
					if (answer_results.next())
					{</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="7DE5CB2BC4041A1E67F217526A3B5F3A">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 141 of BackDoors.java, the method concept1() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>BackDoors.java</FileName>
<FilePath>lessons/BackDoors.java</FilePath>
<LineStart>141</LineStart>
<Snippet>				if (arrSQL.length == 2)
				{
					statement.executeUpdate(arrSQL[1]);

					getLessonTracker(s).setStage(2);</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="66FF2F11-2B0E-4AF9-9D75-0DD555BD0DB6" iid="AC61DE677CABBC0C902DAD6613F763AD">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 108 of SqlModifyData.java, the method createContent() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SqlModifyData.java</FileName>
<FilePath>lessons/SqlModifyData.java</FilePath>
<LineStart>108</LineStart>
<Snippet>																	ResultSet.CONCUR_READ_ONLY);
				//
				statement.execute(query);
				
				ResultSet results = statement.getResultSet();</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="BB8EC8D8F65DB572A3C71CC9A50136C7">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 108 of ViewProfile.java, the method getEmployeeProfile() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>108</LineStart>
<Snippet>				Statement answer_statement = WebSession.getConnection(s)
						.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
				ResultSet answer_results = answer_statement.executeQuery(query);
				if (answer_results.next())
				{</Snippet>
                            </Primary>
                            <Source>
<FileName>Login.java</FileName>
<FilePath>lessons/SQLInjection/Login.java</FilePath>
<LineStart>205</LineStart>
<Snippet>				Statement answer_statement = WebSession.getConnection(s)
						.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
				ResultSet answer_results = answer_statement.executeQuery(query);
				answer_results.beforeFirst();
				while (answer_results.next())</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="675BD3A413F61AD447FA0DCCD6661859">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 148 of BackDoors.java, the method concept1() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>BackDoors.java</FileName>
<FilePath>lessons/BackDoors.java</FilePath>
<LineStart>148</LineStart>
<Snippet>				}

				ResultSet rs = statement.executeQuery(arrSQL[0]);
				addDBEntriesToEC(ec, rs);
</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1C7A212C-7723-452B-97D5-4D94EC85829E" iid="2390CF7C0D738E2BE2F968716E8C1539">
                            <Category>Command Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method accessWGService() in WSDLScanning.java calls setOperationName() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>WSDLScanning.java</FileName>
<FilePath>lessons/WSDLScanning.java</FilePath>
<LineStart>148</LineStart>
<Snippet>			Service service = new Service();
			Call call = (Call) service.createCall();
			call.setOperationName(operationName);
			call.addParameter(parameterName, serviceName, ParameterMode.INOUT);
			call.setReturnType(XMLType.XSD_STRING);</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>581</LineStart>
<Snippet>		if (request == null) { return (null); }

		return request.getParameterValues(name);
	}
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="7CAFB84D0702AE41BFB506EA478154BD">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 108 of ViewProfile.java, the method getEmployeeProfile() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>108</LineStart>
<Snippet>				Statement answer_statement = WebSession.getConnection(s)
						.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
				ResultSet answer_results = answer_statement.executeQuery(query);
				if (answer_results.next())
				{</Snippet>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>97</LineStart>
<Snippet>				Statement answer_statement = WebSession.getConnection(s)
						.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
				ResultSet answer_results = answer_statement.executeQuery(query);
				if (answer_results.next())
				{</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="49E52C3AC1C5295B97DA1D6B4B1EA8C9">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 108 of ViewProfile.java, the method getEmployeeProfile() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>108</LineStart>
<Snippet>				Statement answer_statement = WebSession.getConnection(s)
						.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
				ResultSet answer_results = answer_statement.executeQuery(query);
				if (answer_results.next())
				{</Snippet>
                            </Primary>
                            <Source>
<FileName>Login.java</FileName>
<FilePath>lessons/GoatHillsFinancial/Login.java</FilePath>
<LineStart>166</LineStart>
<Snippet>				Statement answer_statement = WebSession.getConnection(s)
						.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
				ResultSet answer_results = answer_statement.executeQuery(query);
				answer_results.beforeFirst();
				while (answer_results.next())</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="FD2FD1DCB206222275166C2262E16ED9">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 108 of ViewProfile.java, the method getEmployeeProfile() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>108</LineStart>
<Snippet>				Statement answer_statement = WebSession.getConnection(s)
						.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
				ResultSet answer_results = answer_statement.executeQuery(query);
				if (answer_results.next())
				{</Snippet>
                            </Primary>
                            <Source>
<FileName>ListStaff.java</FileName>
<FilePath>lessons/GoatHillsFinancial/ListStaff.java</FilePath>
<LineStart>87</LineStart>
<Snippet>				Statement answer_statement = WebSession.getConnection(s)
						.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
				ResultSet answer_results = answer_statement.executeQuery(query);
				answer_results.beforeFirst();
				while (answer_results.next())</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="C14C64BA786C022955CEEAC43F149FCE">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 252 of DefaultLessonAction.java, the method isAuthorized() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DefaultLessonAction.java</FileName>
<FilePath>lessons/GoatHillsFinancial/DefaultLessonAction.java</FilePath>
<LineStart>252</LineStart>
<Snippet>				Statement answer_statement = WebSession.getConnection(s)
						.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
				ResultSet answer_results = answer_statement.executeQuery(query);
				authorized = answer_results.first();
</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="4B75C779AA009A701775FF47139B7184">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 108 of ViewProfile.java, the method getEmployeeProfile() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>108</LineStart>
<Snippet>				Statement answer_statement = WebSession.getConnection(s)
						.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
				ResultSet answer_results = answer_statement.executeQuery(query);
				if (answer_results.next())
				{</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="66FF2F11-2B0E-4AF9-9D75-0DD555BD0DB6" iid="03EE1BDC386CB0294BC0D436882615A8">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 108 of SqlModifyData.java, the method createContent() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SqlModifyData.java</FileName>
<FilePath>lessons/SqlModifyData.java</FilePath>
<LineStart>108</LineStart>
<Snippet>																	ResultSet.CONCUR_READ_ONLY);
				//
				statement.execute(query);
				
				ResultSet results = statement.getResultSet();</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="AEA9B46349271C153E9DAED5A188F60F">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 108 of ViewProfile.java, the method getEmployeeProfile() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>108</LineStart>
<Snippet>				Statement answer_statement = WebSession.getConnection(s)
						.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
				ResultSet answer_results = answer_statement.executeQuery(query);
				if (answer_results.next())
				{</Snippet>
                            </Primary>
                            <Source>
<FileName>EditProfile_i.java</FileName>
<FilePath>lessons/instructor/RoleBasedAccessControl/EditProfile_i.java</FilePath>
<LineStart>56</LineStart>
<Snippet>							.prepareStatement(query, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
					answer_statement.setInt(1, subjectUserId);
					ResultSet answer_results = answer_statement.executeQuery();
					if (answer_results.next())
					{</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="3F7331FA7472AA11CFAA7180DFDDBB19">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 108 of ViewProfile.java, the method getEmployeeProfile() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>108</LineStart>
<Snippet>				Statement answer_statement = WebSession.getConnection(s)
						.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
				ResultSet answer_results = answer_statement.executeQuery(query);
				if (answer_results.next())
				{</Snippet>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>115</LineStart>
<Snippet>				Statement answer_statement = WebSession.getConnection(s)
						.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
				ResultSet answer_results = answer_statement.executeQuery(query);
				if (answer_results.next())
				{</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="1BA20A88FFEBE4A4F9905C39211E9B74">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 108 of ViewProfile.java, the method getEmployeeProfile() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>108</LineStart>
<Snippet>				Statement answer_statement = WebSession.getConnection(s)
						.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
				ResultSet answer_results = answer_statement.executeQuery(query);
				if (answer_results.next())
				{</Snippet>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>lessons/RoleBasedAccessControl/EditProfile.java</FilePath>
<LineStart>87</LineStart>
<Snippet>						.prepareStatement(query, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
				answer_statement.setInt(1, subjectUserId);
				ResultSet answer_results = answer_statement.executeQuery();
				if (answer_results.next())
				{</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57" iid="E16D44B5AE9E725B2407E99299F10B01">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 302 of MaliciousFileExecution.java, the method restartLesson() invokes a SQL query built using potentially unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>MaliciousFileExecution.java</FileName>
<FilePath>lessons/MaliciousFileExecution.java</FilePath>
<LineStart>302</LineStart>
<Snippet>	        	+ s.getUserName() + &quot;';&quot;;

	        statement.executeUpdate(deleteuserrow);
			
		} catch (SQLException e) {</Snippet>
                            </Primary>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="8A18E35BD3EFE32534AC9384A5BE6956">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 101 of SqlStringInjection.java, the method injectableQuery() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SqlStringInjection.java</FileName>
<FilePath>lessons/SqlStringInjection.java</FilePath>
<LineStart>101</LineStart>
<Snippet>				Statement statement = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
																	ResultSet.CONCUR_READ_ONLY);
				ResultSet results = statement.executeQuery(query);

				if ((results != null) &amp;&amp; (results.first() == true))</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="A8DC719455033208D471723D6AA1A1B0">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 108 of ViewProfile.java, the method getEmployeeProfile() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>108</LineStart>
<Snippet>				Statement answer_statement = WebSession.getConnection(s)
						.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
				ResultSet answer_results = answer_statement.executeQuery(query);
				if (answer_results.next())
				{</Snippet>
                            </Primary>
                            <Source>
<FileName>Login.java</FileName>
<FilePath>lessons/DBSQLInjection/Login.java</FilePath>
<LineStart>202</LineStart>
<Snippet>				Statement answer_statement = WebSession.getConnection(s)
						.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
				ResultSet answer_results = answer_statement.executeQuery(query);
				answer_results.beforeFirst();
				while (answer_results.next())</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="B6241CFD47363A1D7BD26A39BC5F8627">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 180 of BackDoors.java, the method concept2() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>BackDoors.java</FileName>
<FilePath>lessons/BackDoors.java</FilePath>
<LineStart>180</LineStart>
<Snippet>				}
			}
			ResultSet rs = statement.executeQuery(arrSQL[0]);
			addDBEntriesToEC(ec, rs);
</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="44346ECC-FA69-4531-BA0E-F91D030672E1" iid="9C6A92D032F5471E511A27C044B3EDDE">
                            <Category>Command Injection</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method execOptions() in Exec.java calls write() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>util/Exec.java</FilePath>
<LineStart>125</LineStart>
<Snippet>				try
				{
					processOut.write(input.getBytes());
					processOut.flush();
					processOut.close();</Snippet>
                            </Primary>
                            <Source>
<FileName>Exec.java</FileName>
<FilePath>util/Exec.java</FilePath>
<LineStart>111</LineStart>
<Snippet>			InputStream processIn = child.getInputStream();
			InputStream processError = child.getErrorStream();
			OutputStream processOut = child.getOutputStream();

			// start the clock running</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="7BDD81B455000B4713391796B65D396B">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 131 of Login.java, the method login() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Login.java</FileName>
<FilePath>lessons/SQLInjection/Login.java</FilePath>
<LineStart>131</LineStart>
<Snippet>				Statement answer_statement = WebSession.getConnection(s)
						.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
				ResultSet answer_results = answer_statement.executeQuery(query);
				if (answer_results.first())
				{</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="AB181F77-DEC9-44BE-A798-47D9CBA60BD0" iid="4BBECBF49771201DF72C4C745EB2D4C1">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 279 of UpdateProfile.java, the method createEmployeeProfile() invokes a SQL query built using potentially unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>279</LineStart>
<Snippet>			try
			{
				PreparedStatement ps = WebSession.getConnection(s).prepareStatement(query);

				ps.setString(1, employee.getFirstName().toLowerCase());</Snippet>
                            </Primary>
                        </Issue>
                        <Issue ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57" iid="A3CC95BCD894EAD3D13DABC323E3D63B">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 134 of DOS_Login.java, the method createContent() invokes a SQL query built using potentially unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DOS_Login.java</FileName>
<FilePath>lessons/DOS_Login.java</FilePath>
<LineStart>134</LineStart>
<Snippet>							String deleteData1 = &quot;DELETE from user_login WHERE webgoat_user = '&quot; + s.getUserName()
									+ &quot;'&quot;;
							statement.executeUpdate(deleteData1);
							return (new H1(&quot;Congratulations! Lesson Completed&quot;));
						}</Snippet>
                            </Primary>
                        </Issue>
                        <Issue ruleID="5760613C-9AF8-41EF-8431-66B6FBD4717A" iid="1EE43C8EBD079E2A1595DC2E202F0C99">
                            <Category>Command Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method execOptions() in Exec.java calls exec() with a command built from untrusted data. This call can cause the program to execute malicious commands on behalf of an attacker.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Exec.java</FileName>
<FilePath>util/Exec.java</FilePath>
<LineStart>106</LineStart>
<Snippet>		{
			// start the command
			child = Runtime.getRuntime().exec(command);

			// get the streams in and out of the command</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="BDB979C5A4BED6AFC08178F9E4372662">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 106 of DOS_Login.java, the method createContent() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DOS_Login.java</FileName>
<FilePath>lessons/DOS_Login.java</FilePath>
<LineStart>106</LineStart>
<Snippet>				Statement statement = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
																	ResultSet.CONCUR_READ_ONLY);
				ResultSet results = statement.executeQuery(query);

				if ((results != null) &amp;&amp; (results.first() == true))</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57" iid="E45DB76FA6544E2982372E90F609292E">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 35 of DeleteProfile_i.java, the method doDeleteEmployeeProfile() invokes a SQL query built using potentially unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DeleteProfile_i.java</FileName>
<FilePath>lessons/instructor/RoleBasedAccessControl/DeleteProfile_i.java</FilePath>
<LineStart>35</LineStart>
<Snippet>					Statement statement = WebSession.getConnection(s)
							.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
					statement.executeUpdate(query);
				} catch (SQLException sqle)
				{</Snippet>
                            </Primary>
                        </Issue>
                        <Issue ruleID="AB181F77-DEC9-44BE-A798-47D9CBA60BD0" iid="7A37ECE58CFD6B934608B2E0FEA6733A">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 321 of UpdateProfile.java, the method createEmployeeProfile_BACKUP() invokes a SQL query built using potentially unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>lessons/CrossSiteScripting/UpdateProfile.java</FilePath>
<LineStart>321</LineStart>
<Snippet>			try
			{
				PreparedStatement ps = WebSession.getConnection(s).prepareStatement(query);

				ps.setString(1, employee.getFirstName().toLowerCase());</Snippet>
                            </Primary>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="B7EBE381ABF83CAAA84E00313C5ECC06">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 233 of WsSqlInjection.java, the method getResults() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>WsSqlInjection.java</FileName>
<FilePath>lessons/WsSqlInjection.java</FilePath>
<LineStart>233</LineStart>
<Snippet>				Statement statement = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
																	ResultSet.CONCUR_READ_ONLY);
				ResultSet results = statement.executeQuery(query);
				return results;
			} catch (SQLException sqle)</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57" iid="71D58EDEF24A608F33F20562AE12C100">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 1007 of CreateDB.java, the method createTransactionTable() invokes a SQL query built using potentially unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CreateDB.java</FileName>
<FilePath>session/CreateDB.java</FilePath>
<LineStart>1007</LineStart>
<Snippet>			for (int i = 0; i &lt; data.length; i++)
			{
				statement.executeUpdate(&quot;INSERT INTO Transactions VALUES (&quot; + data[i] + &quot;);&quot;);
			}
		} catch (SQLException sqle)</Snippet>
                            </Primary>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="CFA08E705B2FEB36B31081983682AFBA">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 233 of WsSqlInjection.java, the method getResults() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>WsSqlInjection.java</FileName>
<FilePath>lessons/WsSqlInjection.java</FilePath>
<LineStart>233</LineStart>
<Snippet>				Statement statement = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
																	ResultSet.CONCUR_READ_ONLY);
				ResultSet results = statement.executeQuery(query);
				return results;
			} catch (SQLException sqle)</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="AB181F77-DEC9-44BE-A798-47D9CBA60BD0" iid="92E4D213BF161AE5ACE94ABD14DC66F2">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 183 of UpdateProfile.java, the method createEmployeeProfile() invokes a SQL query built using potentially unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile.java</FileName>
<FilePath>lessons/GoatHillsFinancial/UpdateProfile.java</FilePath>
<LineStart>183</LineStart>
<Snippet>			try
			{
				PreparedStatement ps = WebSession.getConnection(s).prepareStatement(query);

				ps.setString(1, employee.getFirstName().toLowerCase());</Snippet>
                            </Primary>
                        </Issue>
                        <Issue ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57" iid="B89C6E51C5549D303051AB4FFC873D4D">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 130 of ListStaff.java, the method getAllEmployees_BACKUP() invokes a SQL query built using potentially unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ListStaff.java</FileName>
<FilePath>lessons/SQLInjection/ListStaff.java</FilePath>
<LineStart>130</LineStart>
<Snippet>				Statement answer_statement = WebSession.getConnection(s)
						.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
				ResultSet answer_results = answer_statement.executeQuery(query);
				answer_results.beforeFirst();
				while (answer_results.next())</Snippet>
                            </Primary>
                        </Issue>
                        <Issue ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57" iid="125AFBB5C27425AA50E71B144AE97786">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 145 of ViewProfile.java, the method getEmployeeProfile_BACKUP() invokes a SQL query built using potentially unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>lessons/CrossSiteScripting/ViewProfile.java</FilePath>
<LineStart>145</LineStart>
<Snippet>				Statement answer_statement = WebSession.getConnection(s)
						.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
				ResultSet answer_results = answer_statement.executeQuery(query);
				if (answer_results.next())
				{</Snippet>
                            </Primary>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="722C045E93DFA161A8B0B9F3C11E00B5">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 221 of Challenge2Screen.java, the method doStage2() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Challenge2Screen.java</FileName>
<FilePath>lessons/Challenge2Screen.java</FilePath>
<LineStart>221</LineStart>
<Snippet>		try
		{
			ResultSet results = statement3.executeQuery(query);

			while (results.next())</Snippet>
                            </Primary>
                            <Source>
<FileName>Challenge2Screen.java</FileName>
<FilePath>lessons/Challenge2Screen.java</FilePath>
<LineStart>793</LineStart>
<Snippet>	protected String getCookie(WebSession s)
	{
		Cookie[] cookies = s.getRequest().getCookies();

		for (int i = 0; i &lt; cookies.length; i++)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="290AE35B54CA1238FC786348AEAD4C6D">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 131 of Login.java, the method login() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Login.java</FileName>
<FilePath>lessons/SQLInjection/Login.java</FilePath>
<LineStart>131</LineStart>
<Snippet>				Statement answer_statement = WebSession.getConnection(s)
						.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
				ResultSet answer_results = answer_statement.executeQuery(query);
				if (answer_results.first())
				{</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="B64CD6CD07E9225DF0B3BE39CC00859C">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 108 of ViewProfile.java, the method getEmployeeProfile() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>108</LineStart>
<Snippet>				Statement answer_statement = WebSession.getConnection(s)
						.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
				ResultSet answer_results = answer_statement.executeQuery(query);
				if (answer_results.next())
				{</Snippet>
                            </Primary>
                            <Source>
<FileName>EditProfile.java</FileName>
<FilePath>lessons/GoatHillsFinancial/EditProfile.java</FilePath>
<LineStart>85</LineStart>
<Snippet>						.prepareStatement(query, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
				answer_statement.setInt(1, subjectUserId);
				ResultSet answer_results = answer_statement.executeQuery();
				if (answer_results.next())
				{</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57" iid="360E3CE77448ED1F01C49BC9140332C0">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 126 of DOS_Login.java, the method createContent() invokes a SQL query built using potentially unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DOS_Login.java</FileName>
<FilePath>lessons/DOS_Login.java</FilePath>
<LineStart>126</LineStart>
<Snippet>						// check the total count of logins
						query = &quot;SELECT * FROM user_login WHERE webgoat_user = '&quot; + s.getUserName() + &quot;'&quot;;
						results = statement.executeQuery(query);
						results.last();
						// If they get back more than one user they succeeded</Snippet>
                            </Primary>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="FE929098BDBCED1E049EDA7D79C3BA13">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 166 of Login.java, the method login_BACKUP() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Login.java</FileName>
<FilePath>lessons/SQLInjection/Login.java</FilePath>
<LineStart>166</LineStart>
<Snippet>				Statement answer_statement = WebSession.getConnection(s)
						.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
				ResultSet answer_results = answer_statement.executeQuery(query);
				if (answer_results.first())
				{</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="609AB6BC75F18101BAF34F183F5F90BB">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 122 of DOS_Login.java, the method createContent() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DOS_Login.java</FileName>
<FilePath>lessons/DOS_Login.java</FilePath>
<LineStart>122</LineStart>
<Snippet>							String insertData1 = &quot;INSERT INTO user_login VALUES ( '&quot; + username + &quot;', '&quot;
									+ s.getUserName() + &quot;' )&quot;;
							statement.executeUpdate(insertData1);
						}
						// check the total count of logins</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="EEFFCFEF830DF2ECF9970515611C4218">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 108 of ViewProfile.java, the method getEmployeeProfile() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>108</LineStart>
<Snippet>				Statement answer_statement = WebSession.getConnection(s)
						.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
				ResultSet answer_results = answer_statement.executeQuery(query);
				if (answer_results.next())
				{</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>674</LineStart>
<Snippet>	public String getStringParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);
		String value;
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="EA9FE3EDAAC140D747F1EBCEB9F7F6CA">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 108 of ViewProfile.java, the method getEmployeeProfile() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>108</LineStart>
<Snippet>				Statement answer_statement = WebSession.getConnection(s)
						.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
				ResultSet answer_results = answer_statement.executeQuery(query);
				if (answer_results.next())
				{</Snippet>
                            </Primary>
                            <Source>
<FileName>ViewProfile.java</FileName>
<FilePath>lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>108</LineStart>
<Snippet>				Statement answer_statement = WebSession.getConnection(s)
						.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
				ResultSet answer_results = answer_statement.executeQuery(query);
				if (answer_results.next())
				{</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="AB181F77-DEC9-44BE-A798-47D9CBA60BD0" iid="E9402C24EEFC5F09B4408D8E25528EC8">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 100 of UpdateProfile_i.java, the method createEmployeeProfile() invokes a SQL query built using potentially unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UpdateProfile_i.java</FileName>
<FilePath>lessons/instructor/RoleBasedAccessControl/UpdateProfile_i.java</FilePath>
<LineStart>100</LineStart>
<Snippet>				try
				{
					PreparedStatement ps = WebSession.getConnection(s).prepareStatement(query);

					ps.setString(1, employee.getFirstName().toLowerCase());</Snippet>
                            </Primary>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="ECD88BA59A13D27920D89B9150B55964">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 119 of SqlNumericInjection.java, the method injectableQuery() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SqlNumericInjection.java</FileName>
<FilePath>lessons/SqlNumericInjection.java</FilePath>
<LineStart>119</LineStart>
<Snippet>				Statement statement = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
																	ResultSet.CONCUR_READ_ONLY);
				ResultSet results = statement.executeQuery(query);

				if ((results != null) &amp;&amp; (results.first() == true))</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57" iid="020698A239FA49EE1FF06219B03D0385">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 150 of MaliciousFileExecution.java, the method createContent() invokes a SQL query built using potentially unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>MaliciousFileExecution.java</FileName>
<FilePath>lessons/MaliciousFileExecution.java</FilePath>
<LineStart>150</LineStart>
<Snippet>	    Statement image_statement = connection.createStatement(
				ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
		ResultSet image_results = image_statement.executeQuery(image_query);
		
		if(image_results.next() == false) {</Snippet>
                            </Primary>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="8EA319A66974B1C41258AA5A4221D5D4">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 108 of ViewProfile.java, the method getEmployeeProfile() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>108</LineStart>
<Snippet>				Statement answer_statement = WebSession.getConnection(s)
						.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
				ResultSet answer_results = answer_statement.executeQuery(query);
				if (answer_results.next())
				{</Snippet>
                            </Primary>
                            <Source>
<FileName>HammerHead.java</FileName>
<FilePath>HammerHead.java</FilePath>
<LineStart>174</LineStart>
<Snippet>
			// Redirect the request to our View servlet
			String userAgent = request.getHeader(&quot;user-agent&quot;);
			String clientBrowser = &quot;Not known!&quot;;
			if (userAgent != null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="E38E0F334AA88DFD78863C64FC25B729">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 157 of ViewProfile.java, the method getEmployeeProfile_BACKUP() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>157</LineStart>
<Snippet>				Statement answer_statement = WebSession.getConnection(s)
						.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
				ResultSet answer_results = answer_statement.executeQuery(query);
				if (answer_results.next())
				{</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57" iid="4B43C1C4D3D99D2A7DFE1A2192D7A6AB">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 638 of AbstractLesson.java, the method isAuthorized() invokes a SQL query built using potentially unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>AbstractLesson.java</FileName>
<FilePath>lessons/AbstractLesson.java</FilePath>
<LineStart>638</LineStart>
<Snippet>				Statement answer_statement = WebSession.getConnection(s)
						.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
				ResultSet answer_results = answer_statement.executeQuery(query);
				authorized = answer_results.first();
			} catch (SQLException sqle)</Snippet>
                            </Primary>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="818A1C7DBAC6E35C83E6EB830FDC0606">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 108 of ViewProfile.java, the method getEmployeeProfile() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>108</LineStart>
<Snippet>				Statement answer_statement = WebSession.getConnection(s)
						.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
				ResultSet answer_results = answer_statement.executeQuery(query);
				if (answer_results.next())
				{</Snippet>
                            </Primary>
                            <Source>
<FileName>ViewProfile_i.java</FileName>
<FilePath>lessons/instructor/SQLInjection/ViewProfile_i.java</FilePath>
<LineStart>69</LineStart>
<Snippet>				answer_statement.setInt(1, Integer.parseInt(userId)); // STAGE 4 - FIX
				answer_statement.setInt(2, Integer.parseInt(subjectUserId)); // STAGE 4 - FIX
				ResultSet answer_results = answer_statement.executeQuery(); // STAGE 4 - FIX
				if (answer_results.next())
				{</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57" iid="3B9CAEDBA3EF988863E7FA1E4EDE4143">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 127 of DeleteProfile.java, the method deleteEmployeeProfile_BACKUP() invokes a SQL query built using potentially unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DeleteProfile.java</FileName>
<FilePath>lessons/RoleBasedAccessControl/DeleteProfile.java</FilePath>
<LineStart>127</LineStart>
<Snippet>				Statement statement = WebSession.getConnection(s).createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
																					ResultSet.CONCUR_READ_ONLY);
				statement.executeUpdate(query);
			} catch (SQLException sqle)
			{</Snippet>
                            </Primary>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="2636332ACE18588AF8D2FAAD06436683">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 98 of ThreadSafetyProblem.java, the method createContent() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ThreadSafetyProblem.java</FileName>
<FilePath>lessons/ThreadSafetyProblem.java</FilePath>
<LineStart>98</LineStart>
<Snippet>				Statement statement = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
																	ResultSet.CONCUR_READ_ONLY);
				ResultSet results = statement.executeQuery(query);

				if ((results != null) &amp;&amp; (results.first() == true))</Snippet>
                            </Primary>
                            <Source>
<FileName>ParameterParser.java</FileName>
<FilePath>session/ParameterParser.java</FilePath>
<LineStart>615</LineStart>
<Snippet>	public String getRawParameter(String name) throws ParameterNotFoundException
	{
		String[] values = request.getParameterValues(name);

		if (values == null)</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="29B7DA27E9AD2D62000BEA02B5EC3A30">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 471 of MaliciousFileExecution.java, the method handleRequest() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>MaliciousFileExecution.java</FileName>
<FilePath>lessons/MaliciousFileExecution.java</FilePath>
<LineStart>471</LineStart>
<Snippet>					        
					        System.out.println(&quot;Inserting row:\n&quot; + insertData1 );
					    	statement.executeUpdate(insertData1);
					    	
				    	}</Snippet>
                            </Primary>
                            <Source>
<FileName>MaliciousFileExecution.java</FileName>
<FilePath>lessons/MaliciousFileExecution.java</FilePath>
<LineStart>421</LineStart>
<Snippet>			
//			 Parse the request
			List /* FileItem */ items = upload.parseRequest(s.getRequest());
			
//			 Process the uploaded items</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="F2DCCE1EC9FF161E527800B7B8D13085">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 108 of ViewProfile.java, the method getEmployeeProfile() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>108</LineStart>
<Snippet>				Statement answer_statement = WebSession.getConnection(s)
						.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
				ResultSet answer_results = answer_statement.executeQuery(query);
				if (answer_results.next())
				{</Snippet>
                            </Primary>
                            <Source>
<FileName>ListStaff.java</FileName>
<FilePath>lessons/SQLInjection/ListStaff.java</FilePath>
<LineStart>89</LineStart>
<Snippet>				Statement answer_statement = WebSession.getConnection(s)
						.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
				ResultSet answer_results = answer_statement.executeQuery(query);
				answer_results.beforeFirst();
				while (answer_results.next())</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="38428A284F89B272F75A3193587BE841">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 108 of ViewProfile.java, the method getEmployeeProfile() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>lessons/SQLInjection/ViewProfile.java</FilePath>
<LineStart>108</LineStart>
<Snippet>				Statement answer_statement = WebSession.getConnection(s)
						.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
				ResultSet answer_results = answer_statement.executeQuery(query);
				if (answer_results.next())
				{</Snippet>
                            </Primary>
                            <Source>
<FileName>Controller.java</FileName>
<FilePath>servlets/Controller.java</FilePath>
<LineStart>58</LineStart>
<Snippet>	{

		String userAgent = request.getHeader(&quot;user-agent&quot;);

		String clientBrowser = &quot;Not known!&quot;;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57" iid="F88C48ED63341D13C54050C71557B4B7">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 161 of ViewProfile.java, the method getEmployeeProfile_BACKUP() invokes a SQL query built using potentially unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ViewProfile.java</FileName>
<FilePath>lessons/RoleBasedAccessControl/ViewProfile.java</FilePath>
<LineStart>161</LineStart>
<Snippet>				Statement answer_statement = WebSession.getConnection(s)
						.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
				ResultSet answer_results = answer_statement.executeQuery(query);
				if (answer_results.next())
				{</Snippet>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="7">
                        <groupTitle>&lt;none&gt;</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>After a servlet's output stream has already been committed, it is erroneous to reset the stream buffer or perform any other action that recommits to the stream. Likewise, it is erroneous to call getWriter() after calling getOutputStream or vice versa.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>Forwarding an HttpServletRequest, redirecting an HttpServletResponse, or flushing the servlet's output stream buffer causes the associated stream to commit. Any subsequent buffer resets or stream commits, such as additional flushes or redirects, will result in IllegalStateExceptions.

Furthermore, Java servlets allow data to be written to the response stream using either ServletOutputStream or PrintWriter, but not both. Calling getWriter() after having called getOutputStream(), or vice versa, will also cause an IllegalStateException.



At runtime, an IllegalStateException prevents the response handler from running to completion, effectively dropping the response. This can cause server instability, which is a sign of an improperly implemented servlet.

Example 1: The following code redirects the servlet response after its output stream buffer has been flushed.

public class RedirectServlet extends HttpServlet {
    public void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
        ...
        OutputStream out = res.getOutputStream();
        ...
        // flushes, and thereby commits, the output stream
        out.flush();
        out.close();        // redirecting the response causes an IllegalStateException
        res.sendRedirect(&quot;http://www.acme.com&quot;);
    }
}


Example 2: Conversely, the following code attempts to write to and flush the PrintWriter's buffer after the request has been forwarded.

public class FlushServlet extends HttpServlet {
    public void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
        ...
        // forwards the request, implicitly committing the stream
        getServletConfig().getServletContext().getRequestDispatcher(&quot;/jsp/boom.jsp&quot;).forward(req, res);
        ...

        // IllegalStateException; cannot redirect after forwarding
        res.sendRedirect(&quot;http://www.acme.com/jsp/boomboom.jsp&quot;);

        PrintWriter out = res.getWriter();

        // writing to an already-committed stream will not cause an exception,
        // but will not apply these changes to the final output, either
        out.print(&quot;Writing here does nothing&quot;);

        // IllegalStateException; cannot flush a response's buffer after forwarding the request
        out.flush();
        out.close();
    }
}

        </Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>Ensure that no further changes to the stream are made after it is committed. At best, any further writes to the stream are ineffectual, and any additional commits 
can cause the servlet to throw an IllegalStateException. It is generally good practice to observe these guidelines when possible:

  1. Return immediately after a forward() or sendRedirect.
  2. Avoid calling forward() or sendRedirect() after calling ServletResponse.getWriter() or ServletResponse.getOuputStream().
        </Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>7</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue ruleID="2920248A-E5CA-4446-B269-A541CD7FBCFA" iid="7DDEE365211DEC2314BF78727155C5A4">
                            <Category>Code Correctness: Multiple Stream Commits</Category>
                            <Folder>Low</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>On line 194 of HammerHead.java, the method &lt;a href=&quot;location://HammerHead.java###194###194###0###0&quot;&gt;writeScreen()&lt;/a&gt; is called after the stream has already been committed or obtained.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HammerHead.java</FileName>
<FilePath>HammerHead.java</FilePath>
<LineStart>194</LineStart>
<Snippet>			try
			{
				this.writeScreen(mySession, screen, response);
			} catch (Throwable thr)
			{</Snippet>
                            </Primary>
                        </Issue>
                        <Issue ruleID="3B074389-826B-4DDA-9FEF-05ECD125D1FC" iid="A97731E88128DB0418D3E9407511DF2E">
                            <Category>Code Correctness: Erroneous String Compare</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The method createContent() in XMLInjection.java should compare strings with the equals() method, not == or !=.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>XMLInjection.java</FileName>
<FilePath>lessons/XMLInjection.java</FilePath>
<LineStart>236</LineStart>
<Snippet>		if (s.getParser().getRawParameter(&quot;SUBMIT&quot;, &quot;&quot;) != &quot;&quot;)
		{
			if (s.getParser().getRawParameter(&quot;check1004&quot;, &quot;&quot;) != &quot;&quot;)
			{
				makeSuccess(s);</Snippet>
                            </Primary>
                        </Issue>
                        <Issue ruleID="3B074389-826B-4DDA-9FEF-05ECD125D1FC" iid="A97731E88128DB0418D3E9407511DF2D">
                            <Category>Code Correctness: Erroneous String Compare</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The method createContent() in XMLInjection.java should compare strings with the equals() method, not == or !=.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>XMLInjection.java</FileName>
<FilePath>lessons/XMLInjection.java</FilePath>
<LineStart>234</LineStart>
<Snippet>		ec.addElement(b);

		if (s.getParser().getRawParameter(&quot;SUBMIT&quot;, &quot;&quot;) != &quot;&quot;)
		{
			if (s.getParser().getRawParameter(&quot;check1004&quot;, &quot;&quot;) != &quot;&quot;)</Snippet>
                            </Primary>
                        </Issue>
                        <Issue ruleID="3B074389-826B-4DDA-9FEF-05ECD125D1FC" iid="A97731E88128DB0418D3E9407511DF2F">
                            <Category>Code Correctness: Erroneous String Compare</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The method createContent() in XMLInjection.java should compare strings with the equals() method, not == or !=.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>XMLInjection.java</FileName>
<FilePath>lessons/XMLInjection.java</FilePath>
<LineStart>246</LineStart>
<Snippet>				{

					if (s.getParser().getRawParameter(&quot;check&quot; + i, &quot;&quot;) != &quot;&quot;)
					{
						shipment.append(((Reward) rewardsMap.get(i)).getName() + &quot;&lt;br&gt;&quot;);</Snippet>
                            </Primary>
                        </Issue>
                        <Issue ruleID="2920248A-E5CA-4446-B269-A541CD7FBCFA" iid="521435302F25122E371E2CF15E4B2155">
                            <Category>Code Correctness: Multiple Stream Commits</Category>
                            <Folder>Low</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>On line 184 of HammerHead.java, the method &lt;a href=&quot;location://HammerHead.java###184###184###0###0&quot;&gt;forward()&lt;/a&gt; is called after the stream has already been committed or obtained.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HammerHead.java</FileName>
<FilePath>HammerHead.java</FilePath>
<LineStart>184</LineStart>
<Snippet>			request.getSession().setAttribute(&quot;course&quot;, mySession.getCourse());

			request.getRequestDispatcher(getViewPage(mySession)).forward(request, response);
		} catch (Throwable t)
		{</Snippet>
                            </Primary>
                        </Issue>
                        <Issue ruleID="2920248A-E5CA-4446-B269-A541CD7FBCFA" iid="B627A89B5E3F7A38D81F7B1DC1541966">
                            <Category>Code Correctness: Multiple Stream Commits</Category>
                            <Folder>Low</Folder>
                            <Kingdom>API Abuse</Kingdom>
                            <Abstract>On line 119 of LessonSource.java, the method &lt;a href=&quot;location://LessonSource.java###119###119###0###0&quot;&gt;writeSource()&lt;/a&gt; is called after the stream has already been committed or obtained.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>LessonSource.java</FileName>
<FilePath>LessonSource.java</FilePath>
<LineStart>119</LineStart>
<Snippet>			try
			{
				this.writeSource(source, response);
			} catch (Throwable thr)
			{</Snippet>
                            </Primary>
                        </Issue>
                        <Issue ruleID="3B074389-826B-4DDA-9FEF-05ECD125D1FC" iid="82451BC3C8011EC409D88C464B7EED12">
                            <Category>Code Correctness: Erroneous String Compare</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Code Quality</Kingdom>
                            <Abstract>The method checkParams() in WeakAuthenticationCookie.java should compare strings with the equals() method, not == or !=.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WeakAuthenticationCookie.java</FileName>
<FilePath>lessons/WeakAuthenticationCookie.java</FilePath>
<LineStart>142</LineStart>
<Snippet>			}

			if (loginID != &quot;&quot;)
			{
				Cookie newCookie = new Cookie(AUTHCOOKIE, loginID);</Snippet>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="4">
                        <groupTitle>A9 Insufficient Transport Layer Protection</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>A cookie is created without the secure flag set to true.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>Modern web browsers support a secure flag for each cookie. If the flag is set, the browser will only send the cookie over HTTPS. Sending cookies over an unencrypted channel can expose them to network sniffing attacks, so the secure flag helps keep a cookie's value confidential. This is especially important if the cookie contains private data or carries a session identifier.
  

Example 1: In the example below, a cookie added to the response without setting the secure flag.

	Cookie cookie = new Cookie(&quot;emailCookie&quot;, email);
	response.addCookie(cookie);


If your application uses both HTTPS and HTTP but does not set the secure flag, cookies set during an HTTPS request will also be sent during subsequent HTTP requests. Sniffing network traffic over unencrypted wireless connections is a trivial task for attackers, so sending cookies (especially those with session IDs) over HTTP can result in application compromise.
      </Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>Set the Secure flag on all new cookies in order to instruct browsers not to send these cookies in the clear. This can be done by calling setSecure(true).

Example 2:

	Cookie cookie = new Cookie(&quot;emailCookie&quot;, email);
	cookie.setSecure(true);
	response.addCookie(cookie);

      </Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>4</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue ruleID="AC87E716-8766-4F78-8851-86354C03A13B" iid="C35E841239A860687BE4D44F0A632052">
                            <Category>Cookie Security: Cookie not Sent Over SSL</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>A cookie is created without the secure flag set to true.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Challenge2Screen.java</FileName>
<FilePath>lessons/Challenge2Screen.java</FilePath>
<LineStart>172</LineStart>
<Snippet>
		Cookie newCookie = new Cookie(USER_COOKIE, Encoding.base64Encode(user));
		s.getResponse().addCookie(newCookie);
		phoneHome(s, &quot;User: &quot; + username + &quot; --&gt; &quot; + &quot;Pass: &quot; + password);
		// &lt;END_OMIT_SOURCE&gt;</Snippet>
                            </Primary>
                        </Issue>
                        <Issue ruleID="AC87E716-8766-4F78-8851-86354C03A13B" iid="4D0F3E0D42BC3B7B51921EBC28FC5109">
                            <Category>Cookie Security: Cookie not Sent Over SSL</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>A cookie is created without the secure flag set to true.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WeakAuthenticationCookie.java</FileName>
<FilePath>lessons/WeakAuthenticationCookie.java</FilePath>
<LineStart>146</LineStart>
<Snippet>				Cookie newCookie = new Cookie(AUTHCOOKIE, loginID);
				s.setMessage(WebGoatI18N.get(&quot;IdentityRemembered&quot;));
				s.getResponse().addCookie(newCookie);

				return (username);</Snippet>
                            </Primary>
                        </Issue>
                        <Issue ruleID="AC87E716-8766-4F78-8851-86354C03A13B" iid="2A2549A45BA107BFC46244BD13790B37">
                            <Category>Cookie Security: Cookie not Sent Over SSL</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>A cookie is created without the secure flag set to true.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>WeakSessionID.java</FileName>
<FilePath>lessons/WeakSessionID.java</FilePath>
<LineStart>200</LineStart>
<Snippet>			weakid = newCookie(s);
			Cookie cookie = new Cookie(SESSIONID, weakid);
			s.getResponse().addCookie(cookie);
		}
</Snippet>
                            </Primary>
                        </Issue>
                        <Issue ruleID="AC87E716-8766-4F78-8851-86354C03A13B" iid="76956C6F50A8BB8878A246F1AC419422">
                            <Category>Cookie Security: Cookie not Sent Over SSL</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Security Features</Kingdom>
                            <Abstract>A cookie is created without the secure flag set to true.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>Challenge2Screen.java</FileName>
<FilePath>lessons/Challenge2Screen.java</FilePath>
<LineStart>195</LineStart>
<Snippet>
		Cookie newCookie = new Cookie(USER_COOKIE, Encoding.base64Encode(user));
		s.getResponse().addCookie(newCookie);

		ElementContainer ec = new ElementContainer();</Snippet>
                            </Primary>
                        </Issue>
                    </GroupingSection>
                </Chart>
            </IssueListing>
        </SubSection>
    </ReportSection>
</ReportDefinition>
