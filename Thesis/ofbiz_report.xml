<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--
  Copyright (c) 2012 Bojan Simic.
  All rights reserved. This program and the accompanying materials
  are made available under the terms of the GNU Lesser Public License v2.1
  which accompanies this distribution, and is available at
  http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
  
  Contributors:
      Bojan Simic - initial API and implementation
-->
<ReportDefinition type="xml">
    <TemplateName>OWASP Top Ten 2010</TemplateName>
    <TemplatePath></TemplatePath>
    <LogoPath>/fortify.jpg</LogoPath>
    <Footnote>Copyright 2010 Fortify Software Inc.</Footnote>
    <UserName>simicb</UserName>
    <ReportSection optionalSubsections="false" enabled="true">
        <Title>Report Overview</Title>
        <SubSection enabled="true">
            <Title>Report Summary</Title>
            <Description>This provides a high level summary of the findings that the analysis produced. Also includes basic information on the scope of the scan.</Description>
            <Text>On Jan 10, 2012, a source code review was performed over the ofbiz_java code base. 1,335 files, 156,697 LOC (Executable) were scanned. A total of 1606 issues were uncovered during the analysis. This report provides a comprehensive description of all the types of OWASP Top Ten 2010 issues found in this project. Specific examples and source code are provided for each issue type.</Text>
        </SubSection>
        <SubSection enabled="true">
            <Title>Issue Summary</Title>
            <Description>A table summarizing the number of issues found and the breakdown of issues in each OWASP Top Ten 2010 category</Description>
            <IssueListing limit="-1" listing="false">
                <Refinement></Refinement>
                <Chart chartType="table">
                    <Axis>OWASP Top Ten 2010</Axis>
                    <MajorAttribute>Analysis</MajorAttribute>
                    <GroupingSection count="869">
                        <groupTitle>A2 Cross-Site Scripting (XSS)</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="737">
                        <groupTitle>A1 Injection</groupTitle>
                    </GroupingSection>
                </Chart>
            </IssueListing>
        </SubSection>
    </ReportSection>
    <ReportSection optionalSubsections="true" enabled="true">
        <Title>Issue Breakdown by OWASP Top Ten 2010</Title>
        <SubSection enabled="true">
            <Title>Issue Breakdown by OWASP Top Ten 2010</Title>
            <IssueListing limit="-1" listing="false">
                <Refinement></Refinement>
                <Chart chartType="pie">
                    <Axis>OWASP Top Ten 2010</Axis>
                    <MajorAttribute>Analysis</MajorAttribute>
                    <GroupingSection count="869">
                        <groupTitle>A2 Cross-Site Scripting (XSS)</groupTitle>
                    </GroupingSection>
                    <GroupingSection count="737">
                        <groupTitle>A1 Injection</groupTitle>
                    </GroupingSection>
                </Chart>
            </IssueListing>
        </SubSection>
    </ReportSection>
    <ReportSection optionalSubsections="true" enabled="true">
        <Title>Results Outline</Title>
        <SubSection enabled="true">
            <Title>Vulnerabilties By OWASP Top Ten 2010</Title>
            <Description>Results by OWASP Top Ten 2010</Description>
            <IssueListing limit="-1" listing="true">
                <Refinement>[OWASP Top Ten 2010]:!Not Covered</Refinement>
                <Chart chartType="list">
                    <Axis>OWASP Top Ten 2010</Axis>
                    <MajorAttribute>Analysis</MajorAttribute>
                    <GroupingSection count="869">
                        <groupTitle>A2 Cross-Site Scripting (XSS)</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>Sending unvalidated data to a web browser can result in the browser executing malicious code.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>Cross-site scripting (XSS) vulnerabilities occur when:

1. Data enters a web application through an untrusted source. In the case of Persistent (also known as Stored) XSS, the untrusted source is typically a database or other back-end datastore, while in the case of Reflected XSS it is typically a web request.


2. The data is included in dynamic content that is sent to a web user without being validated for malicious code. 

The malicious content sent to the web browser often takes the form of a segment of JavaScript, but may also include HTML, Flash or any other type of code that the browser may execute. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data like cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.

Example 1: The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name.

 
&lt;%... 
 Statement stmt = conn.createStatement();
 ResultSet rs = stmt.executeQuery(&quot;select * from emp where id=&quot;+eid);
 if (rs != null) {
  rs.next(); 
  String name = rs.getString(&quot;name&quot;);
%&gt;

Employee Name: &lt;%= name %&gt;


This code functions correctly when the values of name are well-behaved, but it does nothing to prevent exploits if they are not. This code can appear less dangerous because the value of name is read from a database, whose contents are apparently managed by the application. However, if the value of name originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker can execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it more difficult to identify the threat and increases the possibility that the attack will affect multiple users. XSS got its start in this form with web sites that offered a &quot;guestbook&quot; to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code.

Example 2: The following JSP code segment reads an employee ID, eid, from an HTTP request and displays it to the user. 


&lt;% String eid = request.getParameter(&quot;eid&quot;); %&gt; 
...
Employee ID: &lt;%= eid %&gt;


As in Example 1, this code operates correctly if eid contains only standard alphanumeric text. If eid has a value that includes meta-characters or source code, then the code will be executed by the web browser as it displays the HTTP response.

Initially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use e-mail or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS.

As the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim:

- As in Example 1, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user.

- As in Example 2, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that may include session information, from the user's machine to the attacker or perform other nefarious activities.

- A source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>The solution to XSS is to ensure that validation occurs in the correct places and checks for the correct properties.

Since XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS.

Web applications must validate their input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application may accept input through a shared data store or other trusted source, and that data store may accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means the best way to prevent XSS vulnerabilities is to validate everything that enters the application or leaves the application destined for the user. 

The most secure approach to validation for XSS is to create a whitelist of safe characters that are allowed to appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alpha-numeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser should still be considered valid input once they are encoded, such as a web design bulletin board that must accept HTML fragments from its users. 

A more flexible, but less secure approach is known as blacklisting, which selectively rejects or escapes potentially dangerous characters before using the input. In order to form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines what characters have special meaning, many web browsers try to correct common mistakes in HTML and may treat other characters as special in certain contexts. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]:

In the content of a block-level element (in the middle of a paragraph of text):

- &quot;&lt;&quot; is special because it introduces a tag.

- &quot;&amp;&quot; is special because it introduces a character entity.

- &quot;&gt;&quot; is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening &quot;&lt;&quot;, but omitted it in error.

The following principles apply to attribute values:

- In attribute values enclosed with double quotes, the double quotes are special because they mark the end of the attribute value.

- In attribute values enclosed with single quote, the single quotes are special because they mark the end of the attribute value.

- In attribute values without any quotes, white-space characters, such as space and tab, are special.

- &quot;&amp;&quot; is special when used with certain attributes, because it introduces a character entity. 

In URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters:

- Space, tab, and new line are special because they mark the end of the URL.

- &quot;&amp;&quot; is special because it either introduces a character entity or separates CGI parameters.

- Non-ASCII characters (that is, everything above 128 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context.

- The &quot;%&quot; symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, &quot;%&quot; must be filtered if input such as &quot;%68%65%6C%6C%6F&quot; becomes &quot;hello&quot; when it appears on the web page in question.


Within the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;:

- The semicolon, parenthesis, curly braces, and new line should be filtered in situations where text could be inserted directly into a pre-existing script tag. 

Server-side scripts:

- Server-side scripts that convert any exclamation characters (!) in input to double-quote characters (&quot;) on output might require additional filtering. 

Other possibilities:

- If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and may bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7).

Once you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option in this situation is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and may be unacceptable in circumstances where the integrity of the input must be preserved for display.

If input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2].

Many application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. When an application is developed there are no guarantees about what application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will also stay in sync.</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. The HP Fortify Secure Coding Rulepacks treat the database as a source of untrusted data, which can lead to XSS vulnerabilities. If the database is a trusted resource in your environment, use custom filters to filter out dataflow issues that include the DATABASE taint flag or originate from database sources.

2. Even though URL encoding untrusted data protects against many XSS attacks, some browsers (specifically, Internet Explorer 6 and 7 and possibly others) automatically decode content at certain locations within the Document Object Model (DOM) prior to passing it to the JavaScript interpreter. To reflect this danger, the rulepacks no longer treat URL encoding routines as sufficient to protect against Cross-Site Scripting. Data values that are URL encoded and subsequently output will cause Fortify to report Cross-Site Scripting: Poor Validation vulnerabilities.

3. A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Struts 2 are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by HP Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HP Fortify user with the auditing process, the Fortify Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.

4. Fortify RTA adds protection against this category.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>869</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="4D7174CA67563C0EC7F70F0C35E67A07">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>127</LineStart>
<Snippet>
            Object value = null;
            String[] paramArr = request.getParameterValues(name);
            if (paramArr != null) {
                if (paramArr.length &gt; 1) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="8CBB39187466D76E3257CB047B28AF35">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1535</LineStart>
<Snippet>
        // TODO: re-factor and move this inside the ShoppingCart constructor
        String orderMode = request.getParameter(&quot;orderMode&quot;);
        if (orderMode != null) {
            cart.setOrderType(orderMode);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="63C3EC7806AB4085C23038DAEE96E048">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>693</LineStart>
<Snippet>            return &quot;error&quot;;
        }
        String orderId = request.getParameter(&quot;orderId_o_0&quot;);
        // set the order id if supplied
        if (UtilValidate.isNotEmpty(orderId)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF" iid="03CB8A844ADA6FEBD08AFE83D5A0DC27">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doEndTag() in UrlTag.java sends unvalidated data to a web browser on line 57, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>UrlTag.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/taglib/UrlTag.java</FilePath>
<LineStart>57</LineStart>
<Snippet>
        try {
            getPreviousOut().print(newURL);
        } catch (IOException e) {
            if (UtilJ2eeCompat.useNestedJspException(pageContext.getServletContext())) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>119</LineStart>
<Snippet>            contentRevisionMap.put(&quot;contentId&quot;, contentId);
            contentRevisionMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentRevisionAndItem&quot;, contentRevisionMap);
            keySet = result.keySet();
            iter = keySet.iterator();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="58C35F5EAEAA6E02F835DBA6953411DB">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>WebPosEvents.java</FileName>
<FilePath>specialpurpose/webpos/src/org/ofbiz/webpos/WebPosEvents.java</FilePath>
<LineStart>58</LineStart>
<Snippet>        
        // get the posTerminalId
        String posTerminalId = (String) request.getParameter(&quot;posTerminalId&quot;);
        session.removeAttribute(&quot;shoppingCart&quot;);
        session.removeAttribute(&quot;webPosSession&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="86A5745CC95E9A923B840C231149A1B3">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>558</LineStart>
<Snippet>        session.setAttribute(&quot;_CLIENT_LOCALE_&quot;, request.getLocale());
        session.setAttribute(&quot;_CLIENT_REQUEST_&quot;, fullRequestUrl.toString());
        session.setAttribute(&quot;_CLIENT_USER_AGENT_&quot;, request.getHeader(&quot;User-Agent&quot;) != null ? request.getHeader(&quot;User-Agent&quot;) : &quot;&quot;);
        session.setAttribute(&quot;_CLIENT_REFERER_&quot;, request.getHeader(&quot;Referer&quot;) != null ? request.getHeader(&quot;Referer&quot;) : &quot;&quot;);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF" iid="34980B7AF05F226C2F9F8E6B9575F60D">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doEndTag() in UrlTag.java sends unvalidated data to a web browser on line 57, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>UrlTag.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/taglib/UrlTag.java</FilePath>
<LineStart>57</LineStart>
<Snippet>
        try {
            getPreviousOut().print(newURL);
        } catch (IOException e) {
            if (UtilJ2eeCompat.useNestedJspException(pageContext.getServletContext())) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceEventHandler.java</FilePath>
<LineStart>337</LineStart>
<Snippet>                dispatcher.runAsync(serviceName, serviceContext);
            } else {
                result = dispatcher.runSync(serviceName, serviceContext);
            }
        } catch (ServiceAuthException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="7F2C23DFC3DF1CC07D3F0AA575835AE4">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>LoginWorker.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/LoginWorker.java</FilePath>
<LineStart>264</LineStart>
<Snippet>
                // keep the previous request name in the session
                session.setAttribute(&quot;_PREVIOUS_REQUEST_&quot;, request.getPathInfo());

                // NOTE: not using the old _PREVIOUS_PARAMS_ attribute at all because it was a security hole as it was used to put data in the URL (never encrypted) that was originally in a form field that may have been encrypted</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="B879739C872483F7410997139CC61F6C">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method toJsonObjectList() in EbayStoreOptions.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>EbayStoreOptions.java</FileName>
<FilePath>specialpurpose/ebaystore/src/org/ofbiz/ebaystore/EbayStoreOptions.java</FilePath>
<LineStart>273</LineStart>
<Snippet>            try {
                out = response.getWriter();
                out.write(jsonStr);
                out.flush();
            } catch (IOException e) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>575</LineStart>
<Snippet>        while (e.hasMoreElements()) {
            String name = e.nextElement();
            request.setAttribute(name, request.getParameter(name));
        }
    }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="587C6B0EE77B885F0272B912B8CA9B34">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method openEditWrap() in RenderContentAsText.java sends unvalidated data to a web browser on line 224, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>RenderContentAsText.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderContentAsText.java</FilePath>
<LineStart>224</LineStart>
<Snippet>            public void openEditWrap(Writer out, String editStyle) throws IOException {
                String divStr = &quot;&lt;div class=\&quot;&quot; + editStyle + &quot;\&quot;&gt;&quot;;
                out.write(divStr);
            }
</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceMultiEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceMultiEventHandler.java</FilePath>
<LineStart>308</LineStart>
<Snippet>                Map&lt;String, Object&gt; result = null;
                try {
                    result = dispatcher.runSync(serviceName, serviceContext);
                } catch (ServiceAuthException e) {
                    // not logging since the service engine already did</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="EEC022883779239A19E945F9CD2D9884">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>CheckOutEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/CheckOutEvents.java</FilePath>
<LineStart>131</LineStart>
<Snippet>            if (UtilValidate.isNotEmpty(taxAuthPartyGeoIds)) {
                try {
                    Map&lt;String, ? extends Object&gt; createCustomerTaxAuthInfoResult = dispatcher.runSync(&quot;createCustomerTaxAuthInfo&quot;,
                            UtilMisc.&lt;String, Object&gt;toMap(&quot;partyId&quot;, cart.getPartyId(), &quot;taxAuthPartyGeoIds&quot;, taxAuthPartyGeoIds, &quot;partyTaxId&quot;, partyTaxId, &quot;isExempt&quot;, isExempt, &quot;userLogin&quot;, userLogin));
                    ServiceUtil.getMessages(request, createCustomerTaxAuthInfoResult, null);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1C85B63C-0870-45B8-9909-86BA43F68B05" iid="2E2574A369FBA061A5D00656E3A5BE1D">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method closeEditWrap() in RenderContentTransform.java sends unvalidated data to a web browser on line 144, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>RenderContentTransform.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderContentTransform.java</FilePath>
<LineStart>144</LineStart>
<Snippet>                ServletContext servletContext = request.getSession().getServletContext();
                RequestHandler rh = (RequestHandler) servletContext.getAttribute(&quot;_REQUEST_HANDLER_&quot;);
                out.append(rh.makeLink(request, response, &quot;/&quot; + fullRequest, false, false, true));
                out.write(&quot;\&quot;&gt;Edit&lt;/a&gt;&quot;);
                out.write(&quot;&lt;/div&gt;&quot;);</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>505</LineStart>
<Snippet>        Map&lt;String, Object&gt; ftlResults = null;
        try {
            ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
        } catch (ServiceAuthException e) {
            String msg = e.getMessage();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="C9C7ED8E24E984CA2CD8E2B3441DEE4A">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>LoginEvents.java</FileName>
<FilePath>applications/securityext/src/org/ofbiz/securityext/login/LoginEvents.java</FilePath>
<LineStart>76</LineStart>
<Snippet>        if (userLogin == null) {

            String username = request.getParameter(&quot;USERNAME&quot;);
            String password = request.getParameter(&quot;PASSWORD&quot;);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="AEFAA2AE08E2F4B2F99C1D15C4ED8BB8">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 130, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>130</LineStart>
<Snippet>        }
        checkAfterNewline();
        super.write(s, offset, i - offset);
    }
}</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1354</LineStart>
<Snippet>        ShoppingCart cart = null;
        try {
            Map&lt;String, Object&gt; outMap = dispatcher.runSync(&quot;loadCartFromQuote&quot;,
                    UtilMisc.&lt;String, Object&gt;toMap(&quot;quoteId&quot;, quoteId,
                            &quot;applyQuoteAdjustments&quot;, &quot;true&quot;,</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="A87F13A8E24C0A97F342C74D3C0952A8">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>DataEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/data/DataEvents.java</FilePath>
<LineStart>136</LineStart>
<Snippet>            Map&lt;String, Object&gt; permSvcResp;
            try {
                permSvcResp = dispatcher.runSync(permissionService, permSvcCtx);
            } catch (GenericServiceException e) {
                Debug.logError(e, module);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="D027DAA9-A3BE-49E4-BDBF-3DFF657F84CA" iid="B1EBA59DBE4310B0B21B24404FB1DEF5">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>262</LineStart>
<Snippet>        if (UtilValidate.isEmpty(imageName) || UtilValidate.isEmpty(imageData)) {
            session.setAttribute(&quot;frameContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
            session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;There is no frame image, please select the image type *.PNG  uploading.&quot;);
            return &quot;error&quot;;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="D027DAA9-A3BE-49E4-BDBF-3DFF657F84CA" iid="EA43AF8C81C895C762C839100C98503E">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>267</LineStart>
<Snippet>        }
        if (!&quot;image/png&quot;.equals(mimType)) {
            session.setAttribute(&quot;frameContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
            session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;The selected image type is incorrect, please select the image type *.PNG to upload.&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="987243D19793D1708F50DFBFFBFF8D98">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 115, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>115</LineStart>
<Snippet>    @Override
    public void write(String s) throws IOException {
        write(s, 0, s.length());
    }
</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>575</LineStart>
<Snippet>        while (e.hasMoreElements()) {
            String name = e.nextElement();
            request.setAttribute(name, request.getParameter(name));
        }
    }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="6962B502597E7B7BCA39F94F050B2080">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CatalogUrlServlet.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/category/CatalogUrlServlet.java</FilePath>
<LineStart>80</LineStart>
<Snippet>        Delegator delegator = (Delegator) getServletContext().getAttribute(&quot;delegator&quot;);

        String pathInfo = request.getPathInfo();
        List&lt;String&gt; pathElements = StringUtil.split(pathInfo, &quot;/&quot;);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="5BC179F632898FAFF9F51776BE0B7F2A">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>221</LineStart>
<Snippet>                sumContext.put(&quot;mapKey&quot;, &quot;SUMMARY&quot;);
                sumContext.put(&quot;dataTemplateTypeId&quot;, &quot;NONE&quot;);
                Map&lt;String, Object&gt; sumResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, sumContext);
                isError = ModelService.RESPOND_ERROR.equals(sumResults.get(ModelService.RESPONSE_MESSAGE));
                if (isError) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="380CC04C802F929F7D0A6B9A40846394">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>182</LineStart>
<Snippet>                }
                if (UtilValidate.isNotEmpty(map.get(&quot;contentAssocTypeId&quot;))) {
                    ftlResults = dispatcher.runSync(&quot;createContentAssoc&quot;, map);
                    isError = ModelService.RESPOND_ERROR.equals(ftlResults.get(ModelService.RESPONSE_MESSAGE));
                    if (isError) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="75CA7134-B6BE-444A-9815-E739432FCA47" iid="C5500C7896DE4D2AB28E457537059450">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method run() in EntityField.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>EntityField.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/pseudotag/EntityField.java</FilePath>
<LineStart>249</LineStart>
<Snippet>            if (prefix != null)
                out.print(prefix);
            out.print(fieldString);
            if (suffix != null)
                out.print(suffix);</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>119</LineStart>
<Snippet>            contentRevisionMap.put(&quot;contentId&quot;, contentId);
            contentRevisionMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentRevisionAndItem&quot;, contentRevisionMap);
            keySet = result.keySet();
            iter = keySet.iterator();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="A0FB81C844FCDA43E354B9724F90FDCE">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1527</LineStart>
<Snippet>        Locale locale = UtilHttp.getLocale(request);

        String productStoreId = request.getParameter(&quot;productStoreId&quot;);

        if (UtilValidate.isNotEmpty(productStoreId)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="48DF6764AAB7576C2348A83E40585D67">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1499</LineStart>
<Snippet>        String custRequestId = null;
        try {
            result = dispatcher.runSync(&quot;createCustRequestFromCart&quot;,
                    UtilMisc.toMap(&quot;cart&quot;, cart,
                            &quot;userLogin&quot;, userLogin));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="6D2F2DF723A95B91D78B8E0E966CD8E3">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>WebPosEvents.java</FileName>
<FilePath>specialpurpose/webpos/src/org/ofbiz/webpos/WebPosEvents.java</FilePath>
<LineStart>58</LineStart>
<Snippet>        
        // get the posTerminalId
        String posTerminalId = (String) request.getParameter(&quot;posTerminalId&quot;);
        session.removeAttribute(&quot;shoppingCart&quot;);
        session.removeAttribute(&quot;webPosSession&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="B0A69E5CC7B6B288C17CBBB9615CF106">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>150</LineStart>
<Snippet>            String contentAssocTypeId = (String)passedParams.get(&quot;contentAssocTypeId&quot;);
            ftlContext.put(&quot;contentAssocTypeId&quot;, null); // Don't post assoc at this time
            Map&lt;String, Object&gt; ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
            boolean isError = ModelService.RESPOND_ERROR.equals(ftlResults.get(ModelService.RESPONSE_MESSAGE));
            if (isError) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="B7BDDDA0D6878AB83E615877CB56DF7B">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 130, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>130</LineStart>
<Snippet>        }
        checkAfterNewline();
        super.write(s, offset, i - offset);
    }
}</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1388</LineStart>
<Snippet>        ShoppingCart cart = null;
        try {
            Map&lt;String, Object&gt; outMap = dispatcher.runSync(&quot;loadCartFromOrder&quot;,
                                                UtilMisc.&lt;String, Object&gt;toMap(&quot;orderId&quot;, orderId,
                                                        &quot;skipProductChecks&quot;, Boolean.TRUE, // the products have already been checked in the order, no need to check their validity again</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="D8BF78E9AA4278C74A8CCFD55DF7B6AA">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 130, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>130</LineStart>
<Snippet>        }
        checkAfterNewline();
        super.write(s, offset, i - offset);
    }
}</Snippet>
                            </Primary>
                            <Source>
<FileName>CommonEvents.java</FileName>
<FilePath>framework/common/src/org/ofbiz/common/CommonEvents.java</FilePath>
<LineStart>231</LineStart>
<Snippet>    /** Simple event to set the users per-session currency uom value */
    public static String setSessionCurrencyUom(HttpServletRequest request, HttpServletResponse response) {
        String currencyUom = request.getParameter(&quot;currencyUom&quot;);
        if (UtilValidate.isNotEmpty(currencyUom)) {
            // update the session</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="D4EEBFE662863DDF14F2C1C83EE9C1E3">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 124, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>124</LineStart>
<Snippet>            if (s.charAt(i) == '\n') {
                checkAfterNewline();
                super.write(s, offset, i - offset + 1);
                offset = i + 1;
                lastWasNewline = true;</Snippet>
                            </Primary>
                            <Source>
<FileName>RequestHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/RequestHandler.java</FilePath>
<LineStart>128</LineStart>
<Snippet>        }

        String overrideViewUri = RequestHandler.getOverrideViewUri(request.getPathInfo());

        String requestMissingErrorMessage = &quot;Unknown request [&quot; + defaultRequestUri + &quot;]; this request does not exist or cannot be called directly.&quot;;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="C0CB22B3A09093C8C068E6517AF8E04A">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 130, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>130</LineStart>
<Snippet>        }
        checkAfterNewline();
        super.write(s, offset, i - offset);
    }
}</Snippet>
                            </Primary>
                            <Source>
<FileName>ICalConverter.java</FileName>
<FilePath>applications/workeffort/src/org/ofbiz/workeffort/workeffort/ICalConverter.java</FilePath>
<LineStart>491</LineStart>
<Snippet>        localMap.put(&quot;locale&quot;, context.get(&quot;locale&quot;));
        try {
            return dispatcher.runSync(serviceName, localMap);
        } catch (GenericServiceException e) {
            String errMsg = &quot;Error while invoking service &quot; + serviceName + &quot;: &quot;;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="08B498FAFB4CA632A6CFA84FEDCBC43D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>GenericWebEvent.java</FileName>
<FilePath>framework/webtools/src/org/ofbiz/webtools/GenericWebEvent.java</FilePath>
<LineStart>135</LineStart>
<Snippet>            }

            String fval = request.getParameter(field.getName());
            if (UtilValidate.isNotEmpty(fval)) {
                try {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="6A9734891CBDD59EC406C446F187EC76">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>ICalWorker.java</FileName>
<FilePath>applications/workeffort/src/org/ofbiz/workeffort/workeffort/ICalWorker.java</FilePath>
<LineStart>285</LineStart>
<Snippet>        HttpSession session = request.getSession();
        LocalDispatcher dispatcher = (LocalDispatcher) request.getAttribute(&quot;dispatcher&quot;);
        Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;userLogin&quot;, serviceMap);
        if (ServiceUtil.isError(result) || ServiceUtil.isFailure(result)) {
            return;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="BAE3DDD93F42C1EC1652BB03A497F2AA">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>TrackingCodeEvents.java</FileName>
<FilePath>applications/marketing/src/org/ofbiz/marketing/tracking/TrackingCodeEvents.java</FilePath>
<LineStart>371</LineStart>
<Snippet>        java.sql.Timestamp nowStamp = UtilDateTime.nowTimestamp();

        String trackingCodeId = request.getParameter(&quot;autoTrackingCode&quot;);
        if (UtilValidate.isEmpty(trackingCodeId)) trackingCodeId = request.getParameter(&quot;atc&quot;);
        if (UtilValidate.isEmpty(trackingCodeId)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="D027DAA9-A3BE-49E4-BDBF-3DFF657F84CA" iid="A5D0FBFC3E90D0FF03828F4E812BA9F6">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>403</LineStart>
<Snippet>            if (UtilValidate.isNotEmpty(request.getParameter(&quot;frameExistContentId&quot;)) &amp;&amp; UtilValidate.isNotEmpty(request.getParameter(&quot;frameExistDataResourceId&quot;))) {
                session.setAttribute(&quot;frameExistContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
                session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            }
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;Required frame image content ID&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="3FD3EB45DCBF8690196AF4C78D43296F">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>150</LineStart>
<Snippet>            String contentAssocTypeId = (String)passedParams.get(&quot;contentAssocTypeId&quot;);
            ftlContext.put(&quot;contentAssocTypeId&quot;, null); // Don't post assoc at this time
            Map&lt;String, Object&gt; ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
            boolean isError = ModelService.RESPOND_ERROR.equals(ftlResults.get(ModelService.RESPONSE_MESSAGE));
            if (isError) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="C7A316D07A4EA9DCA99B8A4925C91290">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 124, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>124</LineStart>
<Snippet>            if (s.charAt(i) == '\n') {
                checkAfterNewline();
                super.write(s, offset, i - offset + 1);
                offset = i + 1;
                lastWasNewline = true;</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>184</LineStart>
<Snippet>
    public static Map&lt;String, Object&gt; getPathInfoOnlyParameterMap(HttpServletRequest request, Set&lt;? extends String&gt; nameSet, Boolean onlyIncludeOrSkip) {
        return getPathInfoOnlyParameterMap(request.getPathInfo(), nameSet, onlyIncludeOrSkip);
    }
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="755A14B9CE1C3B78EA95C6E2E0428E57">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 124, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>124</LineStart>
<Snippet>            if (s.charAt(i) == '\n') {
                checkAfterNewline();
                super.write(s, offset, i - offset + 1);
                offset = i + 1;
                lastWasNewline = true;</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1388</LineStart>
<Snippet>        ShoppingCart cart = null;
        try {
            Map&lt;String, Object&gt; outMap = dispatcher.runSync(&quot;loadCartFromOrder&quot;,
                                                UtilMisc.&lt;String, Object&gt;toMap(&quot;orderId&quot;, orderId,
                                                        &quot;skipProductChecks&quot;, Boolean.TRUE, // the products have already been checked in the order, no need to check their validity again</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="4C2D13101001EB89A0AE0FC25036D6F7">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 130, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>130</LineStart>
<Snippet>        }
        checkAfterNewline();
        super.write(s, offset, i - offset);
    }
}</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>561</LineStart>
<Snippet>        session.setAttribute(&quot;_CLIENT_REFERER_&quot;, request.getHeader(&quot;Referer&quot;) != null ? request.getHeader(&quot;Referer&quot;) : &quot;&quot;);

        session.setAttribute(&quot;_CLIENT_FORWARDED_FOR_&quot;, request.getHeader(&quot;X-Forwarded-For&quot;));
        session.setAttribute(&quot;_CLIENT_REMOTE_ADDR_&quot;, request.getRemoteAddr());
        session.setAttribute(&quot;_CLIENT_REMOTE_HOST_&quot;, request.getRemoteHost());</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="8473B3DCD1AFC869E9F15D34C29AB4EE">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method openEditWrap() in RenderSubContentAsText.java sends unvalidated data to a web browser on line 204, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>RenderSubContentAsText.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderSubContentAsText.java</FilePath>
<LineStart>204</LineStart>
<Snippet>
                String divStr = &quot;&lt;div class=\&quot;&quot; + editStyle + &quot;\&quot;&gt;&quot;;
                out.write(divStr);
            }
</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceMultiEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceMultiEventHandler.java</FilePath>
<LineStart>308</LineStart>
<Snippet>                Map&lt;String, Object&gt; result = null;
                try {
                    result = dispatcher.runSync(serviceName, serviceContext);
                } catch (ServiceAuthException e) {
                    // not logging since the service engine already did</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="D027DAA9-A3BE-49E4-BDBF-3DFF657F84CA" iid="94A33C7CADEF8010A5141F56C36B5D99">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>TrackingCodeEvents.java</FileName>
<FilePath>applications/marketing/src/org/ofbiz/marketing/tracking/TrackingCodeEvents.java</FilePath>
<LineStart>374</LineStart>
<Snippet>        if (UtilValidate.isEmpty(trackingCodeId)) trackingCodeId = request.getParameter(&quot;atc&quot;);
        if (UtilValidate.isEmpty(trackingCodeId)) {
            Cookie[] cookies = request.getCookies();
            if (cookies != null) {
                for (Cookie cookie : cookies) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="12AF265A-8085-459E-A9C9-E0922DFFE1F5" iid="54DAA08B2F0332C91A5D8641809DC2C1">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>GoogleBaseSearchEvents.java</FileName>
<FilePath>specialpurpose/googlebase/src/org/ofbiz/googlebase/GoogleBaseSearchEvents.java</FilePath>
<LineStart>122</LineStart>
<Snippet>                    inMap.put(&quot;productStoreId&quot;, productStoreId);
                    inMap.put(&quot;allowRecommended&quot;, allowRecommended);
                    Map&lt;String, Object&gt; exportResult = dispatcher.runSync(&quot;exportToGoogle&quot;, inMap);
                    if (ServiceUtil.isError(exportResult)) {
                        List&lt;String&gt; errorMessages = UtilGenerics.checkList(exportResult.get(ModelService.ERROR_MESSAGE_LIST), String.class);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="0EE152BBD201B42E54396559584325EC">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method close() in OfbizUrlTransform.java sends unvalidated data to a web browser on line 218, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>OfbizUrlTransform.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/ftl/OfbizUrlTransform.java</FilePath>
<LineStart>218</LineStart>
<Snippet>                        // make the link
                        RequestHandler rh = (RequestHandler) ctx.getAttribute(&quot;_REQUEST_HANDLER_&quot;);
                        out.write(rh.makeLink(request, response, requestUrl, fullPath, secure, encode));
                    } else if (prefix != null) {
                        if (prefix instanceof TemplateScalarModel) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceEventHandler.java</FilePath>
<LineStart>337</LineStart>
<Snippet>                dispatcher.runAsync(serviceName, serviceContext);
            } else {
                result = dispatcher.runSync(serviceName, serviceContext);
            }
        } catch (ServiceAuthException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="9F2BF8AF2F82565ADB2DF84D332718E4">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method httpEngine() in HttpEngine.java sends unvalidated data to a web browser on line 187, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>HttpEngine.java</FileName>
<FilePath>framework/service/src/org/ofbiz/service/engine/HttpEngine.java</FilePath>
<LineStart>187</LineStart>
<Snippet>            if (errorMessage.length() &gt; 0) {
                response.setContentLength(errorMessage.length());
                out.write(errorMessage.toString());
            } else {
                response.setContentLength(resultString.length());</Snippet>
                            </Primary>
                            <Source>
<FileName>CoreEvents.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/CoreEvents.java</FilePath>
<LineStart>412</LineStart>
<Snippet>        try {
            if (null!=request.getParameter(&quot;_RUN_SYNC_&quot;) &amp;&amp; request.getParameter(&quot;_RUN_SYNC_&quot;).equals(&quot;Y&quot;)) {
                syncServiceResult = dispatcher.runSync(serviceName, serviceContext);
            } else {
                dispatcher.schedule(jobName, poolName, serviceName, serviceContext, startTime, frequency, interval, count, endTime, maxRetry);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="E9E017439A2A86F56CDF1AAD3467087B">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>LoginEvents.java</FileName>
<FilePath>applications/securityext/src/org/ofbiz/securityext/login/LoginEvents.java</FilePath>
<LineStart>77</LineStart>
<Snippet>
            String username = request.getParameter(&quot;USERNAME&quot;);
            String password = request.getParameter(&quot;PASSWORD&quot;);

            if ((username != null) &amp;&amp; (&quot;true&quot;.equalsIgnoreCase(UtilProperties.getPropertyValue(&quot;security.properties&quot;, &quot;username.lowercase&quot;)))) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="FC3003713D72D3F349FEA30DA47B3337">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>124</LineStart>
<Snippet>            if (s.charAt(i) == '\n') {
                checkAfterNewline();
                super.write(s, offset, i - offset + 1);
                offset = i + 1;
                lastWasNewline = true;</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceEventHandler.java</FilePath>
<LineStart>337</LineStart>
<Snippet>                dispatcher.runAsync(serviceName, serviceContext);
            } else {
                result = dispatcher.runSync(serviceName, serviceContext);
            }
        } catch (ServiceAuthException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792" iid="944E2C7547E0C8B20C9F52F7D026535B">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method run() in InputValue.java sends unvalidated data to a web browser on line 145, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>InputValue.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/pseudotag/InputValue.java</FilePath>
<LineStart>145</LineStart>
<Snippet>                inputValue + &quot;\&quot;&quot;);
        } else {
            pageContext.getOut().print(inputValue);
        }
    }</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>575</LineStart>
<Snippet>        while (e.hasMoreElements()) {
            String name = e.nextElement();
            request.setAttribute(name, request.getParameter(name));
        }
    }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="50DE3C6558E0F9B5F49AE679D65FE0B7">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method httpEngine() in HttpEngine.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HttpEngine.java</FileName>
<FilePath>framework/service/src/org/ofbiz/service/engine/HttpEngine.java</FilePath>
<LineStart>187</LineStart>
<Snippet>            if (errorMessage.length() &gt; 0) {
                response.setContentLength(errorMessage.length());
                out.write(errorMessage.toString());
            } else {
                response.setContentLength(resultString.length());</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>505</LineStart>
<Snippet>        Map&lt;String, Object&gt; ftlResults = null;
        try {
            ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
        } catch (ServiceAuthException e) {
            String msg = e.getMessage();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="D027DAA9-A3BE-49E4-BDBF-3DFF657F84CA" iid="26FD67EFFF2BD23E4A434E8BF44D7421">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>ProductEvents.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/product/ProductEvents.java</FilePath>
<LineStart>805</LineStart>
<Snippet>        //GenericValue userLogin = (GenericValue) request.getSession().getAttribute(&quot;userLogin&quot;);
        String productId = request.getParameter(&quot;productId&quot;);
        String productFeatureId = request.getParameter(&quot;productFeatureId&quot;);

        if (UtilValidate.isEmpty(productId) || UtilValidate.isEmpty(productFeatureId)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="0DD704C6CE31F452977E6CA8672935F1">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>PayPalEvents.java</FileName>
<FilePath>applications/accounting/src/org/ofbiz/accounting/thirdparty/paypal/PayPalEvents.java</FilePath>
<LineStart>497</LineStart>
<Snippet>        try {
            String comment = UtilProperties.getMessage(resource, &quot;AccountingPaymentReceiveViaPayPal&quot;, locale);
            results = dispatcher.runSync(&quot;createPaymentFromPreference&quot;, UtilMisc.toMap(&quot;userLogin&quot;, userLogin,
                    &quot;orderPaymentPreferenceId&quot;, paymentPreference.get(&quot;orderPaymentPreferenceId&quot;), &quot;comments&quot;, comment));
        } catch (GenericServiceException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="E34E6386DF83E5B2F80654B2E619DCC5">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>CommonEvents.java</FileName>
<FilePath>framework/common/src/org/ofbiz/common/CommonEvents.java</FilePath>
<LineStart>231</LineStart>
<Snippet>    /** Simple event to set the users per-session currency uom value */
    public static String setSessionCurrencyUom(HttpServletRequest request, HttpServletResponse response) {
        String currencyUom = request.getParameter(&quot;currencyUom&quot;);
        if (UtilValidate.isNotEmpty(currencyUom)) {
            // update the session</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="BB3B524843906789CAEA808924B77E80">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 115, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>115</LineStart>
<Snippet>    @Override
    public void write(String s) throws IOException {
        write(s, 0, s.length());
    }
</Snippet>
                            </Primary>
                            <Source>
<FileName>RequestHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/RequestHandler.java</FilePath>
<LineStart>128</LineStart>
<Snippet>        }

        String overrideViewUri = RequestHandler.getOverrideViewUri(request.getPathInfo());

        String requestMissingErrorMessage = &quot;Unknown request [&quot; + defaultRequestUri + &quot;]; this request does not exist or cannot be called directly.&quot;;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="C106454BA48845EAC98D42C7C10F0421">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CheckOutEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/CheckOutEvents.java</FilePath>
<LineStart>131</LineStart>
<Snippet>            if (UtilValidate.isNotEmpty(taxAuthPartyGeoIds)) {
                try {
                    Map&lt;String, ? extends Object&gt; createCustomerTaxAuthInfoResult = dispatcher.runSync(&quot;createCustomerTaxAuthInfo&quot;,
                            UtilMisc.&lt;String, Object&gt;toMap(&quot;partyId&quot;, cart.getPartyId(), &quot;taxAuthPartyGeoIds&quot;, taxAuthPartyGeoIds, &quot;partyTaxId&quot;, partyTaxId, &quot;isExempt&quot;, isExempt, &quot;userLogin&quot;, userLogin));
                    ServiceUtil.getMessages(request, createCustomerTaxAuthInfoResult, null);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="D027DAA9-A3BE-49E4-BDBF-3DFF657F84CA" iid="85183857CB2800A3AB67B1DE8C6AE10C">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>409</LineStart>
<Snippet>        }
        
        String frameContentId = request.getParameter(&quot;frameContentId&quot;);
        Delegator delegator = (Delegator) request.getAttribute(&quot;delegator&quot;);
        </Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="353A77B5391D918EF92B54271015935A">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>251</LineStart>
<Snippet>                txtContext.put(&quot;mapKey&quot;, &quot;ARTICLE&quot;);
                txtContext.put(&quot;dataTemplateTypeId&quot;, &quot;NONE&quot;);
                Map&lt;String, Object&gt; txtResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, txtContext);
                isError = ModelService.RESPOND_ERROR.equals(txtResults.get(ModelService.RESPONSE_MESSAGE));
                if (isError) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="4DC3B62E716415F539268558323F8438">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method openEditWrap() in RenderContentAsText.java sends unvalidated data to a web browser on line 224, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>RenderContentAsText.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderContentAsText.java</FilePath>
<LineStart>224</LineStart>
<Snippet>            public void openEditWrap(Writer out, String editStyle) throws IOException {
                String divStr = &quot;&lt;div class=\&quot;&quot; + editStyle + &quot;\&quot;&gt;&quot;;
                out.write(divStr);
            }
</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>505</LineStart>
<Snippet>        Map&lt;String, Object&gt; ftlResults = null;
        try {
            ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
        } catch (ServiceAuthException e) {
            String msg = e.getMessage();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF" iid="61D045BF61EB4A013FE626EC30A5ED08">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method run() in EntityField.java sends unvalidated data to a web browser on line 249, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EntityField.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/pseudotag/EntityField.java</FilePath>
<LineStart>249</LineStart>
<Snippet>            if (prefix != null)
                out.print(prefix);
            out.print(fieldString);
            if (suffix != null)
                out.print(suffix);</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>119</LineStart>
<Snippet>            contentRevisionMap.put(&quot;contentId&quot;, contentId);
            contentRevisionMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentRevisionAndItem&quot;, contentRevisionMap);
            keySet = result.keySet();
            iter = keySet.iterator();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="EEC022883779239A19E945F9CD2D9885">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>CheckOutEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/CheckOutEvents.java</FilePath>
<LineStart>131</LineStart>
<Snippet>            if (UtilValidate.isNotEmpty(taxAuthPartyGeoIds)) {
                try {
                    Map&lt;String, ? extends Object&gt; createCustomerTaxAuthInfoResult = dispatcher.runSync(&quot;createCustomerTaxAuthInfo&quot;,
                            UtilMisc.&lt;String, Object&gt;toMap(&quot;partyId&quot;, cart.getPartyId(), &quot;taxAuthPartyGeoIds&quot;, taxAuthPartyGeoIds, &quot;partyTaxId&quot;, partyTaxId, &quot;isExempt&quot;, isExempt, &quot;userLogin&quot;, userLogin));
                    ServiceUtil.getMessages(request, createCustomerTaxAuthInfoResult, null);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="7D69502E45B9864536BFBA5C7975012B">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method close() in OfbizUrlTransform.java sends unvalidated data to a web browser on line 205, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>OfbizUrlTransform.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/ftl/OfbizUrlTransform.java</FilePath>
<LineStart>205</LineStart>
<Snippet>                        String requestUrl = buf.toString();
                        newURL.append(requestUrl);
                        out.write(newURL.toString());
                    } else if (req != null) {
                        HttpServletRequest request = (HttpServletRequest) req.getWrappedObject();</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>688</LineStart>
<Snippet>        
        // TODO: the code below here needs some cleanups
        String billToCustomerPartyId = request.getParameter(&quot;billToCustomerPartyId_o_0&quot;);
        if (UtilValidate.isEmpty(billToCustomerPartyId) &amp;&amp; UtilValidate.isEmpty(supplierPartyId)) {
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, UtilProperties.getMessage(resource_error, &quot;OrderCouldNotInitPurchaseOrder&quot;, locale));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="9C1D422D7E10B4E9AABF8DE4E69D9E1A">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1327</LineStart>
<Snippet>        ShoppingCart cart = null;
        try {
            Map&lt;String, Object&gt; outMap = dispatcher.runSync(&quot;loadCartFromShoppingList&quot;,
                    UtilMisc.&lt;String, Object&gt;toMap(&quot;shoppingListId&quot;, shoppingListId,
                    &quot;userLogin&quot;, userLogin));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="6DF48C656C19F555DA801C13696AF8B8">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 115, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>115</LineStart>
<Snippet>    @Override
    public void write(String s) throws IOException {
        write(s, 0, s.length());
    }
</Snippet>
                            </Primary>
                            <Source>
<FileName>CatalogUrlServlet.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/category/CatalogUrlServlet.java</FilePath>
<LineStart>80</LineStart>
<Snippet>        Delegator delegator = (Delegator) getServletContext().getAttribute(&quot;delegator&quot;);

        String pathInfo = request.getPathInfo();
        List&lt;String&gt; pathElements = StringUtil.split(pathInfo, &quot;/&quot;);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="88059F32032D67E6E188996BB9F44468">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>183</LineStart>
<Snippet>        Map&lt;String, Object&gt; results = null;
        try {
            results = dispatcher.runSync(&quot;renderCompDocPdf&quot;, mapIn);
        } catch (ServiceAuthException e) {
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, e.toString());</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="CE9730C7C34A415591182170AD702EEC">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1535</LineStart>
<Snippet>
        // TODO: re-factor and move this inside the ShoppingCart constructor
        String orderMode = request.getParameter(&quot;orderMode&quot;);
        if (orderMode != null) {
            cart.setOrderType(orderMode);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="3E31D4DA14EA33ABAA2C5B84C7FE9B4F">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 115, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>115</LineStart>
<Snippet>    @Override
    public void write(String s) throws IOException {
        write(s, 0, s.length());
    }
</Snippet>
                            </Primary>
                            <Source>
<FileName>LoginWorker.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/LoginWorker.java</FilePath>
<LineStart>397</LineStart>
<Snippet>            // get the visit id to pass to the userLogin for history
            String visitId = VisitHandler.getVisitId(session);
            result = dispatcher.runSync(&quot;userLogin&quot;, UtilMisc.toMap(&quot;login.username&quot;, username, &quot;login.password&quot;, password, &quot;visitId&quot;, visitId, &quot;locale&quot;, UtilHttp.getLocale(request)));
        } catch (GenericServiceException e) {
            Debug.logError(e, &quot;Error calling userLogin service&quot;, module);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="12AF265A-8085-459E-A9C9-E0922DFFE1F5" iid="80BAC5E27016A3FD0F462FA1BC537D19">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>AbstractOFBizAuthenticationHandler.java</FileName>
<FilePath>specialpurpose/ldap/src/org/ofbiz/ldap/commons/AbstractOFBizAuthenticationHandler.java</FilePath>
<LineStart>129</LineStart>
<Snippet>
        try {
            loginResult = dispatcher.runSync(&quot;userLogin&quot;, UtilMisc.toMap(&quot;login.username&quot;, username, &quot;login.password&quot;, password, &quot;visitId&quot;, visitId, &quot;locale&quot;, UtilHttp.getLocale(request)));
        } catch (GenericServiceException e) {
            throw new GenericServiceException(e.getLocalizedMessage());</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="4E6B28140DAA687FCF0E309E7F679933">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>505</LineStart>
<Snippet>        Map&lt;String, Object&gt; ftlResults = null;
        try {
            ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
        } catch (ServiceAuthException e) {
            String msg = e.getMessage();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="D027DAA9-A3BE-49E4-BDBF-3DFF657F84CA" iid="AC522DDB01B9EF9CD342088F9FED1572">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>CoreEvents.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/CoreEvents.java</FilePath>
<LineStart>516</LineStart>
<Snippet>    public static String runService(HttpServletRequest request, HttpServletResponse response) {
        // get the mode and service name
        String serviceName = request.getParameter(&quot;serviceName&quot;);
        String mode = request.getParameter(&quot;mode&quot;);
        Locale locale = UtilHttp.getLocale(request);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="D027DAA9-A3BE-49E4-BDBF-3DFF657F84CA" iid="028BAA1818E02E851CE19AD547541580">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>WebShoppingCart.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/WebShoppingCart.java</FilePath>
<LineStart>48</LineStart>
<Snippet>                WebSiteWorker.getWebSiteId(request), (locale != null ? locale : ProductStoreWorker.getStoreLocale(request)),
                (currencyUom != null ? currencyUom : ProductStoreWorker.getStoreCurrencyUomId(request)),
                request.getParameter(&quot;billToCustomerPartyId&quot;),
                (request.getParameter(&quot;supplierPartyId&quot;) != null ? request.getParameter(&quot;supplierPartyId&quot;) : request.getParameter(&quot;billFromVendorPartyId&quot;)));
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="12AF265A-8085-459E-A9C9-E0922DFFE1F5" iid="E4C3FD9DADAD8C6BDCB60CAD6347BA74">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>104</LineStart>
<Snippet>        persistMap.put(&quot;userLogin&quot;, userLogin);
        try {
            Map&lt;String, Object&gt; persistResult = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, persistMap);
            contentId = (String)persistResult.get(&quot;contentId&quot;);
            //request.setAttribute(&quot;contentId&quot;, contentId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="AFB8FC928D9DA863FAFE1D8B9382167A">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>AbstractOFBizAuthenticationHandler.java</FileName>
<FilePath>specialpurpose/ldap/src/org/ofbiz/ldap/commons/AbstractOFBizAuthenticationHandler.java</FilePath>
<LineStart>129</LineStart>
<Snippet>
        try {
            loginResult = dispatcher.runSync(&quot;userLogin&quot;, UtilMisc.toMap(&quot;login.username&quot;, username, &quot;login.password&quot;, password, &quot;visitId&quot;, visitId, &quot;locale&quot;, UtilHttp.getLocale(request)));
        } catch (GenericServiceException e) {
            throw new GenericServiceException(e.getLocalizedMessage());</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="E5BE1E728EC603D5BBC4FDEACDE080F5">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 124, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>124</LineStart>
<Snippet>            if (s.charAt(i) == '\n') {
                checkAfterNewline();
                super.write(s, offset, i - offset + 1);
                offset = i + 1;
                lastWasNewline = true;</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>672</LineStart>
<Snippet>        HttpSession session = request.getSession();
        Locale locale = UtilHttp.getLocale(request);
        String supplierPartyId = request.getParameter(&quot;supplierPartyId_o_0&quot;);
        
        // check the preferred currency of the supplier, if set, use that for the cart, otherwise use system defaults.</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="7E53182E8F31E408DCEDA65B5AE94ABB">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>287</LineStart>
<Snippet>                imgContext.put(&quot;rootDir&quot;, &quot;rootDir&quot;);
                if (Debug.infoOn()) Debug.logInfo(&quot;[UploadContentAndImage]imgContext &quot; + imgContext, module);
                Map&lt;String, Object&gt; imgResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, imgContext);
                isError = ModelService.RESPOND_ERROR.equals(imgResults.get(ModelService.RESPONSE_MESSAGE));
                if (isError) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="6BC5E802851E9EC12EDAF4872B544574">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>348</LineStart>
<Snippet>        }
        String frameContentId = request.getParameter(&quot;frameContentId&quot;);
        String frameDataResourceId = request.getParameter(&quot;frameDataResourceId&quot;);
        
        if (UtilValidate.isEmpty(request.getParameter(&quot;imageWidth&quot;)) || UtilValidate.isEmpty(request.getParameter(&quot;imageHeight&quot;))) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="12AF265A-8085-459E-A9C9-E0922DFFE1F5" iid="BB1FF323FCFCB8A995E6D759235446E3">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>287</LineStart>
<Snippet>                imgContext.put(&quot;rootDir&quot;, &quot;rootDir&quot;);
                if (Debug.infoOn()) Debug.logInfo(&quot;[UploadContentAndImage]imgContext &quot; + imgContext, module);
                Map&lt;String, Object&gt; imgResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, imgContext);
                isError = ModelService.RESPOND_ERROR.equals(imgResults.get(ModelService.RESPONSE_MESSAGE));
                if (isError) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792" iid="AC595863DD3E5A3F9AB75819A0EA4235">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method run() in InputValue.java sends unvalidated data to a web browser on line 145, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>InputValue.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/pseudotag/InputValue.java</FilePath>
<LineStart>145</LineStart>
<Snippet>                inputValue + &quot;\&quot;&quot;);
        } else {
            pageContext.getOut().print(inputValue);
        }
    }</Snippet>
                            </Primary>
                            <Source>
<FileName>InputValue.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/pseudotag/InputValue.java</FilePath>
<LineStart>134</LineStart>
<Snippet>            // if nothing found in entity, or if not checked, try a parameter
            // if (inputValue == null) {
            inputValue = pageContext.getRequest().getParameter(paramName);
        }
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="34153C8F57CB4217D8666F4B3EBE9E1C">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>OrderEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/order/OrderEvents.java</FilePath>
<LineStart>125</LineStart>
<Snippet>                        contextMap.put(&quot;userLogin&quot;, userLogin);
                        try {
                            resultMap = dispatcher.runSync(&quot;cancelOrderItem&quot;, contextMap);

                            if (ServiceUtil.isError(resultMap)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="6BC5E802851E9EC12EDAF4872B544575">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>348</LineStart>
<Snippet>        }
        String frameContentId = request.getParameter(&quot;frameContentId&quot;);
        String frameDataResourceId = request.getParameter(&quot;frameDataResourceId&quot;);
        
        if (UtilValidate.isEmpty(request.getParameter(&quot;imageWidth&quot;)) || UtilValidate.isEmpty(request.getParameter(&quot;imageHeight&quot;))) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="6F9571E66AEDB42E49DE23BD86FF8133">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1388</LineStart>
<Snippet>        ShoppingCart cart = null;
        try {
            Map&lt;String, Object&gt; outMap = dispatcher.runSync(&quot;loadCartFromOrder&quot;,
                                                UtilMisc.&lt;String, Object&gt;toMap(&quot;orderId&quot;, orderId,
                                                        &quot;skipProductChecks&quot;, Boolean.TRUE, // the products have already been checked in the order, no need to check their validity again</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="E5ABFFD14F327C37C026E227A8C899AB">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method toJsonObjectList() in ImageManagementServices.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ImageManagementServices.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/ImageManagementServices.java</FilePath>
<LineStart>779</LineStart>
<Snippet>            try {
                out = response.getWriter();
                out.write(jsonStr);
                out.flush();
            } catch (IOException e) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>575</LineStart>
<Snippet>        while (e.hasMoreElements()) {
            String name = e.nextElement();
            request.setAttribute(name, request.getParameter(name));
        }
    }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="520CAE5F9AE030A76C57501277143A04">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 124, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>124</LineStart>
<Snippet>            if (s.charAt(i) == '\n') {
                checkAfterNewline();
                super.write(s, offset, i - offset + 1);
                offset = i + 1;
                lastWasNewline = true;</Snippet>
                            </Primary>
                            <Source>
<FileName>CatalogUrlServlet.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/category/CatalogUrlServlet.java</FilePath>
<LineStart>80</LineStart>
<Snippet>        Delegator delegator = (Delegator) getServletContext().getAttribute(&quot;delegator&quot;);

        String pathInfo = request.getPathInfo();
        List&lt;String&gt; pathElements = StringUtil.split(pathInfo, &quot;/&quot;);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="3A6C11E917DB4970A273888A1DF8D466">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>OrderManagerEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/OrderManagerEvents.java</FilePath>
<LineStart>98</LineStart>
<Snippet>                    Map&lt;String, Object&gt; results = null;
                    try {
                        results = dispatcher.runSync(&quot;createPaymentFromPreference&quot;, UtilMisc.toMap(&quot;orderPaymentPreferenceId&quot;, ppref.get(&quot;orderPaymentPreferenceId&quot;),
                                &quot;paymentFromId&quot;, placingCustomer.getString(&quot;partyId&quot;), &quot;comments&quot;, &quot;Payment received offline and manually entered.&quot;));
                    } catch (GenericServiceException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1C85B63C-0870-45B8-9909-86BA43F68B05" iid="3FCBB744FEC41B47EC1DC379AED2C9EA">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method closeEditWrap() in RenderSubContentCacheTransform.java sends unvalidated data to a web browser on line 275, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>RenderSubContentCacheTransform.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderSubContentCacheTransform.java</FilePath>
<LineStart>275</LineStart>
<Snippet>                ServletContext servletContext = request.getSession().getServletContext();
                RequestHandler rh = (RequestHandler) servletContext.getAttribute(&quot;_REQUEST_HANDLER_&quot;);
                out.append(rh.makeLink(request, response, &quot;/&quot; + fullRequest, false, false, true));
                out.write(&quot;\&quot;&gt;Edit&lt;/a&gt;&quot;);
                out.write(&quot;&lt;/div&gt;&quot;);</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceEventHandler.java</FilePath>
<LineStart>337</LineStart>
<Snippet>                dispatcher.runAsync(serviceName, serviceContext);
            } else {
                result = dispatcher.runSync(serviceName, serviceContext);
            }
        } catch (ServiceAuthException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="702353369FE57400251B3B2F07A261C1">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>267</LineStart>
<Snippet>        }
        if (!&quot;image/png&quot;.equals(mimType)) {
            session.setAttribute(&quot;frameContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
            session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;The selected image type is incorrect, please select the image type *.PNG to upload.&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="12AF265A-8085-459E-A9C9-E0922DFFE1F5" iid="7AA1B48FFD7C4BF3F913E483F03BDA98">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>ICalWorker.java</FileName>
<FilePath>applications/workeffort/src/org/ofbiz/workeffort/workeffort/ICalWorker.java</FilePath>
<LineStart>285</LineStart>
<Snippet>        HttpSession session = request.getSession();
        LocalDispatcher dispatcher = (LocalDispatcher) request.getAttribute(&quot;dispatcher&quot;);
        Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;userLogin&quot;, serviceMap);
        if (ServiceUtil.isError(result) || ServiceUtil.isFailure(result)) {
            return;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1C85B63C-0870-45B8-9909-86BA43F68B05" iid="BF17CD4083AD4FD456148B19B6DD856A">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method closeEditWrap() in RenderSubContentCacheTransform.java sends unvalidated data to a web browser on line 275, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>RenderSubContentCacheTransform.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderSubContentCacheTransform.java</FilePath>
<LineStart>275</LineStart>
<Snippet>                ServletContext servletContext = request.getSession().getServletContext();
                RequestHandler rh = (RequestHandler) servletContext.getAttribute(&quot;_REQUEST_HANDLER_&quot;);
                out.append(rh.makeLink(request, response, &quot;/&quot; + fullRequest, false, false, true));
                out.write(&quot;\&quot;&gt;Edit&lt;/a&gt;&quot;);
                out.write(&quot;&lt;/div&gt;&quot;);</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>104</LineStart>
<Snippet>        persistMap.put(&quot;userLogin&quot;, userLogin);
        try {
            Map&lt;String, Object&gt; persistResult = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, persistMap);
            contentId = (String)persistResult.get(&quot;contentId&quot;);
            //request.setAttribute(&quot;contentId&quot;, contentId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="BB17568377C2ECB6761E207389EC65B1">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>WebShoppingCart.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/WebShoppingCart.java</FilePath>
<LineStart>48</LineStart>
<Snippet>                WebSiteWorker.getWebSiteId(request), (locale != null ? locale : ProductStoreWorker.getStoreLocale(request)),
                (currencyUom != null ? currencyUom : ProductStoreWorker.getStoreCurrencyUomId(request)),
                request.getParameter(&quot;billToCustomerPartyId&quot;),
                (request.getParameter(&quot;supplierPartyId&quot;) != null ? request.getParameter(&quot;supplierPartyId&quot;) : request.getParameter(&quot;billFromVendorPartyId&quot;)));
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="CCD8406D7BD4822A4F8DF82D04585BA6">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>AbstractOFBizAuthenticationHandler.java</FileName>
<FilePath>specialpurpose/ldap/src/org/ofbiz/ldap/commons/AbstractOFBizAuthenticationHandler.java</FilePath>
<LineStart>129</LineStart>
<Snippet>
        try {
            loginResult = dispatcher.runSync(&quot;userLogin&quot;, UtilMisc.toMap(&quot;login.username&quot;, username, &quot;login.password&quot;, password, &quot;visitId&quot;, visitId, &quot;locale&quot;, UtilHttp.getLocale(request)));
        } catch (GenericServiceException e) {
            throw new GenericServiceException(e.getLocalizedMessage());</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="6FA0A44CD282FAE92BC3408D42BD63E3">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method close() in OfbizUrlTransform.java sends unvalidated data to a web browser on line 218, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>OfbizUrlTransform.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/ftl/OfbizUrlTransform.java</FilePath>
<LineStart>218</LineStart>
<Snippet>                        // make the link
                        RequestHandler rh = (RequestHandler) ctx.getAttribute(&quot;_REQUEST_HANDLER_&quot;);
                        out.write(rh.makeLink(request, response, requestUrl, fullPath, secure, encode));
                    } else if (prefix != null) {
                        if (prefix instanceof TemplateScalarModel) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>119</LineStart>
<Snippet>            contentRevisionMap.put(&quot;contentId&quot;, contentId);
            contentRevisionMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentRevisionAndItem&quot;, contentRevisionMap);
            keySet = result.keySet();
            iter = keySet.iterator();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="86A5745CC95E9A923B840C231149A1B2">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>558</LineStart>
<Snippet>        session.setAttribute(&quot;_CLIENT_LOCALE_&quot;, request.getLocale());
        session.setAttribute(&quot;_CLIENT_REQUEST_&quot;, fullRequestUrl.toString());
        session.setAttribute(&quot;_CLIENT_USER_AGENT_&quot;, request.getHeader(&quot;User-Agent&quot;) != null ? request.getHeader(&quot;User-Agent&quot;) : &quot;&quot;);
        session.setAttribute(&quot;_CLIENT_REFERER_&quot;, request.getHeader(&quot;Referer&quot;) != null ? request.getHeader(&quot;Referer&quot;) : &quot;&quot;);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="15FD5AAF052EF0687F4706DD87158000">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 130, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>130</LineStart>
<Snippet>        }
        checkAfterNewline();
        super.write(s, offset, i - offset);
    }
}</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>262</LineStart>
<Snippet>        if (UtilValidate.isEmpty(imageName) || UtilValidate.isEmpty(imageData)) {
            session.setAttribute(&quot;frameContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
            session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;There is no frame image, please select the image type *.PNG  uploading.&quot;);
            return &quot;error&quot;;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="944954D7A349E98E28298A4A5E476344">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>ProductEvents.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/product/ProductEvents.java</FilePath>
<LineStart>805</LineStart>
<Snippet>        //GenericValue userLogin = (GenericValue) request.getSession().getAttribute(&quot;userLogin&quot;);
        String productId = request.getParameter(&quot;productId&quot;);
        String productFeatureId = request.getParameter(&quot;productFeatureId&quot;);

        if (UtilValidate.isEmpty(productId) || UtilValidate.isEmpty(productFeatureId)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="12AF265A-8085-459E-A9C9-E0922DFFE1F5" iid="A71D9A0A28001468122BC01A54E2A5F6">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>ContentManagementEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/ContentManagementEvents.java</FilePath>
<LineStart>288</LineStart>
<Snippet>                        serviceIn.put(&quot;targetOperationList&quot;, targetOperationList);
                        serviceIn.put(&quot;contentPurposeList&quot;, contentPurposeList);
                        results = dispatcher.runSync(&quot;createContentAssoc&quot;, serviceIn);
                        responseMessage = (String)results.get(ModelService.RESPONSE_MESSAGE);
                        if (UtilValidate.isNotEmpty(responseMessage)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="7B8F07E1A0F218E27FAE012FEDDB9C58">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method checkAfterNewline() in IndentingWriter.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>58</LineStart>
<Snippet>            if (doSpace) {
                if (doNewline) {
                    super.write(indent.toString(), 0, indent.length());
                } else {
                    super.write(' ');</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceMultiEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceMultiEventHandler.java</FilePath>
<LineStart>308</LineStart>
<Snippet>                Map&lt;String, Object&gt; result = null;
                try {
                    result = dispatcher.runSync(serviceName, serviceContext);
                } catch (ServiceAuthException e) {
                    // not logging since the service engine already did</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="68C4E4D1FD84263DDBBC10A6DCD1C082">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method checkAfterNewline() in IndentingWriter.java sends unvalidated data to a web browser on line 58, which can result in the browser executing malicious code.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>58</LineStart>
<Snippet>            if (doSpace) {
                if (doNewline) {
                    super.write(indent.toString(), 0, indent.length());
                } else {
                    super.write(' ');</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceMultiEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceMultiEventHandler.java</FilePath>
<LineStart>308</LineStart>
<Snippet>                Map&lt;String, Object&gt; result = null;
                try {
                    result = dispatcher.runSync(serviceName, serviceContext);
                } catch (ServiceAuthException e) {
                    // not logging since the service engine already did</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="380CC04C802F929F7D0A6B9A40846393">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>182</LineStart>
<Snippet>                }
                if (UtilValidate.isNotEmpty(map.get(&quot;contentAssocTypeId&quot;))) {
                    ftlResults = dispatcher.runSync(&quot;createContentAssoc&quot;, map);
                    isError = ModelService.RESPOND_ERROR.equals(ftlResults.get(ModelService.RESPONSE_MESSAGE));
                    if (isError) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="12AF265A-8085-459E-A9C9-E0922DFFE1F5" iid="9C07899A307547A178DC747DD61CA935">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>PayPalEvents.java</FileName>
<FilePath>applications/accounting/src/org/ofbiz/accounting/thirdparty/paypal/PayPalEvents.java</FilePath>
<LineStart>497</LineStart>
<Snippet>        try {
            String comment = UtilProperties.getMessage(resource, &quot;AccountingPaymentReceiveViaPayPal&quot;, locale);
            results = dispatcher.runSync(&quot;createPaymentFromPreference&quot;, UtilMisc.toMap(&quot;userLogin&quot;, userLogin,
                    &quot;orderPaymentPreferenceId&quot;, paymentPreference.get(&quot;orderPaymentPreferenceId&quot;), &quot;comments&quot;, comment));
        } catch (GenericServiceException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="D027DAA9-A3BE-49E4-BDBF-3DFF657F84CA" iid="CA56EEB9F1489CAF375DEEE744D37EED">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>693</LineStart>
<Snippet>            return &quot;error&quot;;
        }
        String orderId = request.getParameter(&quot;orderId_o_0&quot;);
        // set the order id if supplied
        if (UtilValidate.isNotEmpty(orderId)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="702353369FE57400251B3B2F07A261BF">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>267</LineStart>
<Snippet>        }
        if (!&quot;image/png&quot;.equals(mimType)) {
            session.setAttribute(&quot;frameContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
            session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;The selected image type is incorrect, please select the image type *.PNG to upload.&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="0DD704C6CE31F452977E6CA8672935F2">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>PayPalEvents.java</FileName>
<FilePath>applications/accounting/src/org/ofbiz/accounting/thirdparty/paypal/PayPalEvents.java</FilePath>
<LineStart>497</LineStart>
<Snippet>        try {
            String comment = UtilProperties.getMessage(resource, &quot;AccountingPaymentReceiveViaPayPal&quot;, locale);
            results = dispatcher.runSync(&quot;createPaymentFromPreference&quot;, UtilMisc.toMap(&quot;userLogin&quot;, userLogin,
                    &quot;orderPaymentPreferenceId&quot;, paymentPreference.get(&quot;orderPaymentPreferenceId&quot;), &quot;comments&quot;, comment));
        } catch (GenericServiceException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5B9CE105-7C9E-402F-A6B5-3BB9EACDEE95" iid="487FFEF98718C86EC74254766EC60746">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method streamContent() in UtilHttp.java sends unvalidated data to a web browser on line 1033, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>1033</LineStart>
<Snippet>        try {
            while ((read = bis.read(buffer, 0, buffer.length)) != -1) {
                bos.write(buffer, 0, read);
            }
        } catch (IOException e) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>119</LineStart>
<Snippet>            contentRevisionMap.put(&quot;contentId&quot;, contentId);
            contentRevisionMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentRevisionAndItem&quot;, contentRevisionMap);
            keySet = result.keySet();
            iter = keySet.iterator();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="EFEBFA9A91B1815553476731B8572D5B">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method checkAfterNewline() in IndentingWriter.java sends unvalidated data to a web browser on line 58, which can result in the browser executing malicious code.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>58</LineStart>
<Snippet>            if (doSpace) {
                if (doNewline) {
                    super.write(indent.toString(), 0, indent.length());
                } else {
                    super.write(' ');</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>505</LineStart>
<Snippet>        Map&lt;String, Object&gt; ftlResults = null;
        try {
            ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
        } catch (ServiceAuthException e) {
            String msg = e.getMessage();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="B8B49ADC709044CEA810D9780A39B0AB">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>LayoutEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/layout/LayoutEvents.java</FilePath>
<LineStart>483</LineStart>
<Snippet>                Debug.logVerbose(&quot;in createSubContent, context:&quot; + context, module);
            }
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, context);
            boolean isError = ModelService.RESPOND_ERROR.equals(result.get(ModelService.RESPONSE_MESSAGE));
            if (isError) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="06E284D8516A5CE720ABC0E5A95A06C0">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 130, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>130</LineStart>
<Snippet>        }
        checkAfterNewline();
        super.write(s, offset, i - offset);
    }
}</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>672</LineStart>
<Snippet>        HttpSession session = request.getSession();
        Locale locale = UtilHttp.getLocale(request);
        String supplierPartyId = request.getParameter(&quot;supplierPartyId_o_0&quot;);
        
        // check the preferred currency of the supplier, if set, use that for the cart, otherwise use system defaults.</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="B73A00554037CB6D3683F26E1460C874">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>130</LineStart>
<Snippet>        }
        checkAfterNewline();
        super.write(s, offset, i - offset);
    }
}</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>575</LineStart>
<Snippet>        while (e.hasMoreElements()) {
            String name = e.nextElement();
            request.setAttribute(name, request.getParameter(name));
        }
    }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="D027DAA9-A3BE-49E4-BDBF-3DFF657F84CA" iid="0DC2FD93B012A78D1974BA66970AE8EC">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>TrackingCodeEvents.java</FileName>
<FilePath>applications/marketing/src/org/ofbiz/marketing/tracking/TrackingCodeEvents.java</FilePath>
<LineStart>371</LineStart>
<Snippet>        java.sql.Timestamp nowStamp = UtilDateTime.nowTimestamp();

        String trackingCodeId = request.getParameter(&quot;autoTrackingCode&quot;);
        if (UtilValidate.isEmpty(trackingCodeId)) trackingCodeId = request.getParameter(&quot;atc&quot;);
        if (UtilValidate.isEmpty(trackingCodeId)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="D027DAA9-A3BE-49E4-BDBF-3DFF657F84CA" iid="C2F0EFC92EAF4C0BDEE16DD3B97B7F0E">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>ShipmentEvents.java</FileName>
<FilePath>applications/product/src/org/ofbiz/shipment/shipment/ShipmentEvents.java</FilePath>
<LineStart>95</LineStart>
<Snippet>        GenericValue userLogin = (GenericValue)request.getSession().getAttribute(&quot;userLogin&quot;);

        String shipmentId = request.getParameter(&quot;shipmentIdReceived&quot;);
        String forceShipmentReceived = request.getParameter(&quot;forceShipmentReceived&quot;);
        if (UtilValidate.isNotEmpty(shipmentId) &amp;&amp; &quot;Y&quot;.equals(forceShipmentReceived)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="A1FB6D666B24AACD504150C7E1ECB16D">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method outputError() in ServiceStreamHandler.java sends unvalidated data to a web browser on line 110, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ServiceStreamHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceStreamHandler.java</FilePath>
<LineStart>110</LineStart>
<Snippet>        PrintStream out = new PrintStream(stream);
        if (message != null)
            out.println(&quot;Error message: &quot; + message);
        if (error != null)
            out.println(&quot;Exception occured: &quot; + error.toString());</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceEventHandler.java</FilePath>
<LineStart>337</LineStart>
<Snippet>                dispatcher.runAsync(serviceName, serviceContext);
            } else {
                result = dispatcher.runSync(serviceName, serviceContext);
            }
        } catch (ServiceAuthException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F200F116-96DA-4F5B-A9AA-74EDBD984E84" iid="A93AC8DA514959D6DB7FF19F1FA1588E">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method streamContent() in UtilHttp.java sends unvalidated data to a web browser on line 1033, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>1033</LineStart>
<Snippet>        try {
            while ((read = bis.read(buffer, 0, buffer.length)) != -1) {
                bos.write(buffer, 0, read);
            }
        } catch (IOException e) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>575</LineStart>
<Snippet>        while (e.hasMoreElements()) {
            String name = e.nextElement();
            request.setAttribute(name, request.getParameter(name));
        }
    }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="47C46A34F135CAAA56E51493F17031E3">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method close() in OfbizUrlTransform.java sends unvalidated data to a web browser on line 205, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>OfbizUrlTransform.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/ftl/OfbizUrlTransform.java</FilePath>
<LineStart>205</LineStart>
<Snippet>                        String requestUrl = buf.toString();
                        newURL.append(requestUrl);
                        out.write(newURL.toString());
                    } else if (req != null) {
                        HttpServletRequest request = (HttpServletRequest) req.getWrappedObject();</Snippet>
                            </Primary>
                            <Source>
<FileName>TrackingCodeEvents.java</FileName>
<FilePath>applications/marketing/src/org/ofbiz/marketing/tracking/TrackingCodeEvents.java</FilePath>
<LineStart>93</LineStart>
<Snippet>     */
    public static String checkPartnerTrackingCodeUrlParam(HttpServletRequest request, HttpServletResponse response) {
        String trackingCodeId = request.getParameter(&quot;ptc&quot;);

        if (UtilValidate.isNotEmpty(trackingCodeId)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="2BCC62F1822EF3A2F9004DDF0E7EB486">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 130, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>130</LineStart>
<Snippet>        }
        checkAfterNewline();
        super.write(s, offset, i - offset);
    }
}</Snippet>
                            </Primary>
                            <Source>
<FileName>LoginWorker.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/LoginWorker.java</FilePath>
<LineStart>264</LineStart>
<Snippet>
                // keep the previous request name in the session
                session.setAttribute(&quot;_PREVIOUS_REQUEST_&quot;, request.getPathInfo());

                // NOTE: not using the old _PREVIOUS_PARAMS_ attribute at all because it was a security hole as it was used to put data in the URL (never encrypted) that was originally in a form field that may have been encrypted</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="6D25FCF7E1AEF044A6F77DCB7979A4FC">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>221</LineStart>
<Snippet>                sumContext.put(&quot;mapKey&quot;, &quot;SUMMARY&quot;);
                sumContext.put(&quot;dataTemplateTypeId&quot;, &quot;NONE&quot;);
                Map&lt;String, Object&gt; sumResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, sumContext);
                isError = ModelService.RESPOND_ERROR.equals(sumResults.get(ModelService.RESPONSE_MESSAGE));
                if (isError) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="F052A87D3AF42EDD75F1EBCDAD07FD19">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>RequestHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/RequestHandler.java</FilePath>
<LineStart>128</LineStart>
<Snippet>        }

        String overrideViewUri = RequestHandler.getOverrideViewUri(request.getPathInfo());

        String requestMissingErrorMessage = &quot;Unknown request [&quot; + defaultRequestUri + &quot;]; this request does not exist or cannot be called directly.&quot;;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="2E3C0BD127711B6ECA83C5D70E1B6B1D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>ProductEvents.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/product/ProductEvents.java</FilePath>
<LineStart>805</LineStart>
<Snippet>        //GenericValue userLogin = (GenericValue) request.getSession().getAttribute(&quot;userLogin&quot;);
        String productId = request.getParameter(&quot;productId&quot;);
        String productFeatureId = request.getParameter(&quot;productFeatureId&quot;);

        if (UtilValidate.isEmpty(productId) || UtilValidate.isEmpty(productFeatureId)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="D027DAA9-A3BE-49E4-BDBF-3DFF657F84CA" iid="89798F22DFD3C6305678699010CE2788">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>CmsEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/cms/CmsEvents.java</FilePath>
<LineStart>107</LineStart>
<Snippet>            pathInfo = overrideViewUri;
        } else {
            pathInfo = request.getPathInfo();
            if (targetRequest.equals(actualRequest) &amp;&amp; pathInfo != null) {
                // was called directly -- path info is everything after the request</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="E7935BB142CB8DC2AF7AAC4EDB12B4F1">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 130, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>130</LineStart>
<Snippet>        }
        checkAfterNewline();
        super.write(s, offset, i - offset);
    }
}</Snippet>
                            </Primary>
                            <Source>
<FileName>XmlRpcEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/XmlRpcEventHandler.java</FilePath>
<LineStart>103</LineStart>
<Snippet>                // read the inputstream buffer
                String line;
                reader = new BufferedReader(new InputStreamReader(request.getInputStream()));
                while ((line = reader.readLine()) != null) {
                    buf.append(line).append(&quot;\n&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="219FCF6F-A77C-4219-8506-F5A0A0D6BE4A" iid="8191CE95D49BFFDB3044E4706279216A">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method closeEditWrap() in RenderContentAsText.java sends unvalidated data to a web browser on line 244, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>RenderContentAsText.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderContentAsText.java</FilePath>
<LineStart>244</LineStart>
<Snippet>                ServletContext servletContext = request.getSession().getServletContext();
                RequestHandler rh = (RequestHandler) servletContext.getAttribute(&quot;_REQUEST_HANDLER_&quot;);
                out.append(rh.makeLink(request, response, &quot;/&quot; + fullRequest, false, false, true));
                out.write(&quot;\&quot;&gt;Edit&lt;/a&gt;&quot;);
                out.write(&quot;&lt;/div&gt;&quot;);</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>575</LineStart>
<Snippet>        while (e.hasMoreElements()) {
            String name = e.nextElement();
            request.setAttribute(name, request.getParameter(name));
        }
    }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="47620C95-01F7-474F-9944-4C54A9A43679" iid="851EEFD60652A9D11B2F7CE2B0F2179B">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method closeEditWrap() in RenderContentAsText.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RenderContentAsText.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderContentAsText.java</FilePath>
<LineStart>244</LineStart>
<Snippet>                ServletContext servletContext = request.getSession().getServletContext();
                RequestHandler rh = (RequestHandler) servletContext.getAttribute(&quot;_REQUEST_HANDLER_&quot;);
                out.append(rh.makeLink(request, response, &quot;/&quot; + fullRequest, false, false, true));
                out.write(&quot;\&quot;&gt;Edit&lt;/a&gt;&quot;);
                out.write(&quot;&lt;/div&gt;&quot;);</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>104</LineStart>
<Snippet>        persistMap.put(&quot;userLogin&quot;, userLogin);
        try {
            Map&lt;String, Object&gt; persistResult = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, persistMap);
            contentId = (String)persistResult.get(&quot;contentId&quot;);
            //request.setAttribute(&quot;contentId&quot;, contentId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="DDC06DFE2934358E1CA23F9E07E0BAD0">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>119</LineStart>
<Snippet>            contentRevisionMap.put(&quot;contentId&quot;, contentId);
            contentRevisionMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentRevisionAndItem&quot;, contentRevisionMap);
            keySet = result.keySet();
            iter = keySet.iterator();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF" iid="F356872949C6CEA24DE144D96ED5A807">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doEndTag() in UrlTag.java sends unvalidated data to a web browser on line 57, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>UrlTag.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/taglib/UrlTag.java</FilePath>
<LineStart>57</LineStart>
<Snippet>
        try {
            getPreviousOut().print(newURL);
        } catch (IOException e) {
            if (UtilJ2eeCompat.useNestedJspException(pageContext.getServletContext())) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>505</LineStart>
<Snippet>        Map&lt;String, Object&gt; ftlResults = null;
        try {
            ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
        } catch (ServiceAuthException e) {
            String msg = e.getMessage();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="E79864511A41AF9DB2ABE4022CF5482C">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method close() in OfbizUrlTransform.java sends unvalidated data to a web browser on line 205, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>OfbizUrlTransform.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/ftl/OfbizUrlTransform.java</FilePath>
<LineStart>205</LineStart>
<Snippet>                        String requestUrl = buf.toString();
                        newURL.append(requestUrl);
                        out.write(newURL.toString());
                    } else if (req != null) {
                        HttpServletRequest request = (HttpServletRequest) req.getWrappedObject();</Snippet>
                            </Primary>
                            <Source>
<FileName>LoginWorker.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/LoginWorker.java</FilePath>
<LineStart>264</LineStart>
<Snippet>
                // keep the previous request name in the session
                session.setAttribute(&quot;_PREVIOUS_REQUEST_&quot;, request.getPathInfo());

                // NOTE: not using the old _PREVIOUS_PARAMS_ attribute at all because it was a security hole as it was used to put data in the URL (never encrypted) that was originally in a form field that may have been encrypted</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="1715D42B52BD474DFA501E05CC2162AE">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method close() in OfbizUrlTransform.java sends unvalidated data to a web browser on line 205, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>OfbizUrlTransform.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/ftl/OfbizUrlTransform.java</FilePath>
<LineStart>205</LineStart>
<Snippet>                        String requestUrl = buf.toString();
                        newURL.append(requestUrl);
                        out.write(newURL.toString());
                    } else if (req != null) {
                        HttpServletRequest request = (HttpServletRequest) req.getWrappedObject();</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>268</LineStart>
<Snippet>        if (!&quot;image/png&quot;.equals(mimType)) {
            session.setAttribute(&quot;frameContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
            session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;The selected image type is incorrect, please select the image type *.PNG to upload.&quot;);
            return &quot;error&quot;;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="D027DAA9-A3BE-49E4-BDBF-3DFF657F84CA" iid="94524AB5BFC06C118684E2CC3A1312BA">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>RequestHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/RequestHandler.java</FilePath>
<LineStart>128</LineStart>
<Snippet>        }

        String overrideViewUri = RequestHandler.getOverrideViewUri(request.getPathInfo());

        String requestMissingErrorMessage = &quot;Unknown request [&quot; + defaultRequestUri + &quot;]; this request does not exist or cannot be called directly.&quot;;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="DB9B9815B20FB78DB1F0AD7D2DBA0BB2">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>564</LineStart>
<Snippet>        session.setAttribute(&quot;_CLIENT_REMOTE_ADDR_&quot;, request.getRemoteAddr());
        session.setAttribute(&quot;_CLIENT_REMOTE_HOST_&quot;, request.getRemoteHost());
        session.setAttribute(&quot;_CLIENT_REMOTE_USER_&quot;, request.getRemoteUser());
    }
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="E5EB69CFD0A156B0306D9ED994DFEB65">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 115, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>115</LineStart>
<Snippet>    @Override
    public void write(String s) throws IOException {
        write(s, 0, s.length());
    }
</Snippet>
                            </Primary>
                            <Source>
<FileName>XmlRpcEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/XmlRpcEventHandler.java</FilePath>
<LineStart>103</LineStart>
<Snippet>                // read the inputstream buffer
                String line;
                reader = new BufferedReader(new InputStreamReader(request.getInputStream()));
                while ((line = reader.readLine()) != null) {
                    buf.append(line).append(&quot;\n&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="907E941C86CF651A4AD904C079AF68D6">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 124, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>124</LineStart>
<Snippet>            if (s.charAt(i) == '\n') {
                checkAfterNewline();
                super.write(s, offset, i - offset + 1);
                offset = i + 1;
                lastWasNewline = true;</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>127</LineStart>
<Snippet>
            Object value = null;
            String[] paramArr = request.getParameterValues(name);
            if (paramArr != null) {
                if (paramArr.length &gt; 1) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="0BBF988C2910969174675DB3100B56DB">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method toJsonObjectList() in EbayStoreOptions.java sends unvalidated data to a web browser on line 273, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EbayStoreOptions.java</FileName>
<FilePath>specialpurpose/ebaystore/src/org/ofbiz/ebaystore/EbayStoreOptions.java</FilePath>
<LineStart>273</LineStart>
<Snippet>            try {
                out = response.getWriter();
                out.write(jsonStr);
                out.flush();
            } catch (IOException e) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>505</LineStart>
<Snippet>        Map&lt;String, Object&gt; ftlResults = null;
        try {
            ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
        } catch (ServiceAuthException e) {
            String msg = e.getMessage();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="71CCA76120B9753BFA3B3223069FCEEC">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method close() in OfbizUrlTransform.java sends unvalidated data to a web browser on line 205, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>OfbizUrlTransform.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/ftl/OfbizUrlTransform.java</FilePath>
<LineStart>205</LineStart>
<Snippet>                        String requestUrl = buf.toString();
                        newURL.append(requestUrl);
                        out.write(newURL.toString());
                    } else if (req != null) {
                        HttpServletRequest request = (HttpServletRequest) req.getWrappedObject();</Snippet>
                            </Primary>
                            <Source>
<FileName>LoginEvents.java</FileName>
<FilePath>applications/securityext/src/org/ofbiz/securityext/login/LoginEvents.java</FilePath>
<LineStart>77</LineStart>
<Snippet>
            String username = request.getParameter(&quot;USERNAME&quot;);
            String password = request.getParameter(&quot;PASSWORD&quot;);

            if ((username != null) &amp;&amp; (&quot;true&quot;.equalsIgnoreCase(UtilProperties.getPropertyValue(&quot;security.properties&quot;, &quot;username.lowercase&quot;)))) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="0265EDDF2863A286662FAAF3F436FE89">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method toJsonObjectList() in ImageManagementServices.java sends unvalidated data to a web browser on line 779, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ImageManagementServices.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/ImageManagementServices.java</FilePath>
<LineStart>779</LineStart>
<Snippet>            try {
                out = response.getWriter();
                out.write(jsonStr);
                out.flush();
            } catch (IOException e) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>575</LineStart>
<Snippet>        while (e.hasMoreElements()) {
            String name = e.nextElement();
            request.setAttribute(name, request.getParameter(name));
        }
    }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="48DF6764AAB7576C2348A83E40585D68">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1499</LineStart>
<Snippet>        String custRequestId = null;
        try {
            result = dispatcher.runSync(&quot;createCustRequestFromCart&quot;,
                    UtilMisc.toMap(&quot;cart&quot;, cart,
                            &quot;userLogin&quot;, userLogin));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="907C0BD7AD98CB781A2DFF335D3A0148">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>LoginWorker.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/LoginWorker.java</FilePath>
<LineStart>264</LineStart>
<Snippet>
                // keep the previous request name in the session
                session.setAttribute(&quot;_PREVIOUS_REQUEST_&quot;, request.getPathInfo());

                // NOTE: not using the old _PREVIOUS_PARAMS_ attribute at all because it was a security hole as it was used to put data in the URL (never encrypted) that was originally in a form field that may have been encrypted</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="D027DAA9-A3BE-49E4-BDBF-3DFF657F84CA" iid="418CD2EB0D501EFE95CA3A95915AAA1C">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>ShipmentEvents.java</FileName>
<FilePath>applications/product/src/org/ofbiz/shipment/shipment/ShipmentEvents.java</FilePath>
<LineStart>50</LineStart>
<Snippet>        String shipmentId = request.getParameter(&quot;shipmentId&quot;);
        String shipmentRouteSegmentId = request.getParameter(&quot;shipmentRouteSegmentId&quot;);
        String shipmentPackageSeqId = request.getParameter(&quot;shipmentPackageSeqId&quot;);

        GenericValue shipmentPackageRouteSeg = null;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="0ED57B9E21E37C29BA735B7D0FBD37EE">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>119</LineStart>
<Snippet>            contentRevisionMap.put(&quot;contentId&quot;, contentId);
            contentRevisionMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentRevisionAndItem&quot;, contentRevisionMap);
            keySet = result.keySet();
            iter = keySet.iterator();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="1A6CB044472BEF18EE525E9B1CAAF712">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ContentManagementEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/ContentManagementEvents.java</FilePath>
<LineStart>288</LineStart>
<Snippet>                        serviceIn.put(&quot;targetOperationList&quot;, targetOperationList);
                        serviceIn.put(&quot;contentPurposeList&quot;, contentPurposeList);
                        results = dispatcher.runSync(&quot;createContentAssoc&quot;, serviceIn);
                        responseMessage = (String)results.get(ModelService.RESPONSE_MESSAGE);
                        if (UtilValidate.isNotEmpty(responseMessage)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="FD4BCCF0EA9C9E5A9A976D38CD0DC391">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>ShipmentEvents.java</FileName>
<FilePath>applications/product/src/org/ofbiz/shipment/shipment/ShipmentEvents.java</FilePath>
<LineStart>48</LineStart>
<Snippet>        Delegator delegator = (Delegator) request.getAttribute(&quot;delegator&quot;);

        String shipmentId = request.getParameter(&quot;shipmentId&quot;);
        String shipmentRouteSegmentId = request.getParameter(&quot;shipmentRouteSegmentId&quot;);
        String shipmentPackageSeqId = request.getParameter(&quot;shipmentPackageSeqId&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="12AF265A-8085-459E-A9C9-E0922DFFE1F5" iid="FB5A9E4D84763ADD878D2ACD152CFB34">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1327</LineStart>
<Snippet>        ShoppingCart cart = null;
        try {
            Map&lt;String, Object&gt; outMap = dispatcher.runSync(&quot;loadCartFromShoppingList&quot;,
                    UtilMisc.&lt;String, Object&gt;toMap(&quot;shoppingListId&quot;, shoppingListId,
                    &quot;userLogin&quot;, userLogin));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="75CA7134-B6BE-444A-9815-E739432FCA47" iid="36587CD75E4ADA5C41C5A1700507FB8C">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method run() in EntityField.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>EntityField.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/pseudotag/EntityField.java</FilePath>
<LineStart>249</LineStart>
<Snippet>            if (prefix != null)
                out.print(prefix);
            out.print(fieldString);
            if (suffix != null)
                out.print(suffix);</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceMultiEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceMultiEventHandler.java</FilePath>
<LineStart>308</LineStart>
<Snippet>                Map&lt;String, Object&gt; result = null;
                try {
                    result = dispatcher.runSync(serviceName, serviceContext);
                } catch (ServiceAuthException e) {
                    // not logging since the service engine already did</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF" iid="C01826E6E66AF1BE45D231C600B842F4">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doEndTag() in UrlTag.java sends unvalidated data to a web browser on line 57, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>UrlTag.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/taglib/UrlTag.java</FilePath>
<LineStart>57</LineStart>
<Snippet>
        try {
            getPreviousOut().print(newURL);
        } catch (IOException e) {
            if (UtilJ2eeCompat.useNestedJspException(pageContext.getServletContext())) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CoreEvents.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/CoreEvents.java</FilePath>
<LineStart>412</LineStart>
<Snippet>        try {
            if (null!=request.getParameter(&quot;_RUN_SYNC_&quot;) &amp;&amp; request.getParameter(&quot;_RUN_SYNC_&quot;).equals(&quot;Y&quot;)) {
                syncServiceResult = dispatcher.runSync(serviceName, serviceContext);
            } else {
                dispatcher.schedule(jobName, poolName, serviceName, serviceContext, startTime, frequency, interval, count, endTime, maxRetry);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="822245C9577C2C30AB0DAD94F8D4E812">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>LoginWorker.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/LoginWorker.java</FilePath>
<LineStart>397</LineStart>
<Snippet>            // get the visit id to pass to the userLogin for history
            String visitId = VisitHandler.getVisitId(session);
            result = dispatcher.runSync(&quot;userLogin&quot;, UtilMisc.toMap(&quot;login.username&quot;, username, &quot;login.password&quot;, password, &quot;visitId&quot;, visitId, &quot;locale&quot;, UtilHttp.getLocale(request)));
        } catch (GenericServiceException e) {
            Debug.logError(e, &quot;Error calling userLogin service&quot;, module);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="12AF265A-8085-459E-A9C9-E0922DFFE1F5" iid="7BB4E37031546B2CCC94F9CDA9298ADC">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingListEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppinglist/ShoppingListEvents.java</FilePath>
<LineStart>349</LineStart>
<Snippet>        Map&lt;String, Object&gt; result = null;
        try {
            result = dispatcher.runSync(&quot;updateShoppingListItem&quot;, serviceInMap);
        } catch (GenericServiceException e) {
            String errMsg = UtilProperties.getMessage(resource_error,&quot;shoppingListEvents.error_calling_update&quot;, locale) + &quot;: &quot;  + e.toString();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="47620C95-01F7-474F-9944-4C54A9A43679" iid="048D088740C94E3CACFE4332CBA98D21">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method closeEditWrap() in RenderContentTransform.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RenderContentTransform.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderContentTransform.java</FilePath>
<LineStart>144</LineStart>
<Snippet>                ServletContext servletContext = request.getSession().getServletContext();
                RequestHandler rh = (RequestHandler) servletContext.getAttribute(&quot;_REQUEST_HANDLER_&quot;);
                out.append(rh.makeLink(request, response, &quot;/&quot; + fullRequest, false, false, true));
                out.write(&quot;\&quot;&gt;Edit&lt;/a&gt;&quot;);
                out.write(&quot;&lt;/div&gt;&quot;);</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>119</LineStart>
<Snippet>            contentRevisionMap.put(&quot;contentId&quot;, contentId);
            contentRevisionMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentRevisionAndItem&quot;, contentRevisionMap);
            keySet = result.keySet();
            iter = keySet.iterator();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="EBFD8B359C56BED9D89C3DDFC487218B">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>558</LineStart>
<Snippet>        session.setAttribute(&quot;_CLIENT_LOCALE_&quot;, request.getLocale());
        session.setAttribute(&quot;_CLIENT_REQUEST_&quot;, fullRequestUrl.toString());
        session.setAttribute(&quot;_CLIENT_USER_AGENT_&quot;, request.getHeader(&quot;User-Agent&quot;) != null ? request.getHeader(&quot;User-Agent&quot;) : &quot;&quot;);
        session.setAttribute(&quot;_CLIENT_REFERER_&quot;, request.getHeader(&quot;Referer&quot;) != null ? request.getHeader(&quot;Referer&quot;) : &quot;&quot;);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="3EF07FAECAA4C7849ED79EB646B0E886">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 124, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>124</LineStart>
<Snippet>            if (s.charAt(i) == '\n') {
                checkAfterNewline();
                super.write(s, offset, i - offset + 1);
                offset = i + 1;
                lastWasNewline = true;</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>402</LineStart>
<Snippet>        if(UtilValidate.isEmpty(request.getParameter(&quot;frameContentId&quot;))) {
            if (UtilValidate.isNotEmpty(request.getParameter(&quot;frameExistContentId&quot;)) &amp;&amp; UtilValidate.isNotEmpty(request.getParameter(&quot;frameExistDataResourceId&quot;))) {
                session.setAttribute(&quot;frameExistContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
                session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="4215FC9C704E85690186BA18480032AD">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>115</LineStart>
<Snippet>    @Override
    public void write(String s) throws IOException {
        write(s, 0, s.length());
    }
</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceEventHandler.java</FilePath>
<LineStart>337</LineStart>
<Snippet>                dispatcher.runAsync(serviceName, serviceContext);
            } else {
                result = dispatcher.runSync(serviceName, serviceContext);
            }
        } catch (ServiceAuthException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="8A2A66F292294F42912F624B8BC396F2">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 115, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>115</LineStart>
<Snippet>    @Override
    public void write(String s) throws IOException {
        write(s, 0, s.length());
    }
</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>262</LineStart>
<Snippet>        if (UtilValidate.isEmpty(imageName) || UtilValidate.isEmpty(imageData)) {
            session.setAttribute(&quot;frameContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
            session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;There is no frame image, please select the image type *.PNG  uploading.&quot;);
            return &quot;error&quot;;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="68E8D7A7350E838EFEFECD1AA0FFB5C9">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 115, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>115</LineStart>
<Snippet>    @Override
    public void write(String s) throws IOException {
        write(s, 0, s.length());
    }
</Snippet>
                            </Primary>
                            <Source>
<FileName>CommonEvents.java</FileName>
<FilePath>framework/common/src/org/ofbiz/common/CommonEvents.java</FilePath>
<LineStart>231</LineStart>
<Snippet>    /** Simple event to set the users per-session currency uom value */
    public static String setSessionCurrencyUom(HttpServletRequest request, HttpServletResponse response) {
        String currencyUom = request.getParameter(&quot;currencyUom&quot;);
        if (UtilValidate.isNotEmpty(currencyUom)) {
            // update the session</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="EBFD8B359C56BED9D89C3DDFC487218C">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>558</LineStart>
<Snippet>        session.setAttribute(&quot;_CLIENT_LOCALE_&quot;, request.getLocale());
        session.setAttribute(&quot;_CLIENT_REQUEST_&quot;, fullRequestUrl.toString());
        session.setAttribute(&quot;_CLIENT_USER_AGENT_&quot;, request.getHeader(&quot;User-Agent&quot;) != null ? request.getHeader(&quot;User-Agent&quot;) : &quot;&quot;);
        session.setAttribute(&quot;_CLIENT_REFERER_&quot;, request.getHeader(&quot;Referer&quot;) != null ? request.getHeader(&quot;Referer&quot;) : &quot;&quot;);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="75CA7134-B6BE-444A-9815-E739432FCA47" iid="6AD40421F7DA4A28296FD3C1FBF564C3">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method run() in InputValue.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>InputValue.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/pseudotag/InputValue.java</FilePath>
<LineStart>145</LineStart>
<Snippet>                inputValue + &quot;\&quot;&quot;);
        } else {
            pageContext.getOut().print(inputValue);
        }
    }</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>119</LineStart>
<Snippet>            contentRevisionMap.put(&quot;contentId&quot;, contentId);
            contentRevisionMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentRevisionAndItem&quot;, contentRevisionMap);
            keySet = result.keySet();
            iter = keySet.iterator();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="88059F32032D67E6E188996BB9F44469">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>183</LineStart>
<Snippet>        Map&lt;String, Object&gt; results = null;
        try {
            results = dispatcher.runSync(&quot;renderCompDocPdf&quot;, mapIn);
        } catch (ServiceAuthException e) {
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, e.toString());</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5B9CE105-7C9E-402F-A6B5-3BB9EACDEE95" iid="08761D735ACFFD68926DD90AEB1171A8">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method streamContent() in UtilHttp.java sends unvalidated data to a web browser on line 1033, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>1033</LineStart>
<Snippet>        try {
            while ((read = bis.read(buffer, 0, buffer.length)) != -1) {
                bos.write(buffer, 0, read);
            }
        } catch (IOException e) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CoreEvents.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/CoreEvents.java</FilePath>
<LineStart>412</LineStart>
<Snippet>        try {
            if (null!=request.getParameter(&quot;_RUN_SYNC_&quot;) &amp;&amp; request.getParameter(&quot;_RUN_SYNC_&quot;).equals(&quot;Y&quot;)) {
                syncServiceResult = dispatcher.runSync(serviceName, serviceContext);
            } else {
                dispatcher.schedule(jobName, poolName, serviceName, serviceContext, startTime, frequency, interval, count, endTime, maxRetry);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="530AEAA4DEA2D747486F0F4AB6BCFF18">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 115, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>115</LineStart>
<Snippet>    @Override
    public void write(String s) throws IOException {
        write(s, 0, s.length());
    }
</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>559</LineStart>
<Snippet>        session.setAttribute(&quot;_CLIENT_REQUEST_&quot;, fullRequestUrl.toString());
        session.setAttribute(&quot;_CLIENT_USER_AGENT_&quot;, request.getHeader(&quot;User-Agent&quot;) != null ? request.getHeader(&quot;User-Agent&quot;) : &quot;&quot;);
        session.setAttribute(&quot;_CLIENT_REFERER_&quot;, request.getHeader(&quot;Referer&quot;) != null ? request.getHeader(&quot;Referer&quot;) : &quot;&quot;);

        session.setAttribute(&quot;_CLIENT_FORWARDED_FOR_&quot;, request.getHeader(&quot;X-Forwarded-For&quot;));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="6A9734891CBDD59EC406C446F187EC77">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>ICalWorker.java</FileName>
<FilePath>applications/workeffort/src/org/ofbiz/workeffort/workeffort/ICalWorker.java</FilePath>
<LineStart>285</LineStart>
<Snippet>        HttpSession session = request.getSession();
        LocalDispatcher dispatcher = (LocalDispatcher) request.getAttribute(&quot;dispatcher&quot;);
        Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;userLogin&quot;, serviceMap);
        if (ServiceUtil.isError(result) || ServiceUtil.isFailure(result)) {
            return;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="83A22FE6FF35D0CFBB2A922AB1AD5527">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 124, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>124</LineStart>
<Snippet>            if (s.charAt(i) == '\n') {
                checkAfterNewline();
                super.write(s, offset, i - offset + 1);
                offset = i + 1;
                lastWasNewline = true;</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>688</LineStart>
<Snippet>        
        // TODO: the code below here needs some cleanups
        String billToCustomerPartyId = request.getParameter(&quot;billToCustomerPartyId_o_0&quot;);
        if (UtilValidate.isEmpty(billToCustomerPartyId) &amp;&amp; UtilValidate.isEmpty(supplierPartyId)) {
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, UtilProperties.getMessage(resource_error, &quot;OrderCouldNotInitPurchaseOrder&quot;, locale));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="A7B8E7D7E90072B4C520977BE15A4244">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>CheckOutEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/CheckOutEvents.java</FilePath>
<LineStart>384</LineStart>
<Snippet>        if (UtilValidate.isNotEmpty(taxAuthPartyGeoIds)) {
            try {
                Map&lt;String, Object&gt; createCustomerTaxAuthInfoResult = dispatcher.runSync(&quot;createCustomerTaxAuthInfo&quot;,
                        UtilMisc.toMap(&quot;partyId&quot;, cart.getPartyId(), &quot;taxAuthPartyGeoIds&quot;, taxAuthPartyGeoIds, &quot;partyTaxId&quot;, partyTaxId, &quot;isExempt&quot;, isExempt));
                ServiceUtil.getMessages(request, createCustomerTaxAuthInfoResult, null);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="2C569E8FBF30F21F0BDF17186097E5B4">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ShipmentEvents.java</FileName>
<FilePath>applications/product/src/org/ofbiz/shipment/shipment/ShipmentEvents.java</FilePath>
<LineStart>95</LineStart>
<Snippet>        GenericValue userLogin = (GenericValue)request.getSession().getAttribute(&quot;userLogin&quot;);

        String shipmentId = request.getParameter(&quot;shipmentIdReceived&quot;);
        String forceShipmentReceived = request.getParameter(&quot;forceShipmentReceived&quot;);
        if (UtilValidate.isNotEmpty(shipmentId) &amp;&amp; &quot;Y&quot;.equals(forceShipmentReceived)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="15E0114CD08C8E7614C9AABBD9C7E32B">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method toJsonObjectList() in EbayStoreOptions.java sends unvalidated data to a web browser on line 273, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EbayStoreOptions.java</FileName>
<FilePath>specialpurpose/ebaystore/src/org/ofbiz/ebaystore/EbayStoreOptions.java</FilePath>
<LineStart>273</LineStart>
<Snippet>            try {
                out = response.getWriter();
                out.write(jsonStr);
                out.flush();
            } catch (IOException e) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>104</LineStart>
<Snippet>        persistMap.put(&quot;userLogin&quot;, userLogin);
        try {
            Map&lt;String, Object&gt; persistResult = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, persistMap);
            contentId = (String)persistResult.get(&quot;contentId&quot;);
            //request.setAttribute(&quot;contentId&quot;, contentId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="C815EE337652AFE094DAF2A17DD12FC4">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method render() in Section.java sends unvalidated data to a web browser on line 100, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Section.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/region/Section.java</FilePath>
<LineStart>100</LineStart>
<Snippet>                    response.getOutputStream().print(content);
                } else {
                    response.getWriter().print(content);
                }
            } else if (&quot;default&quot;.equals(type) || &quot;region&quot;.equals(type) || &quot;resource&quot;.equals(type) || &quot;jpublish&quot;.equals(type)) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>575</LineStart>
<Snippet>        while (e.hasMoreElements()) {
            String name = e.nextElement();
            request.setAttribute(name, request.getParameter(name));
        }
    }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="DD3EFBC9C91EABF6B92597FC83FA683D">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method openEditWrap() in RenderContentTransform.java sends unvalidated data to a web browser on line 129, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>RenderContentTransform.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderContentTransform.java</FilePath>
<LineStart>129</LineStart>
<Snippet>            public void openEditWrap(Writer out, String editStyle) throws IOException {
                String divStr = &quot;&lt;div class=\&quot;&quot; + editStyle + &quot;\&quot;&gt;&quot;;
                out.write(divStr);
            }
</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>505</LineStart>
<Snippet>        Map&lt;String, Object&gt; ftlResults = null;
        try {
            ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
        } catch (ServiceAuthException e) {
            String msg = e.getMessage();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="0CA52D3A8428797EDDD4210B86264381">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method outputError() in ServiceStreamHandler.java sends unvalidated data to a web browser on line 110, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ServiceStreamHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceStreamHandler.java</FilePath>
<LineStart>110</LineStart>
<Snippet>        PrintStream out = new PrintStream(stream);
        if (message != null)
            out.println(&quot;Error message: &quot; + message);
        if (error != null)
            out.println(&quot;Exception occured: &quot; + error.toString());</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>505</LineStart>
<Snippet>        Map&lt;String, Object&gt; ftlResults = null;
        try {
            ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
        } catch (ServiceAuthException e) {
            String msg = e.getMessage();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="CABE95FEB804853429AFD835E8D6EDF3">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>104</LineStart>
<Snippet>        persistMap.put(&quot;userLogin&quot;, userLogin);
        try {
            Map&lt;String, Object&gt; persistResult = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, persistMap);
            contentId = (String)persistResult.get(&quot;contentId&quot;);
            //request.setAttribute(&quot;contentId&quot;, contentId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="BACF41870DD8C1ED48ECF477425E8909">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method outputError() in ServiceStreamHandler.java sends unvalidated data to a web browser on line 110, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ServiceStreamHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceStreamHandler.java</FilePath>
<LineStart>110</LineStart>
<Snippet>        PrintStream out = new PrintStream(stream);
        if (message != null)
            out.println(&quot;Error message: &quot; + message);
        if (error != null)
            out.println(&quot;Exception occured: &quot; + error.toString());</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>575</LineStart>
<Snippet>        while (e.hasMoreElements()) {
            String name = e.nextElement();
            request.setAttribute(name, request.getParameter(name));
        }
    }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF" iid="40734C9BC8D44093E13350A04AC62879">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method run() in InputValue.java sends unvalidated data to a web browser on line 145, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>InputValue.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/pseudotag/InputValue.java</FilePath>
<LineStart>145</LineStart>
<Snippet>                inputValue + &quot;\&quot;&quot;);
        } else {
            pageContext.getOut().print(inputValue);
        }
    }</Snippet>
                            </Primary>
                            <Source>
<FileName>CoreEvents.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/CoreEvents.java</FilePath>
<LineStart>412</LineStart>
<Snippet>        try {
            if (null!=request.getParameter(&quot;_RUN_SYNC_&quot;) &amp;&amp; request.getParameter(&quot;_RUN_SYNC_&quot;).equals(&quot;Y&quot;)) {
                syncServiceResult = dispatcher.runSync(serviceName, serviceContext);
            } else {
                dispatcher.schedule(jobName, poolName, serviceName, serviceContext, startTime, frequency, interval, count, endTime, maxRetry);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="2C569E8FBF30F21F0BDF17186097E5B5">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>ShipmentEvents.java</FileName>
<FilePath>applications/product/src/org/ofbiz/shipment/shipment/ShipmentEvents.java</FilePath>
<LineStart>95</LineStart>
<Snippet>        GenericValue userLogin = (GenericValue)request.getSession().getAttribute(&quot;userLogin&quot;);

        String shipmentId = request.getParameter(&quot;shipmentIdReceived&quot;);
        String forceShipmentReceived = request.getParameter(&quot;forceShipmentReceived&quot;);
        if (UtilValidate.isNotEmpty(shipmentId) &amp;&amp; &quot;Y&quot;.equals(forceShipmentReceived)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="666CECA7902B70B6E30D5A0C66C69AB8">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method close() in OfbizUrlTransform.java sends unvalidated data to a web browser on line 205, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>OfbizUrlTransform.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/ftl/OfbizUrlTransform.java</FilePath>
<LineStart>205</LineStart>
<Snippet>                        String requestUrl = buf.toString();
                        newURL.append(requestUrl);
                        out.write(newURL.toString());
                    } else if (req != null) {
                        HttpServletRequest request = (HttpServletRequest) req.getWrappedObject();</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>564</LineStart>
<Snippet>        session.setAttribute(&quot;_CLIENT_REMOTE_ADDR_&quot;, request.getRemoteAddr());
        session.setAttribute(&quot;_CLIENT_REMOTE_HOST_&quot;, request.getRemoteHost());
        session.setAttribute(&quot;_CLIENT_REMOTE_USER_&quot;, request.getRemoteUser());
    }
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="0D4EA93D1D8D42E0A7497DED7CE58C63">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method outputError() in ServiceStreamHandler.java sends unvalidated data to a web browser on line 110, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ServiceStreamHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceStreamHandler.java</FilePath>
<LineStart>110</LineStart>
<Snippet>        PrintStream out = new PrintStream(stream);
        if (message != null)
            out.println(&quot;Error message: &quot; + message);
        if (error != null)
            out.println(&quot;Exception occured: &quot; + error.toString());</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceMultiEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceMultiEventHandler.java</FilePath>
<LineStart>308</LineStart>
<Snippet>                Map&lt;String, Object&gt; result = null;
                try {
                    result = dispatcher.runSync(serviceName, serviceContext);
                } catch (ServiceAuthException e) {
                    // not logging since the service engine already did</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF" iid="DBDBE8669C43DC1A71ECB968EB86DB1B">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method run() in EntityField.java sends unvalidated data to a web browser on line 249, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EntityField.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/pseudotag/EntityField.java</FilePath>
<LineStart>249</LineStart>
<Snippet>            if (prefix != null)
                out.print(prefix);
            out.print(fieldString);
            if (suffix != null)
                out.print(suffix);</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceMultiEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceMultiEventHandler.java</FilePath>
<LineStart>308</LineStart>
<Snippet>                Map&lt;String, Object&gt; result = null;
                try {
                    result = dispatcher.runSync(serviceName, serviceContext);
                } catch (ServiceAuthException e) {
                    // not logging since the service engine already did</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="5639CC1665E5DFAF86690FE8714AFA85">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method close() in OfbizUrlTransform.java sends unvalidated data to a web browser on line 205, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>OfbizUrlTransform.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/ftl/OfbizUrlTransform.java</FilePath>
<LineStart>205</LineStart>
<Snippet>                        String requestUrl = buf.toString();
                        newURL.append(requestUrl);
                        out.write(newURL.toString());
                    } else if (req != null) {
                        HttpServletRequest request = (HttpServletRequest) req.getWrappedObject();</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1354</LineStart>
<Snippet>        ShoppingCart cart = null;
        try {
            Map&lt;String, Object&gt; outMap = dispatcher.runSync(&quot;loadCartFromQuote&quot;,
                    UtilMisc.&lt;String, Object&gt;toMap(&quot;quoteId&quot;, quoteId,
                            &quot;applyQuoteAdjustments&quot;, &quot;true&quot;,</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="D027DAA9-A3BE-49E4-BDBF-3DFF657F84CA" iid="F44549DF2173146910490F11B2D411FE">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>127</LineStart>
<Snippet>
            Object value = null;
            String[] paramArr = request.getParameterValues(name);
            if (paramArr != null) {
                if (paramArr.length &gt; 1) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="A613515AD135A8E3F5465657EB018A0D">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method toJsonObjectList() in EbayStoreOptions.java sends unvalidated data to a web browser on line 273, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EbayStoreOptions.java</FileName>
<FilePath>specialpurpose/ebaystore/src/org/ofbiz/ebaystore/EbayStoreOptions.java</FilePath>
<LineStart>273</LineStart>
<Snippet>            try {
                out = response.getWriter();
                out.write(jsonStr);
                out.flush();
            } catch (IOException e) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>119</LineStart>
<Snippet>            contentRevisionMap.put(&quot;contentId&quot;, contentId);
            contentRevisionMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentRevisionAndItem&quot;, contentRevisionMap);
            keySet = result.keySet();
            iter = keySet.iterator();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="AC8DFA608EEAA35B3F5C4D919E676691">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1994</LineStart>
<Snippet>                    appendOrderItemMap.put(&quot;shipGroupSeqId&quot;, shipGroupSeqId);
                    try {
                        Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;appendOrderItem&quot;, appendOrderItemMap);
                        request.setAttribute(&quot;shoppingCart&quot;, (ShoppingCart) result.get(&quot;shoppingCart&quot;));
                        ShoppingCartEvents.destroyCart(request, response);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="D027DAA9-A3BE-49E4-BDBF-3DFF657F84CA" iid="9664DB5EFBD7A6A6C88F9FD67A69242E">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>945</LineStart>
<Snippet>            newCart = cartList.remove(cartIndex);
        } else {
            String productStoreId = request.getParameter(&quot;productStoreId&quot;);
            if (UtilValidate.isNotEmpty(productStoreId)) {
                session.setAttribute(&quot;productStoreId&quot;, productStoreId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="8CBB39187466D76E3257CB047B28AF34">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1535</LineStart>
<Snippet>
        // TODO: re-factor and move this inside the ShoppingCart constructor
        String orderMode = request.getParameter(&quot;orderMode&quot;);
        if (orderMode != null) {
            cart.setOrderType(orderMode);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="12FFE7267F7850E2A643804AB0DC75AD">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method toJsonObjectList() in ImageManagementServices.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ImageManagementServices.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/ImageManagementServices.java</FilePath>
<LineStart>779</LineStart>
<Snippet>            try {
                out = response.getWriter();
                out.write(jsonStr);
                out.flush();
            } catch (IOException e) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceMultiEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceMultiEventHandler.java</FilePath>
<LineStart>308</LineStart>
<Snippet>                Map&lt;String, Object&gt; result = null;
                try {
                    result = dispatcher.runSync(serviceName, serviceContext);
                } catch (ServiceAuthException e) {
                    // not logging since the service engine already did</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="C9ACBA6F2E8E99AB6A7B404449ED96FA">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 124, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>124</LineStart>
<Snippet>            if (s.charAt(i) == '\n') {
                checkAfterNewline();
                super.write(s, offset, i - offset + 1);
                offset = i + 1;
                lastWasNewline = true;</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>262</LineStart>
<Snippet>        if (UtilValidate.isEmpty(imageName) || UtilValidate.isEmpty(imageData)) {
            session.setAttribute(&quot;frameContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
            session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;There is no frame image, please select the image type *.PNG  uploading.&quot;);
            return &quot;error&quot;;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="7524AE90FABCB75F740018268A138001">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method close() in OfbizUrlTransform.java sends unvalidated data to a web browser on line 205, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>OfbizUrlTransform.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/ftl/OfbizUrlTransform.java</FilePath>
<LineStart>205</LineStart>
<Snippet>                        String requestUrl = buf.toString();
                        newURL.append(requestUrl);
                        out.write(newURL.toString());
                    } else if (req != null) {
                        HttpServletRequest request = (HttpServletRequest) req.getWrappedObject();</Snippet>
                            </Primary>
                            <Source>
<FileName>LoginWorker.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/LoginWorker.java</FilePath>
<LineStart>397</LineStart>
<Snippet>            // get the visit id to pass to the userLogin for history
            String visitId = VisitHandler.getVisitId(session);
            result = dispatcher.runSync(&quot;userLogin&quot;, UtilMisc.toMap(&quot;login.username&quot;, username, &quot;login.password&quot;, password, &quot;visitId&quot;, visitId, &quot;locale&quot;, UtilHttp.getLocale(request)));
        } catch (GenericServiceException e) {
            Debug.logError(e, &quot;Error calling userLogin service&quot;, module);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1C85B63C-0870-45B8-9909-86BA43F68B05" iid="740A68A4ADC2444445314E8D1CD3E7B1">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method closeEditWrap() in RenderContentTransform.java sends unvalidated data to a web browser on line 144, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>RenderContentTransform.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderContentTransform.java</FilePath>
<LineStart>144</LineStart>
<Snippet>                ServletContext servletContext = request.getSession().getServletContext();
                RequestHandler rh = (RequestHandler) servletContext.getAttribute(&quot;_REQUEST_HANDLER_&quot;);
                out.append(rh.makeLink(request, response, &quot;/&quot; + fullRequest, false, false, true));
                out.write(&quot;\&quot;&gt;Edit&lt;/a&gt;&quot;);
                out.write(&quot;&lt;/div&gt;&quot;);</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>119</LineStart>
<Snippet>            contentRevisionMap.put(&quot;contentId&quot;, contentId);
            contentRevisionMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentRevisionAndItem&quot;, contentRevisionMap);
            keySet = result.keySet();
            iter = keySet.iterator();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="FB663735EF2D5AEB1489173C96A7E3F3">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>115</LineStart>
<Snippet>    @Override
    public void write(String s) throws IOException {
        write(s, 0, s.length());
    }
</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>505</LineStart>
<Snippet>        Map&lt;String, Object&gt; ftlResults = null;
        try {
            ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
        } catch (ServiceAuthException e) {
            String msg = e.getMessage();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5B9CE105-7C9E-402F-A6B5-3BB9EACDEE95" iid="D1E75F878FDA6CB1775BE38CF63B9C64">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method streamContent() in UtilHttp.java sends unvalidated data to a web browser on line 1033, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>1033</LineStart>
<Snippet>        try {
            while ((read = bis.read(buffer, 0, buffer.length)) != -1) {
                bos.write(buffer, 0, read);
            }
        } catch (IOException e) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceEventHandler.java</FilePath>
<LineStart>337</LineStart>
<Snippet>                dispatcher.runAsync(serviceName, serviceContext);
            } else {
                result = dispatcher.runSync(serviceName, serviceContext);
            }
        } catch (ServiceAuthException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="787E1A013D061B9B12F50406DC9D8B5D">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>ProductionRunEvents.java</FileName>
<FilePath>applications/manufacturing/src/org/ofbiz/manufacturing/jobshopmgt/ProductionRunEvents.java</FilePath>
<LineStart>94</LineStart>
<Snippet>            inputMap.put(&quot;lotId&quot;, parameters.get(&quot;lotId&quot;));
            inputMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;productionRunDeclareAndProduce&quot;, inputMap);
            if (ServiceUtil.isError(result)) {
                request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, ServiceUtil.getErrorMessage(result));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="15FD5AAF052EF0687F4706DD87158001">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 130, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>130</LineStart>
<Snippet>        }
        checkAfterNewline();
        super.write(s, offset, i - offset);
    }
}</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>268</LineStart>
<Snippet>        if (!&quot;image/png&quot;.equals(mimType)) {
            session.setAttribute(&quot;frameContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
            session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;The selected image type is incorrect, please select the image type *.PNG to upload.&quot;);
            return &quot;error&quot;;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="2CC8284A0201BEBC5BF0AEA41D53D293">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>LoginEvents.java</FileName>
<FilePath>applications/securityext/src/org/ofbiz/securityext/login/LoginEvents.java</FilePath>
<LineStart>77</LineStart>
<Snippet>
            String username = request.getParameter(&quot;USERNAME&quot;);
            String password = request.getParameter(&quot;PASSWORD&quot;);

            if ((username != null) &amp;&amp; (&quot;true&quot;.equalsIgnoreCase(UtilProperties.getPropertyValue(&quot;security.properties&quot;, &quot;username.lowercase&quot;)))) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="FEC045BF8ADF867133744E9339AD3C3F">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 124, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>124</LineStart>
<Snippet>            if (s.charAt(i) == '\n') {
                checkAfterNewline();
                super.write(s, offset, i - offset + 1);
                offset = i + 1;
                lastWasNewline = true;</Snippet>
                            </Primary>
                            <Source>
<FileName>CommonEvents.java</FileName>
<FilePath>framework/common/src/org/ofbiz/common/CommonEvents.java</FilePath>
<LineStart>179</LineStart>
<Snippet>     * setting should be passed as a &quot;newLocale&quot; request parameter. */
    public static String setSessionLocale(HttpServletRequest request, HttpServletResponse response) {
        String localeString = request.getParameter(&quot;newLocale&quot;);
        if (UtilValidate.isNotEmpty(localeString)) {
            UtilHttp.setLocale(request, localeString);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="0CB8AF88752BB68655AE8AFA593DB727">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 124, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>124</LineStart>
<Snippet>            if (s.charAt(i) == '\n') {
                checkAfterNewline();
                super.write(s, offset, i - offset + 1);
                offset = i + 1;
                lastWasNewline = true;</Snippet>
                            </Primary>
                            <Source>
<FileName>AbstractOFBizAuthenticationHandler.java</FileName>
<FilePath>specialpurpose/ldap/src/org/ofbiz/ldap/commons/AbstractOFBizAuthenticationHandler.java</FilePath>
<LineStart>129</LineStart>
<Snippet>
        try {
            loginResult = dispatcher.runSync(&quot;userLogin&quot;, UtilMisc.toMap(&quot;login.username&quot;, username, &quot;login.password&quot;, password, &quot;visitId&quot;, visitId, &quot;locale&quot;, UtilHttp.getLocale(request)));
        } catch (GenericServiceException e) {
            throw new GenericServiceException(e.getLocalizedMessage());</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="D73BBE0DAF2E744BF5459ACC25630294">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>LoginWorker.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/LoginWorker.java</FilePath>
<LineStart>397</LineStart>
<Snippet>            // get the visit id to pass to the userLogin for history
            String visitId = VisitHandler.getVisitId(session);
            result = dispatcher.runSync(&quot;userLogin&quot;, UtilMisc.toMap(&quot;login.username&quot;, username, &quot;login.password&quot;, password, &quot;visitId&quot;, visitId, &quot;locale&quot;, UtilHttp.getLocale(request)));
        } catch (GenericServiceException e) {
            Debug.logError(e, &quot;Error calling userLogin service&quot;, module);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="536588259E12B731C1F4D9E77E5A899E">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method httpEngine() in HttpEngine.java sends unvalidated data to a web browser on line 187, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>HttpEngine.java</FileName>
<FilePath>framework/service/src/org/ofbiz/service/engine/HttpEngine.java</FilePath>
<LineStart>187</LineStart>
<Snippet>            if (errorMessage.length() &gt; 0) {
                response.setContentLength(errorMessage.length());
                out.write(errorMessage.toString());
            } else {
                response.setContentLength(resultString.length());</Snippet>
                            </Primary>
                            <Source>
<FileName>HttpEngine.java</FileName>
<FilePath>framework/service/src/org/ofbiz/service/engine/HttpEngine.java</FilePath>
<LineStart>153</LineStart>
<Snippet>                        dispatcher.runAsync(serviceName, context);
                    } else {
                        result = dispatcher.runSync(serviceName, context);
                    }
                } else {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="EAEBD04D9046874DA7BF98616A84C03F">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ShipmentEvents.java</FileName>
<FilePath>applications/product/src/org/ofbiz/shipment/shipment/ShipmentEvents.java</FilePath>
<LineStart>50</LineStart>
<Snippet>        String shipmentId = request.getParameter(&quot;shipmentId&quot;);
        String shipmentRouteSegmentId = request.getParameter(&quot;shipmentRouteSegmentId&quot;);
        String shipmentPackageSeqId = request.getParameter(&quot;shipmentPackageSeqId&quot;);

        GenericValue shipmentPackageRouteSeg = null;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="1D9D8597CD4A93041DFBC839834848E2">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 115, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>115</LineStart>
<Snippet>    @Override
    public void write(String s) throws IOException {
        write(s, 0, s.length());
    }
</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceEventHandler.java</FilePath>
<LineStart>337</LineStart>
<Snippet>                dispatcher.runAsync(serviceName, serviceContext);
            } else {
                result = dispatcher.runSync(serviceName, serviceContext);
            }
        } catch (ServiceAuthException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="1BA69FFA6BDD9BC2C01545990CA91118">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method close() in OfbizUrlTransform.java sends unvalidated data to a web browser on line 205, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>OfbizUrlTransform.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/ftl/OfbizUrlTransform.java</FilePath>
<LineStart>205</LineStart>
<Snippet>                        String requestUrl = buf.toString();
                        newURL.append(requestUrl);
                        out.write(newURL.toString());
                    } else if (req != null) {
                        HttpServletRequest request = (HttpServletRequest) req.getWrappedObject();</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>403</LineStart>
<Snippet>            if (UtilValidate.isNotEmpty(request.getParameter(&quot;frameExistContentId&quot;)) &amp;&amp; UtilValidate.isNotEmpty(request.getParameter(&quot;frameExistDataResourceId&quot;))) {
                session.setAttribute(&quot;frameExistContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
                session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            }
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;Required frame image content ID&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="D027DAA9-A3BE-49E4-BDBF-3DFF657F84CA" iid="5D5BF0CD079DBA4A01684E7134CAF53B">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>TrackingCodeEvents.java</FileName>
<FilePath>applications/marketing/src/org/ofbiz/marketing/tracking/TrackingCodeEvents.java</FilePath>
<LineStart>93</LineStart>
<Snippet>     */
    public static String checkPartnerTrackingCodeUrlParam(HttpServletRequest request, HttpServletResponse response) {
        String trackingCodeId = request.getParameter(&quot;ptc&quot;);

        if (UtilValidate.isNotEmpty(trackingCodeId)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF" iid="2010EEE1C33932B52EDA7B08289185AA">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method run() in EntityField.java sends unvalidated data to a web browser on line 249, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EntityField.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/pseudotag/EntityField.java</FilePath>
<LineStart>249</LineStart>
<Snippet>            if (prefix != null)
                out.print(prefix);
            out.print(fieldString);
            if (suffix != null)
                out.print(suffix);</Snippet>
                            </Primary>
                            <Source>
<FileName>CoreEvents.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/CoreEvents.java</FilePath>
<LineStart>412</LineStart>
<Snippet>        try {
            if (null!=request.getParameter(&quot;_RUN_SYNC_&quot;) &amp;&amp; request.getParameter(&quot;_RUN_SYNC_&quot;).equals(&quot;Y&quot;)) {
                syncServiceResult = dispatcher.runSync(serviceName, serviceContext);
            } else {
                dispatcher.schedule(jobName, poolName, serviceName, serviceContext, startTime, frequency, interval, count, endTime, maxRetry);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="B3B70310AA52140E5CAE3535F506A710">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>TaskEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/task/TaskEvents.java</FilePath>
<LineStart>75</LineStart>
<Snippet>            Map&lt;String, ? extends Object&gt; context = UtilMisc.toMap(&quot;workEffortId&quot;, workEffortId, &quot;partyId&quot;, partyId, &quot;roleTypeId&quot;, roleTypeId,
                    &quot;fromDate&quot;, fromDate, &quot;result&quot;, parameterMap, &quot;userLogin&quot;, userLogin);
            result = dispatcher.runSync(&quot;wfCompleteAssignment&quot;, context);
            if (result.containsKey(ModelService.RESPOND_ERROR)) {
                request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, result.get(ModelService.ERROR_MESSAGE));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="99621A60C353CCDF5BFC5FC8C97E4008">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 124, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>124</LineStart>
<Snippet>            if (s.charAt(i) == '\n') {
                checkAfterNewline();
                super.write(s, offset, i - offset + 1);
                offset = i + 1;
                lastWasNewline = true;</Snippet>
                            </Primary>
                            <Source>
<FileName>LoginWorker.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/LoginWorker.java</FilePath>
<LineStart>264</LineStart>
<Snippet>
                // keep the previous request name in the session
                session.setAttribute(&quot;_PREVIOUS_REQUEST_&quot;, request.getPathInfo());

                // NOTE: not using the old _PREVIOUS_PARAMS_ attribute at all because it was a security hole as it was used to put data in the URL (never encrypted) that was originally in a form field that may have been encrypted</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="DCD90CCE7C3989CF8167D4AB2A9B7E40">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>251</LineStart>
<Snippet>                txtContext.put(&quot;mapKey&quot;, &quot;ARTICLE&quot;);
                txtContext.put(&quot;dataTemplateTypeId&quot;, &quot;NONE&quot;);
                Map&lt;String, Object&gt; txtResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, txtContext);
                isError = ModelService.RESPOND_ERROR.equals(txtResults.get(ModelService.RESPONSE_MESSAGE));
                if (isError) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="FC00E5121517EAAAB64DED46296B9507">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method close() in OfbizUrlTransform.java sends unvalidated data to a web browser on line 218, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>OfbizUrlTransform.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/ftl/OfbizUrlTransform.java</FilePath>
<LineStart>218</LineStart>
<Snippet>                        // make the link
                        RequestHandler rh = (RequestHandler) ctx.getAttribute(&quot;_REQUEST_HANDLER_&quot;);
                        out.write(rh.makeLink(request, response, requestUrl, fullPath, secure, encode));
                    } else if (prefix != null) {
                        if (prefix instanceof TemplateScalarModel) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CoreEvents.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/CoreEvents.java</FilePath>
<LineStart>412</LineStart>
<Snippet>        try {
            if (null!=request.getParameter(&quot;_RUN_SYNC_&quot;) &amp;&amp; request.getParameter(&quot;_RUN_SYNC_&quot;).equals(&quot;Y&quot;)) {
                syncServiceResult = dispatcher.runSync(serviceName, serviceContext);
            } else {
                dispatcher.schedule(jobName, poolName, serviceName, serviceContext, startTime, frequency, interval, count, endTime, maxRetry);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="4B7421F2C3B70BA97FCA15BE63E5A0C3">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>303</LineStart>
<Snippet>            dataResourceCtx.put(&quot;mimeTypeId&quot;, &quot;image/png&quot;);
            dataResourceCtx.put(&quot;isPublic&quot;, &quot;Y&quot;);
            Map&lt;String, Object&gt; dataResourceResult = dispatcher.runSync(&quot;createDataResource&quot;, dataResourceCtx);
            dataResourceId = dataResourceResult.get(&quot;dataResourceId&quot;).toString();
            //create content</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="F6CA9D6EE9EB65EB8AA2A6D533B11045">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method close() in OfbizUrlTransform.java sends unvalidated data to a web browser on line 205, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>OfbizUrlTransform.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/ftl/OfbizUrlTransform.java</FilePath>
<LineStart>205</LineStart>
<Snippet>                        String requestUrl = buf.toString();
                        newURL.append(requestUrl);
                        out.write(newURL.toString());
                    } else if (req != null) {
                        HttpServletRequest request = (HttpServletRequest) req.getWrappedObject();</Snippet>
                            </Primary>
                            <Source>
<FileName>WebPosEvents.java</FileName>
<FilePath>specialpurpose/webpos/src/org/ofbiz/webpos/WebPosEvents.java</FilePath>
<LineStart>94</LineStart>
<Snippet>            GenericValue productStore = ProductStoreWorker.getProductStore(productStoreId, delegator);
            String facilityId = null;
            String currencyUomId = request.getParameter(&quot;currencyUomId&quot;);

            if (UtilValidate.isNotEmpty(productStore)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="BA8993021CA2CC818CC98E60374BBFE0">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method close() in OfbizUrlTransform.java sends unvalidated data to a web browser on line 205, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>OfbizUrlTransform.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/ftl/OfbizUrlTransform.java</FilePath>
<LineStart>205</LineStart>
<Snippet>                        String requestUrl = buf.toString();
                        newURL.append(requestUrl);
                        out.write(newURL.toString());
                    } else if (req != null) {
                        HttpServletRequest request = (HttpServletRequest) req.getWrappedObject();</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>693</LineStart>
<Snippet>            return &quot;error&quot;;
        }
        String orderId = request.getParameter(&quot;orderId_o_0&quot;);
        // set the order id if supplied
        if (UtilValidate.isNotEmpty(orderId)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="DF6946F6C809AC29B68AEFB52ADC5CB7">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method openEditWrap() in RenderSubContentCacheTransform.java sends unvalidated data to a web browser on line 202, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>RenderSubContentCacheTransform.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderSubContentCacheTransform.java</FilePath>
<LineStart>202</LineStart>
<Snippet>            public void openEditWrap(Writer out, String editStyle) throws IOException {
                String divStr = &quot;&lt;div class=\&quot;&quot; + editStyle + &quot;\&quot;&gt;&quot;;
                out.write(divStr);
            }
</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>119</LineStart>
<Snippet>            contentRevisionMap.put(&quot;contentId&quot;, contentId);
            contentRevisionMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentRevisionAndItem&quot;, contentRevisionMap);
            keySet = result.keySet();
            iter = keySet.iterator();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="968CE2C6356A5E330C566DB6AD85C1A1">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CommonEvents.java</FileName>
<FilePath>framework/common/src/org/ofbiz/common/CommonEvents.java</FilePath>
<LineStart>231</LineStart>
<Snippet>    /** Simple event to set the users per-session currency uom value */
    public static String setSessionCurrencyUom(HttpServletRequest request, HttpServletResponse response) {
        String currencyUom = request.getParameter(&quot;currencyUom&quot;);
        if (UtilValidate.isNotEmpty(currencyUom)) {
            // update the session</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="CCA0DA154C61812C453925D7078C6644">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>184</LineStart>
<Snippet>
    public static Map&lt;String, Object&gt; getPathInfoOnlyParameterMap(HttpServletRequest request, Set&lt;? extends String&gt; nameSet, Boolean onlyIncludeOrSkip) {
        return getPathInfoOnlyParameterMap(request.getPathInfo(), nameSet, onlyIncludeOrSkip);
    }
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="C67EFC1FF9936AA8526706971400B45D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 130, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>130</LineStart>
<Snippet>        }
        checkAfterNewline();
        super.write(s, offset, i - offset);
    }
}</Snippet>
                            </Primary>
                            <Source>
<FileName>CommonEvents.java</FileName>
<FilePath>framework/common/src/org/ofbiz/common/CommonEvents.java</FilePath>
<LineStart>179</LineStart>
<Snippet>     * setting should be passed as a &quot;newLocale&quot; request parameter. */
    public static String setSessionLocale(HttpServletRequest request, HttpServletResponse response) {
        String localeString = request.getParameter(&quot;newLocale&quot;);
        if (UtilValidate.isNotEmpty(localeString)) {
            UtilHttp.setLocale(request, localeString);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="AB9C2E5BCF1E14CD8E1D1A223ED09CE7">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method toJsonObjectList() in ImageManagementServices.java sends unvalidated data to a web browser on line 779, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ImageManagementServices.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/ImageManagementServices.java</FilePath>
<LineStart>779</LineStart>
<Snippet>            try {
                out = response.getWriter();
                out.write(jsonStr);
                out.flush();
            } catch (IOException e) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceMultiEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceMultiEventHandler.java</FilePath>
<LineStart>308</LineStart>
<Snippet>                Map&lt;String, Object&gt; result = null;
                try {
                    result = dispatcher.runSync(serviceName, serviceContext);
                } catch (ServiceAuthException e) {
                    // not logging since the service engine already did</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="DC496B0643D41DE343C2B6FCE70AC258">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method openEditWrap() in RenderSubContentAsText.java sends unvalidated data to a web browser on line 204, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>RenderSubContentAsText.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderSubContentAsText.java</FilePath>
<LineStart>204</LineStart>
<Snippet>
                String divStr = &quot;&lt;div class=\&quot;&quot; + editStyle + &quot;\&quot;&gt;&quot;;
                out.write(divStr);
            }
</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceEventHandler.java</FilePath>
<LineStart>337</LineStart>
<Snippet>                dispatcher.runAsync(serviceName, serviceContext);
            } else {
                result = dispatcher.runSync(serviceName, serviceContext);
            }
        } catch (ServiceAuthException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="393ED31652490456CFFC205EECAEE811">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method close() in OfbizUrlTransform.java sends unvalidated data to a web browser on line 205, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>OfbizUrlTransform.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/ftl/OfbizUrlTransform.java</FilePath>
<LineStart>205</LineStart>
<Snippet>                        String requestUrl = buf.toString();
                        newURL.append(requestUrl);
                        out.write(newURL.toString());
                    } else if (req != null) {
                        HttpServletRequest request = (HttpServletRequest) req.getWrappedObject();</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>303</LineStart>
<Snippet>            dataResourceCtx.put(&quot;mimeTypeId&quot;, &quot;image/png&quot;);
            dataResourceCtx.put(&quot;isPublic&quot;, &quot;Y&quot;);
            Map&lt;String, Object&gt; dataResourceResult = dispatcher.runSync(&quot;createDataResource&quot;, dataResourceCtx);
            dataResourceId = dataResourceResult.get(&quot;dataResourceId&quot;).toString();
            //create content</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="D9FD5E412249C0823E1EE4C2505E97C3">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>409</LineStart>
<Snippet>        }
        
        String frameContentId = request.getParameter(&quot;frameContentId&quot;);
        Delegator delegator = (Delegator) request.getAttribute(&quot;delegator&quot;);
        </Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF" iid="A2B3939A9FA9949C5E6E1F440C14EA9F">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doEndTag() in UrlTag.java sends unvalidated data to a web browser on line 57, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>UrlTag.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/taglib/UrlTag.java</FilePath>
<LineStart>57</LineStart>
<Snippet>
        try {
            getPreviousOut().print(newURL);
        } catch (IOException e) {
            if (UtilJ2eeCompat.useNestedJspException(pageContext.getServletContext())) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceMultiEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceMultiEventHandler.java</FilePath>
<LineStart>308</LineStart>
<Snippet>                Map&lt;String, Object&gt; result = null;
                try {
                    result = dispatcher.runSync(serviceName, serviceContext);
                } catch (ServiceAuthException e) {
                    // not logging since the service engine already did</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="8AF5C09C6DF6925CE2B7EDB390E16A66">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ICalWorker.java</FileName>
<FilePath>applications/workeffort/src/org/ofbiz/workeffort/workeffort/ICalWorker.java</FilePath>
<LineStart>285</LineStart>
<Snippet>        HttpSession session = request.getSession();
        LocalDispatcher dispatcher = (LocalDispatcher) request.getAttribute(&quot;dispatcher&quot;);
        Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;userLogin&quot;, serviceMap);
        if (ServiceUtil.isError(result) || ServiceUtil.isFailure(result)) {
            return;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="E39F1C5975B125B00956F794D96E654E">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method close() in OfbizUrlTransform.java sends unvalidated data to a web browser on line 205, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>OfbizUrlTransform.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/ftl/OfbizUrlTransform.java</FilePath>
<LineStart>205</LineStart>
<Snippet>                        String requestUrl = buf.toString();
                        newURL.append(requestUrl);
                        out.write(newURL.toString());
                    } else if (req != null) {
                        HttpServletRequest request = (HttpServletRequest) req.getWrappedObject();</Snippet>
                            </Primary>
                            <Source>
<FileName>CommonEvents.java</FileName>
<FilePath>framework/common/src/org/ofbiz/common/CommonEvents.java</FilePath>
<LineStart>231</LineStart>
<Snippet>    /** Simple event to set the users per-session currency uom value */
    public static String setSessionCurrencyUom(HttpServletRequest request, HttpServletResponse response) {
        String currencyUom = request.getParameter(&quot;currencyUom&quot;);
        if (UtilValidate.isNotEmpty(currencyUom)) {
            // update the session</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="0AF7C7C622707ED902608137F4307470">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 115, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>115</LineStart>
<Snippet>    @Override
    public void write(String s) throws IOException {
        write(s, 0, s.length());
    }
</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1527</LineStart>
<Snippet>        Locale locale = UtilHttp.getLocale(request);

        String productStoreId = request.getParameter(&quot;productStoreId&quot;);

        if (UtilValidate.isNotEmpty(productStoreId)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="75CA7134-B6BE-444A-9815-E739432FCA47" iid="AF474D399F9EB25B2BABD5BAFAD8428C">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method run() in EntityField.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>EntityField.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/pseudotag/EntityField.java</FilePath>
<LineStart>249</LineStart>
<Snippet>            if (prefix != null)
                out.print(prefix);
            out.print(fieldString);
            if (suffix != null)
                out.print(suffix);</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>575</LineStart>
<Snippet>        while (e.hasMoreElements()) {
            String name = e.nextElement();
            request.setAttribute(name, request.getParameter(name));
        }
    }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="95A53C76384465B7591736A413E89C3A">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method openEditWrap() in RenderContentTransform.java sends unvalidated data to a web browser on line 129, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>RenderContentTransform.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderContentTransform.java</FilePath>
<LineStart>129</LineStart>
<Snippet>            public void openEditWrap(Writer out, String editStyle) throws IOException {
                String divStr = &quot;&lt;div class=\&quot;&quot; + editStyle + &quot;\&quot;&gt;&quot;;
                out.write(divStr);
            }
</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>575</LineStart>
<Snippet>        while (e.hasMoreElements()) {
            String name = e.nextElement();
            request.setAttribute(name, request.getParameter(name));
        }
    }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="4507E3B01C9DC32F2D32FEA0CF97DF20">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method openEditWrap() in RenderSubContentAsText.java sends unvalidated data to a web browser on line 204, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>RenderSubContentAsText.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderSubContentAsText.java</FilePath>
<LineStart>204</LineStart>
<Snippet>
                String divStr = &quot;&lt;div class=\&quot;&quot; + editStyle + &quot;\&quot;&gt;&quot;;
                out.write(divStr);
            }
</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>575</LineStart>
<Snippet>        while (e.hasMoreElements()) {
            String name = e.nextElement();
            request.setAttribute(name, request.getParameter(name));
        }
    }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="FC7F3C33BF6D6417BEBD51584AF8D562">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>559</LineStart>
<Snippet>        session.setAttribute(&quot;_CLIENT_REQUEST_&quot;, fullRequestUrl.toString());
        session.setAttribute(&quot;_CLIENT_USER_AGENT_&quot;, request.getHeader(&quot;User-Agent&quot;) != null ? request.getHeader(&quot;User-Agent&quot;) : &quot;&quot;);
        session.setAttribute(&quot;_CLIENT_REFERER_&quot;, request.getHeader(&quot;Referer&quot;) != null ? request.getHeader(&quot;Referer&quot;) : &quot;&quot;);

        session.setAttribute(&quot;_CLIENT_FORWARDED_FOR_&quot;, request.getHeader(&quot;X-Forwarded-For&quot;));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="B2BEC031A207748D943C043F218604D3">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>672</LineStart>
<Snippet>        HttpSession session = request.getSession();
        Locale locale = UtilHttp.getLocale(request);
        String supplierPartyId = request.getParameter(&quot;supplierPartyId_o_0&quot;);
        
        // check the preferred currency of the supplier, if set, use that for the cart, otherwise use system defaults.</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="1A4A03D669C3409954ADEE3ECF4464C5">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceEventHandler.java</FilePath>
<LineStart>337</LineStart>
<Snippet>                dispatcher.runAsync(serviceName, serviceContext);
            } else {
                result = dispatcher.runSync(serviceName, serviceContext);
            }
        } catch (ServiceAuthException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="76F7C5DF-850D-4AC8-A3FE-8AE7AABFB50E" iid="C06C71DF0EEB3A29FDAD2B9CBA921020">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method streamContent() in UtilHttp.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>1033</LineStart>
<Snippet>        try {
            while ((read = bis.read(buffer, 0, buffer.length)) != -1) {
                bos.write(buffer, 0, read);
            }
        } catch (IOException e) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>505</LineStart>
<Snippet>        Map&lt;String, Object&gt; ftlResults = null;
        try {
            ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
        } catch (ServiceAuthException e) {
            String msg = e.getMessage();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="219FCF6F-A77C-4219-8506-F5A0A0D6BE4A" iid="CFB9845F3CB05DC9570B8276C35BCBD6">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method closeEditWrap() in RenderSubContentCacheTransform.java sends unvalidated data to a web browser on line 275, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>RenderSubContentCacheTransform.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderSubContentCacheTransform.java</FilePath>
<LineStart>275</LineStart>
<Snippet>                ServletContext servletContext = request.getSession().getServletContext();
                RequestHandler rh = (RequestHandler) servletContext.getAttribute(&quot;_REQUEST_HANDLER_&quot;);
                out.append(rh.makeLink(request, response, &quot;/&quot; + fullRequest, false, false, true));
                out.write(&quot;\&quot;&gt;Edit&lt;/a&gt;&quot;);
                out.write(&quot;&lt;/div&gt;&quot;);</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>575</LineStart>
<Snippet>        while (e.hasMoreElements()) {
            String name = e.nextElement();
            request.setAttribute(name, request.getParameter(name));
        }
    }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="DB7F236B8017C77A4BC882B81BCD4807">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>262</LineStart>
<Snippet>        if (UtilValidate.isEmpty(imageName) || UtilValidate.isEmpty(imageData)) {
            session.setAttribute(&quot;frameContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
            session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;There is no frame image, please select the image type *.PNG  uploading.&quot;);
            return &quot;error&quot;;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="D027DAA9-A3BE-49E4-BDBF-3DFF657F84CA" iid="E31F03B8398FA1EF38C8C93DE06F5578">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>559</LineStart>
<Snippet>        session.setAttribute(&quot;_CLIENT_REQUEST_&quot;, fullRequestUrl.toString());
        session.setAttribute(&quot;_CLIENT_USER_AGENT_&quot;, request.getHeader(&quot;User-Agent&quot;) != null ? request.getHeader(&quot;User-Agent&quot;) : &quot;&quot;);
        session.setAttribute(&quot;_CLIENT_REFERER_&quot;, request.getHeader(&quot;Referer&quot;) != null ? request.getHeader(&quot;Referer&quot;) : &quot;&quot;);

        session.setAttribute(&quot;_CLIENT_FORWARDED_FOR_&quot;, request.getHeader(&quot;X-Forwarded-For&quot;));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="765771717E29ED38C24211F9155B5F59">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 115, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>115</LineStart>
<Snippet>    @Override
    public void write(String s) throws IOException {
        write(s, 0, s.length());
    }
</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>403</LineStart>
<Snippet>            if (UtilValidate.isNotEmpty(request.getParameter(&quot;frameExistContentId&quot;)) &amp;&amp; UtilValidate.isNotEmpty(request.getParameter(&quot;frameExistDataResourceId&quot;))) {
                session.setAttribute(&quot;frameExistContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
                session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            }
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;Required frame image content ID&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF" iid="636247B356BD69CEA22FA713E8D62ECE">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method run() in EntityField.java sends unvalidated data to a web browser on line 249, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EntityField.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/pseudotag/EntityField.java</FilePath>
<LineStart>249</LineStart>
<Snippet>            if (prefix != null)
                out.print(prefix);
            out.print(fieldString);
            if (suffix != null)
                out.print(suffix);</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>505</LineStart>
<Snippet>        Map&lt;String, Object&gt; ftlResults = null;
        try {
            ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
        } catch (ServiceAuthException e) {
            String msg = e.getMessage();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="37383B6B5797E39F071186648CF98448">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 115, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>115</LineStart>
<Snippet>    @Override
    public void write(String s) throws IOException {
        write(s, 0, s.length());
    }
</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>561</LineStart>
<Snippet>        session.setAttribute(&quot;_CLIENT_REFERER_&quot;, request.getHeader(&quot;Referer&quot;) != null ? request.getHeader(&quot;Referer&quot;) : &quot;&quot;);

        session.setAttribute(&quot;_CLIENT_FORWARDED_FOR_&quot;, request.getHeader(&quot;X-Forwarded-For&quot;));
        session.setAttribute(&quot;_CLIENT_REMOTE_ADDR_&quot;, request.getRemoteAddr());
        session.setAttribute(&quot;_CLIENT_REMOTE_HOST_&quot;, request.getRemoteHost());</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="02ABE48B5AA8977361FA0DAE4A50DDD1">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method toJsonObjectList() in EbayStoreOptions.java sends unvalidated data to a web browser on line 273, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EbayStoreOptions.java</FileName>
<FilePath>specialpurpose/ebaystore/src/org/ofbiz/ebaystore/EbayStoreOptions.java</FilePath>
<LineStart>273</LineStart>
<Snippet>            try {
                out = response.getWriter();
                out.write(jsonStr);
                out.flush();
            } catch (IOException e) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceEventHandler.java</FilePath>
<LineStart>337</LineStart>
<Snippet>                dispatcher.runAsync(serviceName, serviceContext);
            } else {
                result = dispatcher.runSync(serviceName, serviceContext);
            }
        } catch (ServiceAuthException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="8C1BA15A26114579DC185EA0A0A2A929">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>130</LineStart>
<Snippet>        }
        checkAfterNewline();
        super.write(s, offset, i - offset);
    }
}</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceMultiEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceMultiEventHandler.java</FilePath>
<LineStart>308</LineStart>
<Snippet>                Map&lt;String, Object&gt; result = null;
                try {
                    result = dispatcher.runSync(serviceName, serviceContext);
                } catch (ServiceAuthException e) {
                    // not logging since the service engine already did</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="12AF265A-8085-459E-A9C9-E0922DFFE1F5" iid="AD4F9C065C0F5BC310057C22A124AABD">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1994</LineStart>
<Snippet>                    appendOrderItemMap.put(&quot;shipGroupSeqId&quot;, shipGroupSeqId);
                    try {
                        Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;appendOrderItem&quot;, appendOrderItemMap);
                        request.setAttribute(&quot;shoppingCart&quot;, (ShoppingCart) result.get(&quot;shoppingCart&quot;));
                        ShoppingCartEvents.destroyCart(request, response);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="56F43EABE7A8DF050B79236E9E0A3F7E">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 130, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>130</LineStart>
<Snippet>        }
        checkAfterNewline();
        super.write(s, offset, i - offset);
    }
}</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>945</LineStart>
<Snippet>            newCart = cartList.remove(cartIndex);
        } else {
            String productStoreId = request.getParameter(&quot;productStoreId&quot;);
            if (UtilValidate.isNotEmpty(productStoreId)) {
                session.setAttribute(&quot;productStoreId&quot;, productStoreId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="AC8DFA608EEAA35B3F5C4D919E676692">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1994</LineStart>
<Snippet>                    appendOrderItemMap.put(&quot;shipGroupSeqId&quot;, shipGroupSeqId);
                    try {
                        Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;appendOrderItem&quot;, appendOrderItemMap);
                        request.setAttribute(&quot;shoppingCart&quot;, (ShoppingCart) result.get(&quot;shoppingCart&quot;));
                        ShoppingCartEvents.destroyCart(request, response);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="1ABE1C8975B8E581E5451CE89BB3AA65">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 124, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>124</LineStart>
<Snippet>            if (s.charAt(i) == '\n') {
                checkAfterNewline();
                super.write(s, offset, i - offset + 1);
                offset = i + 1;
                lastWasNewline = true;</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceMultiEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceMultiEventHandler.java</FilePath>
<LineStart>308</LineStart>
<Snippet>                Map&lt;String, Object&gt; result = null;
                try {
                    result = dispatcher.runSync(serviceName, serviceContext);
                } catch (ServiceAuthException e) {
                    // not logging since the service engine already did</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="6A1C7596FE7873335140ABA037A72E96">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>CoreEvents.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/CoreEvents.java</FilePath>
<LineStart>516</LineStart>
<Snippet>    public static String runService(HttpServletRequest request, HttpServletResponse response) {
        // get the mode and service name
        String serviceName = request.getParameter(&quot;serviceName&quot;);
        String mode = request.getParameter(&quot;mode&quot;);
        Locale locale = UtilHttp.getLocale(request);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="5AE71190DC38F35645ECE87D1E344047">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 115, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>115</LineStart>
<Snippet>    @Override
    public void write(String s) throws IOException {
        write(s, 0, s.length());
    }
</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>184</LineStart>
<Snippet>
    public static Map&lt;String, Object&gt; getPathInfoOnlyParameterMap(HttpServletRequest request, Set&lt;? extends String&gt; nameSet, Boolean onlyIncludeOrSkip) {
        return getPathInfoOnlyParameterMap(request.getPathInfo(), nameSet, onlyIncludeOrSkip);
    }
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="12AF265A-8085-459E-A9C9-E0922DFFE1F5" iid="B5504BD036A53FED4E9DE1784D960041">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>LoginWorker.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/LoginWorker.java</FilePath>
<LineStart>397</LineStart>
<Snippet>            // get the visit id to pass to the userLogin for history
            String visitId = VisitHandler.getVisitId(session);
            result = dispatcher.runSync(&quot;userLogin&quot;, UtilMisc.toMap(&quot;login.username&quot;, username, &quot;login.password&quot;, password, &quot;visitId&quot;, visitId, &quot;locale&quot;, UtilHttp.getLocale(request)));
        } catch (GenericServiceException e) {
            Debug.logError(e, &quot;Error calling userLogin service&quot;, module);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF" iid="109E1AE211D2C1B0210CBFA5256D5358">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method run() in InputValue.java sends unvalidated data to a web browser on line 145, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>InputValue.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/pseudotag/InputValue.java</FilePath>
<LineStart>145</LineStart>
<Snippet>                inputValue + &quot;\&quot;&quot;);
        } else {
            pageContext.getOut().print(inputValue);
        }
    }</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>104</LineStart>
<Snippet>        persistMap.put(&quot;userLogin&quot;, userLogin);
        try {
            Map&lt;String, Object&gt; persistResult = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, persistMap);
            contentId = (String)persistResult.get(&quot;contentId&quot;);
            //request.setAttribute(&quot;contentId&quot;, contentId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="EA69233E2A79C934134BB2B90DA5F6C1">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method toJsonObjectList() in EbayStoreOptions.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>EbayStoreOptions.java</FileName>
<FilePath>specialpurpose/ebaystore/src/org/ofbiz/ebaystore/EbayStoreOptions.java</FilePath>
<LineStart>273</LineStart>
<Snippet>            try {
                out = response.getWriter();
                out.write(jsonStr);
                out.flush();
            } catch (IOException e) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceEventHandler.java</FilePath>
<LineStart>337</LineStart>
<Snippet>                dispatcher.runAsync(serviceName, serviceContext);
            } else {
                result = dispatcher.runSync(serviceName, serviceContext);
            }
        } catch (ServiceAuthException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="FF25781F1683B4743E431940503D4962">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 130, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>130</LineStart>
<Snippet>        }
        checkAfterNewline();
        super.write(s, offset, i - offset);
    }
}</Snippet>
                            </Primary>
                            <Source>
<FileName>CoreEvents.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/CoreEvents.java</FilePath>
<LineStart>412</LineStart>
<Snippet>        try {
            if (null!=request.getParameter(&quot;_RUN_SYNC_&quot;) &amp;&amp; request.getParameter(&quot;_RUN_SYNC_&quot;).equals(&quot;Y&quot;)) {
                syncServiceResult = dispatcher.runSync(serviceName, serviceContext);
            } else {
                dispatcher.schedule(jobName, poolName, serviceName, serviceContext, startTime, frequency, interval, count, endTime, maxRetry);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="AEABDAB9F9A94EAE7D2BD1E53A630190">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>127</LineStart>
<Snippet>
            Object value = null;
            String[] paramArr = request.getParameterValues(name);
            if (paramArr != null) {
                if (paramArr.length &gt; 1) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="E659376D038B8E0F703FAF5355FEB460">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method close() in OfbizUrlTransform.java sends unvalidated data to a web browser on line 218, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>OfbizUrlTransform.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/ftl/OfbizUrlTransform.java</FilePath>
<LineStart>218</LineStart>
<Snippet>                        // make the link
                        RequestHandler rh = (RequestHandler) ctx.getAttribute(&quot;_REQUEST_HANDLER_&quot;);
                        out.write(rh.makeLink(request, response, requestUrl, fullPath, secure, encode));
                    } else if (prefix != null) {
                        if (prefix instanceof TemplateScalarModel) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>127</LineStart>
<Snippet>
            Object value = null;
            String[] paramArr = request.getParameterValues(name);
            if (paramArr != null) {
                if (paramArr.length &gt; 1) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="984B9E954765636FF0ED2E3B78D8F62A">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method close() in OfbizUrlTransform.java sends unvalidated data to a web browser on line 205, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>OfbizUrlTransform.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/ftl/OfbizUrlTransform.java</FilePath>
<LineStart>205</LineStart>
<Snippet>                        String requestUrl = buf.toString();
                        newURL.append(requestUrl);
                        out.write(newURL.toString());
                    } else if (req != null) {
                        HttpServletRequest request = (HttpServletRequest) req.getWrappedObject();</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>505</LineStart>
<Snippet>        Map&lt;String, Object&gt; ftlResults = null;
        try {
            ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
        } catch (ServiceAuthException e) {
            String msg = e.getMessage();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="85595409CD77642EEB21EACEA93AEE84">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 130, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>130</LineStart>
<Snippet>        }
        checkAfterNewline();
        super.write(s, offset, i - offset);
    }
}</Snippet>
                            </Primary>
                            <Source>
<FileName>WebPosEvents.java</FileName>
<FilePath>specialpurpose/webpos/src/org/ofbiz/webpos/WebPosEvents.java</FilePath>
<LineStart>94</LineStart>
<Snippet>            GenericValue productStore = ProductStoreWorker.getProductStore(productStoreId, delegator);
            String facilityId = null;
            String currencyUomId = request.getParameter(&quot;currencyUomId&quot;);

            if (UtilValidate.isNotEmpty(productStore)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="7F48C477C629503E4227A644261B63B0">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 130, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>130</LineStart>
<Snippet>        }
        checkAfterNewline();
        super.write(s, offset, i - offset);
    }
}</Snippet>
                            </Primary>
                            <Source>
<FileName>SOAPEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/SOAPEventHandler.java</FilePath>
<LineStart>328</LineStart>
<Snippet>        uri.append(request.getServletPath());

        String reqInfo = RequestHandler.getRequestUri(request.getPathInfo());
        if (!reqInfo.startsWith(&quot;/&quot;)) {
            reqInfo = &quot;/&quot; + reqInfo;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="3A31F8D4BE51EA76B9D69E6A837CE170">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 130, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>130</LineStart>
<Snippet>        }
        checkAfterNewline();
        super.write(s, offset, i - offset);
    }
}</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1327</LineStart>
<Snippet>        ShoppingCart cart = null;
        try {
            Map&lt;String, Object&gt; outMap = dispatcher.runSync(&quot;loadCartFromShoppingList&quot;,
                    UtilMisc.&lt;String, Object&gt;toMap(&quot;shoppingListId&quot;, shoppingListId,
                    &quot;userLogin&quot;, userLogin));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="E8E78258DA670BEE323457C523F309C8">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1327</LineStart>
<Snippet>        ShoppingCart cart = null;
        try {
            Map&lt;String, Object&gt; outMap = dispatcher.runSync(&quot;loadCartFromShoppingList&quot;,
                    UtilMisc.&lt;String, Object&gt;toMap(&quot;shoppingListId&quot;, shoppingListId,
                    &quot;userLogin&quot;, userLogin));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="2E63D49B91CA0E803F3D2AE339F73AE1">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method close() in OfbizUrlTransform.java sends unvalidated data to a web browser on line 205, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>OfbizUrlTransform.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/ftl/OfbizUrlTransform.java</FilePath>
<LineStart>205</LineStart>
<Snippet>                        String requestUrl = buf.toString();
                        newURL.append(requestUrl);
                        out.write(newURL.toString());
                    } else if (req != null) {
                        HttpServletRequest request = (HttpServletRequest) req.getWrappedObject();</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceMultiEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceMultiEventHandler.java</FilePath>
<LineStart>308</LineStart>
<Snippet>                Map&lt;String, Object&gt; result = null;
                try {
                    result = dispatcher.runSync(serviceName, serviceContext);
                } catch (ServiceAuthException e) {
                    // not logging since the service engine already did</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="BA8A6704D20B1D80B730A9C23837DDDD">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>945</LineStart>
<Snippet>            newCart = cartList.remove(cartIndex);
        } else {
            String productStoreId = request.getParameter(&quot;productStoreId&quot;);
            if (UtilValidate.isNotEmpty(productStoreId)) {
                session.setAttribute(&quot;productStoreId&quot;, productStoreId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="8290D8D95F0FB8456B53CE43DE3EC054">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>348</LineStart>
<Snippet>        }
        String frameContentId = request.getParameter(&quot;frameContentId&quot;);
        String frameDataResourceId = request.getParameter(&quot;frameDataResourceId&quot;);
        
        if (UtilValidate.isEmpty(request.getParameter(&quot;imageWidth&quot;)) || UtilValidate.isEmpty(request.getParameter(&quot;imageHeight&quot;))) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="489FF3AB0C7234E9B8C4ABA2E1D61C83">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>LayoutEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/layout/LayoutEvents.java</FilePath>
<LineStart>552</LineStart>
<Snippet>            context.put(&quot;textData&quot;, paramMap.get(&quot;textData&quot;));
            context.put(&quot;contentAssocTypeId&quot;, null);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, context);
            boolean isError = ModelService.RESPOND_ERROR.equals(result.get(ModelService.RESPONSE_MESSAGE));
            if (isError) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="219FCF6F-A77C-4219-8506-F5A0A0D6BE4A" iid="CEBF2EEF42C1E61B9D435AC2E5CDB4E1">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method closeEditWrap() in RenderContentTransform.java sends unvalidated data to a web browser on line 144, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>RenderContentTransform.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderContentTransform.java</FilePath>
<LineStart>144</LineStart>
<Snippet>                ServletContext servletContext = request.getSession().getServletContext();
                RequestHandler rh = (RequestHandler) servletContext.getAttribute(&quot;_REQUEST_HANDLER_&quot;);
                out.append(rh.makeLink(request, response, &quot;/&quot; + fullRequest, false, false, true));
                out.write(&quot;\&quot;&gt;Edit&lt;/a&gt;&quot;);
                out.write(&quot;&lt;/div&gt;&quot;);</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>127</LineStart>
<Snippet>
            Object value = null;
            String[] paramArr = request.getParameterValues(name);
            if (paramArr != null) {
                if (paramArr.length &gt; 1) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="CA184A6A3B2829ABD011E9E565C883B9">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 115, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>115</LineStart>
<Snippet>    @Override
    public void write(String s) throws IOException {
        write(s, 0, s.length());
    }
</Snippet>
                            </Primary>
                            <Source>
<FileName>LoginWorker.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/LoginWorker.java</FilePath>
<LineStart>264</LineStart>
<Snippet>
                // keep the previous request name in the session
                session.setAttribute(&quot;_PREVIOUS_REQUEST_&quot;, request.getPathInfo());

                // NOTE: not using the old _PREVIOUS_PARAMS_ attribute at all because it was a security hole as it was used to put data in the URL (never encrypted) that was originally in a form field that may have been encrypted</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="12AF265A-8085-459E-A9C9-E0922DFFE1F5" iid="578FF340152C24762CAF232766EA28BE">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>OrderManagerEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/OrderManagerEvents.java</FilePath>
<LineStart>222</LineStart>
<Snippet>                    Map&lt;String, Object&gt; results = null;
                    try {
                        results = dispatcher.runSync(&quot;createPaymentFromPreference&quot;, UtilMisc.toMap(&quot;userLogin&quot;, userLogin,
                                &quot;orderPaymentPreferenceId&quot;, paymentPreference.get(&quot;orderPaymentPreferenceId&quot;), &quot;paymentRefNum&quot;, paymentReference,
                                &quot;paymentFromId&quot;, placingCustomer.getString(&quot;partyId&quot;), &quot;comments&quot;, &quot;Payment received offline and manually entered.&quot;));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="A9458A7D71FEDD0E63D8A3BC72DD4FAE">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>287</LineStart>
<Snippet>                imgContext.put(&quot;rootDir&quot;, &quot;rootDir&quot;);
                if (Debug.infoOn()) Debug.logInfo(&quot;[UploadContentAndImage]imgContext &quot; + imgContext, module);
                Map&lt;String, Object&gt; imgResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, imgContext);
                isError = ModelService.RESPOND_ERROR.equals(imgResults.get(ModelService.RESPONSE_MESSAGE));
                if (isError) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="DF45214F272B59AEBAB49344C58E3C53">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ProductEvents.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/product/ProductEvents.java</FilePath>
<LineStart>804</LineStart>
<Snippet>        //Timestamp nowTimestamp = UtilDateTime.nowTimestamp();
        //GenericValue userLogin = (GenericValue) request.getSession().getAttribute(&quot;userLogin&quot;);
        String productId = request.getParameter(&quot;productId&quot;);
        String productFeatureId = request.getParameter(&quot;productFeatureId&quot;);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="2C9643D0B14B34DD8CBC2EBDCBC70A4F">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method openEditWrap() in RenderContentTransform.java sends unvalidated data to a web browser on line 129, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>RenderContentTransform.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderContentTransform.java</FilePath>
<LineStart>129</LineStart>
<Snippet>            public void openEditWrap(Writer out, String editStyle) throws IOException {
                String divStr = &quot;&lt;div class=\&quot;&quot; + editStyle + &quot;\&quot;&gt;&quot;;
                out.write(divStr);
            }
</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceMultiEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceMultiEventHandler.java</FilePath>
<LineStart>308</LineStart>
<Snippet>                Map&lt;String, Object&gt; result = null;
                try {
                    result = dispatcher.runSync(serviceName, serviceContext);
                } catch (ServiceAuthException e) {
                    // not logging since the service engine already did</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="A8D387E3685974A13672531D2BF98348">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>257</LineStart>
<Snippet>        Map&lt;String, Object&gt; results = null;
        try {
            results = dispatcher.runSync(&quot;renderContentPdf&quot;, mapIn);
        } catch (ServiceAuthException e) {
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, e.toString());</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="12AF265A-8085-459E-A9C9-E0922DFFE1F5" iid="BE1E6B2804767275F9A5F824D3235EE9">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>LayoutEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/layout/LayoutEvents.java</FilePath>
<LineStart>552</LineStart>
<Snippet>            context.put(&quot;textData&quot;, paramMap.get(&quot;textData&quot;));
            context.put(&quot;contentAssocTypeId&quot;, null);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, context);
            boolean isError = ModelService.RESPOND_ERROR.equals(result.get(ModelService.RESPONSE_MESSAGE));
            if (isError) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="8AE35199C5A69DF2F93145C2C645239C">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>GenericWebEvent.java</FileName>
<FilePath>framework/webtools/src/org/ofbiz/webtools/GenericWebEvent.java</FilePath>
<LineStart>183</LineStart>
<Snippet>            }

            String fval = request.getParameter(field.getName());
            if (UtilValidate.isNotEmpty(fval)) {
                try {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="AD20CF59D1EB9822DB13586735E53CE2">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 124, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>124</LineStart>
<Snippet>            if (s.charAt(i) == '\n') {
                checkAfterNewline();
                super.write(s, offset, i - offset + 1);
                offset = i + 1;
                lastWasNewline = true;</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>347</LineStart>
<Snippet>            return &quot;error&quot;;
        }
        String frameContentId = request.getParameter(&quot;frameContentId&quot;);
        String frameDataResourceId = request.getParameter(&quot;frameDataResourceId&quot;);
        </Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="604C7AE02AAFBB7A17AC9F37B8F4AEEC">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 124, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>124</LineStart>
<Snippet>            if (s.charAt(i) == '\n') {
                checkAfterNewline();
                super.write(s, offset, i - offset + 1);
                offset = i + 1;
                lastWasNewline = true;</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>119</LineStart>
<Snippet>            contentRevisionMap.put(&quot;contentId&quot;, contentId);
            contentRevisionMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentRevisionAndItem&quot;, contentRevisionMap);
            keySet = result.keySet();
            iter = keySet.iterator();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="35FC5E04E205068E8BBAFD61F1CD47D7">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 130, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>130</LineStart>
<Snippet>        }
        checkAfterNewline();
        super.write(s, offset, i - offset);
    }
}</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>505</LineStart>
<Snippet>        Map&lt;String, Object&gt; ftlResults = null;
        try {
            ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
        } catch (ServiceAuthException e) {
            String msg = e.getMessage();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="9C24E54FC2AD42A632F6D7A5BD7B7999">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 115, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>115</LineStart>
<Snippet>    @Override
    public void write(String s) throws IOException {
        write(s, 0, s.length());
    }
</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1388</LineStart>
<Snippet>        ShoppingCart cart = null;
        try {
            Map&lt;String, Object&gt; outMap = dispatcher.runSync(&quot;loadCartFromOrder&quot;,
                                                UtilMisc.&lt;String, Object&gt;toMap(&quot;orderId&quot;, orderId,
                                                        &quot;skipProductChecks&quot;, Boolean.TRUE, // the products have already been checked in the order, no need to check their validity again</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="721BF9A793257EF5152D4D3DF1AA0532">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CmsEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/cms/CmsEvents.java</FilePath>
<LineStart>107</LineStart>
<Snippet>            pathInfo = overrideViewUri;
        } else {
            pathInfo = request.getPathInfo();
            if (targetRequest.equals(actualRequest) &amp;&amp; pathInfo != null) {
                // was called directly -- path info is everything after the request</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="12AF265A-8085-459E-A9C9-E0922DFFE1F5" iid="67CD7A57021F2B76F888449C3C8AE543">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>SearchEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/search/SearchEvents.java</FilePath>
<LineStart>60</LineStart>
<Snippet>        serviceInMap.put(&quot;contentId&quot;, siteId);
        try {
            result = dispatcher.runSync(&quot;indexTree&quot;, serviceInMap);
        } catch (GenericServiceException e) {
            String errorMsg = &quot;Error calling the indexTree service.&quot; + e.toString();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="D027DAA9-A3BE-49E4-BDBF-3DFF657F84CA" iid="771DEDC3C5BE906F116F313CBA4B692A">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>GenericWebEvent.java</FileName>
<FilePath>framework/webtools/src/org/ofbiz/webtools/GenericWebEvent.java</FilePath>
<LineStart>183</LineStart>
<Snippet>            }

            String fval = request.getParameter(field.getName());
            if (UtilValidate.isNotEmpty(fval)) {
                try {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="E6BED5F6FED4A13C1571F92110941043">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method toJsonObjectList() in ImageManagementServices.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ImageManagementServices.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/ImageManagementServices.java</FilePath>
<LineStart>779</LineStart>
<Snippet>            try {
                out = response.getWriter();
                out.write(jsonStr);
                out.flush();
            } catch (IOException e) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>119</LineStart>
<Snippet>            contentRevisionMap.put(&quot;contentId&quot;, contentId);
            contentRevisionMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentRevisionAndItem&quot;, contentRevisionMap);
            keySet = result.keySet();
            iter = keySet.iterator();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="68D198F5A5EBABF8FF74B6BCDBDAE9D0">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>403</LineStart>
<Snippet>            if (UtilValidate.isNotEmpty(request.getParameter(&quot;frameExistContentId&quot;)) &amp;&amp; UtilValidate.isNotEmpty(request.getParameter(&quot;frameExistDataResourceId&quot;))) {
                session.setAttribute(&quot;frameExistContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
                session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            }
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;Required frame image content ID&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="9631D7347E53ACCB62D68DC07F477F8F">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>TrackingCodeEvents.java</FileName>
<FilePath>applications/marketing/src/org/ofbiz/marketing/tracking/TrackingCodeEvents.java</FilePath>
<LineStart>93</LineStart>
<Snippet>     */
    public static String checkPartnerTrackingCodeUrlParam(HttpServletRequest request, HttpServletResponse response) {
        String trackingCodeId = request.getParameter(&quot;ptc&quot;);

        if (UtilValidate.isNotEmpty(trackingCodeId)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="4BA001586DC222C819070122A5189316">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>ShipmentEvents.java</FileName>
<FilePath>applications/product/src/org/ofbiz/shipment/shipment/ShipmentEvents.java</FilePath>
<LineStart>50</LineStart>
<Snippet>        String shipmentId = request.getParameter(&quot;shipmentId&quot;);
        String shipmentRouteSegmentId = request.getParameter(&quot;shipmentRouteSegmentId&quot;);
        String shipmentPackageSeqId = request.getParameter(&quot;shipmentPackageSeqId&quot;);

        GenericValue shipmentPackageRouteSeg = null;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="4885E7F6B46AF6CF5A8D0161AF66A7C6">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 124, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>124</LineStart>
<Snippet>            if (s.charAt(i) == '\n') {
                checkAfterNewline();
                super.write(s, offset, i - offset + 1);
                offset = i + 1;
                lastWasNewline = true;</Snippet>
                            </Primary>
                            <Source>
<FileName>SOAPEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/SOAPEventHandler.java</FilePath>
<LineStart>328</LineStart>
<Snippet>        uri.append(request.getServletPath());

        String reqInfo = RequestHandler.getRequestUri(request.getPathInfo());
        if (!reqInfo.startsWith(&quot;/&quot;)) {
            reqInfo = &quot;/&quot; + reqInfo;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="30D4977FEABFB54B57B93EEAFA0C48CE">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 124, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>124</LineStart>
<Snippet>            if (s.charAt(i) == '\n') {
                checkAfterNewline();
                super.write(s, offset, i - offset + 1);
                offset = i + 1;
                lastWasNewline = true;</Snippet>
                            </Primary>
                            <Source>
<FileName>WebPosEvents.java</FileName>
<FilePath>specialpurpose/webpos/src/org/ofbiz/webpos/WebPosEvents.java</FilePath>
<LineStart>58</LineStart>
<Snippet>        
        // get the posTerminalId
        String posTerminalId = (String) request.getParameter(&quot;posTerminalId&quot;);
        session.removeAttribute(&quot;shoppingCart&quot;);
        session.removeAttribute(&quot;webPosSession&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="F91376EF087B3D713BC6217D514DAD1C">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 130, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>130</LineStart>
<Snippet>        }
        checkAfterNewline();
        super.write(s, offset, i - offset);
    }
}</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>559</LineStart>
<Snippet>        session.setAttribute(&quot;_CLIENT_REQUEST_&quot;, fullRequestUrl.toString());
        session.setAttribute(&quot;_CLIENT_USER_AGENT_&quot;, request.getHeader(&quot;User-Agent&quot;) != null ? request.getHeader(&quot;User-Agent&quot;) : &quot;&quot;);
        session.setAttribute(&quot;_CLIENT_REFERER_&quot;, request.getHeader(&quot;Referer&quot;) != null ? request.getHeader(&quot;Referer&quot;) : &quot;&quot;);

        session.setAttribute(&quot;_CLIENT_FORWARDED_FOR_&quot;, request.getHeader(&quot;X-Forwarded-For&quot;));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="756ECD99F587AC696A56698A7911CED0">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>115</LineStart>
<Snippet>    @Override
    public void write(String s) throws IOException {
        write(s, 0, s.length());
    }
</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceMultiEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceMultiEventHandler.java</FilePath>
<LineStart>308</LineStart>
<Snippet>                Map&lt;String, Object&gt; result = null;
                try {
                    result = dispatcher.runSync(serviceName, serviceContext);
                } catch (ServiceAuthException e) {
                    // not logging since the service engine already did</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="B1C188062FF56C1A14E12219EDD8BDA2">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 124, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>124</LineStart>
<Snippet>            if (s.charAt(i) == '\n') {
                checkAfterNewline();
                super.write(s, offset, i - offset + 1);
                offset = i + 1;
                lastWasNewline = true;</Snippet>
                            </Primary>
                            <Source>
<FileName>TrackingCodeEvents.java</FileName>
<FilePath>applications/marketing/src/org/ofbiz/marketing/tracking/TrackingCodeEvents.java</FilePath>
<LineStart>93</LineStart>
<Snippet>     */
    public static String checkPartnerTrackingCodeUrlParam(HttpServletRequest request, HttpServletResponse response) {
        String trackingCodeId = request.getParameter(&quot;ptc&quot;);

        if (UtilValidate.isNotEmpty(trackingCodeId)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="34153C8F57CB4217D8666F4B3EBE9E1B">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>OrderEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/order/OrderEvents.java</FilePath>
<LineStart>125</LineStart>
<Snippet>                        contextMap.put(&quot;userLogin&quot;, userLogin);
                        try {
                            resultMap = dispatcher.runSync(&quot;cancelOrderItem&quot;, contextMap);

                            if (ServiceUtil.isError(resultMap)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="2E070AB8FEF8115B85B919306B85D25B">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>WebShoppingCart.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/WebShoppingCart.java</FilePath>
<LineStart>49</LineStart>
<Snippet>                (currencyUom != null ? currencyUom : ProductStoreWorker.getStoreCurrencyUomId(request)),
                request.getParameter(&quot;billToCustomerPartyId&quot;),
                (request.getParameter(&quot;supplierPartyId&quot;) != null ? request.getParameter(&quot;supplierPartyId&quot;) : request.getParameter(&quot;billFromVendorPartyId&quot;)));

        HttpSession session = request.getSession(true);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="E196532E08CFEEE2BC56F2155F5A341E">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>CheckOutEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/CheckOutEvents.java</FilePath>
<LineStart>384</LineStart>
<Snippet>        if (UtilValidate.isNotEmpty(taxAuthPartyGeoIds)) {
            try {
                Map&lt;String, Object&gt; createCustomerTaxAuthInfoResult = dispatcher.runSync(&quot;createCustomerTaxAuthInfo&quot;,
                        UtilMisc.toMap(&quot;partyId&quot;, cart.getPartyId(), &quot;taxAuthPartyGeoIds&quot;, taxAuthPartyGeoIds, &quot;partyTaxId&quot;, partyTaxId, &quot;isExempt&quot;, isExempt));
                ServiceUtil.getMessages(request, createCustomerTaxAuthInfoResult, null);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="75CA7134-B6BE-444A-9815-E739432FCA47" iid="77CA2D6CCFF415EC05A5DF9E8CF0F26B">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method run() in EntityField.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>EntityField.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/pseudotag/EntityField.java</FilePath>
<LineStart>249</LineStart>
<Snippet>            if (prefix != null)
                out.print(prefix);
            out.print(fieldString);
            if (suffix != null)
                out.print(suffix);</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>505</LineStart>
<Snippet>        Map&lt;String, Object&gt; ftlResults = null;
        try {
            ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
        } catch (ServiceAuthException e) {
            String msg = e.getMessage();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="B2C6DD8AF611E9D894C8371F21EC5A48">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>TrackingCodeEvents.java</FileName>
<FilePath>applications/marketing/src/org/ofbiz/marketing/tracking/TrackingCodeEvents.java</FilePath>
<LineStart>372</LineStart>
<Snippet>
        String trackingCodeId = request.getParameter(&quot;autoTrackingCode&quot;);
        if (UtilValidate.isEmpty(trackingCodeId)) trackingCodeId = request.getParameter(&quot;atc&quot;);
        if (UtilValidate.isEmpty(trackingCodeId)) {
            Cookie[] cookies = request.getCookies();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="F386EBC12D536458AA49408F0892AC7A">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceEventHandler.java</FilePath>
<LineStart>337</LineStart>
<Snippet>                dispatcher.runAsync(serviceName, serviceContext);
            } else {
                result = dispatcher.runSync(serviceName, serviceContext);
            }
        } catch (ServiceAuthException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="47620C95-01F7-474F-9944-4C54A9A43679" iid="6E3A365FC3905BE065A8EA10B9BCCF29">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method closeEditWrap() in RenderSubContentCacheTransform.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RenderSubContentCacheTransform.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderSubContentCacheTransform.java</FilePath>
<LineStart>275</LineStart>
<Snippet>                ServletContext servletContext = request.getSession().getServletContext();
                RequestHandler rh = (RequestHandler) servletContext.getAttribute(&quot;_REQUEST_HANDLER_&quot;);
                out.append(rh.makeLink(request, response, &quot;/&quot; + fullRequest, false, false, true));
                out.write(&quot;\&quot;&gt;Edit&lt;/a&gt;&quot;);
                out.write(&quot;&lt;/div&gt;&quot;);</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>575</LineStart>
<Snippet>        while (e.hasMoreElements()) {
            String name = e.nextElement();
            request.setAttribute(name, request.getParameter(name));
        }
    }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF" iid="D9C9CECDB6609CCC1B3DFBA877340E88">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method run() in InputValue.java sends unvalidated data to a web browser on line 143, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>InputValue.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/pseudotag/InputValue.java</FilePath>
<LineStart>143</LineStart>
<Snippet>            inputValue = UtilFormatOut.replaceString(inputValue, &quot;\&quot;&quot;, &quot;&amp;quot;&quot;);
            pageContext.getOut().print(&quot;name=\&quot;&quot; + paramName + &quot;\&quot; value=\&quot;&quot; +
                inputValue + &quot;\&quot;&quot;);
        } else {
            pageContext.getOut().print(inputValue);</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>119</LineStart>
<Snippet>            contentRevisionMap.put(&quot;contentId&quot;, contentId);
            contentRevisionMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentRevisionAndItem&quot;, contentRevisionMap);
            keySet = result.keySet();
            iter = keySet.iterator();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="9F1A6224AF62376F7ACB8191A165D6ED">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method checkAfterNewline() in IndentingWriter.java sends unvalidated data to a web browser on line 58, which can result in the browser executing malicious code.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>58</LineStart>
<Snippet>            if (doSpace) {
                if (doNewline) {
                    super.write(indent.toString(), 0, indent.length());
                } else {
                    super.write(' ');</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>119</LineStart>
<Snippet>            contentRevisionMap.put(&quot;contentId&quot;, contentId);
            contentRevisionMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentRevisionAndItem&quot;, contentRevisionMap);
            keySet = result.keySet();
            iter = keySet.iterator();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="02A7534AC7FF8965A2530137E3FD66D7">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method render() in Section.java sends unvalidated data to a web browser on line 98, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Section.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/region/Section.java</FilePath>
<LineStart>98</LineStart>
<Snippet>            if (&quot;direct&quot;.equals(type)) {
                if (UtilJ2eeCompat.useOutputStreamNotWriter(context)) {
                    response.getOutputStream().print(content);
                } else {
                    response.getWriter().print(content);</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>119</LineStart>
<Snippet>            contentRevisionMap.put(&quot;contentId&quot;, contentId);
            contentRevisionMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentRevisionAndItem&quot;, contentRevisionMap);
            keySet = result.keySet();
            iter = keySet.iterator();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="47620C95-01F7-474F-9944-4C54A9A43679" iid="3B483BFEA458E149016E3EE46394A870">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method closeEditWrap() in RenderContentTransform.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RenderContentTransform.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderContentTransform.java</FilePath>
<LineStart>144</LineStart>
<Snippet>                ServletContext servletContext = request.getSession().getServletContext();
                RequestHandler rh = (RequestHandler) servletContext.getAttribute(&quot;_REQUEST_HANDLER_&quot;);
                out.append(rh.makeLink(request, response, &quot;/&quot; + fullRequest, false, false, true));
                out.write(&quot;\&quot;&gt;Edit&lt;/a&gt;&quot;);
                out.write(&quot;&lt;/div&gt;&quot;);</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceMultiEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceMultiEventHandler.java</FilePath>
<LineStart>308</LineStart>
<Snippet>                Map&lt;String, Object&gt; result = null;
                try {
                    result = dispatcher.runSync(serviceName, serviceContext);
                } catch (ServiceAuthException e) {
                    // not logging since the service engine already did</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="12AF265A-8085-459E-A9C9-E0922DFFE1F5" iid="45AA62EC649582AE3410A8D634771173">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>183</LineStart>
<Snippet>        Map&lt;String, Object&gt; results = null;
        try {
            results = dispatcher.runSync(&quot;renderCompDocPdf&quot;, mapIn);
        } catch (ServiceAuthException e) {
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, e.toString());</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="EE87EDA5B5528837A2E5C646A5B22BB1">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>261</LineStart>
<Snippet>        ByteBuffer imageData = (ByteBuffer) tempFile.get(&quot;imageData&quot;);
        if (UtilValidate.isEmpty(imageName) || UtilValidate.isEmpty(imageData)) {
            session.setAttribute(&quot;frameContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
            session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;There is no frame image, please select the image type *.PNG  uploading.&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="E4DD13F5844B26C8B557D01AB184DB3B">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 115, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>115</LineStart>
<Snippet>    @Override
    public void write(String s) throws IOException {
        write(s, 0, s.length());
    }
</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1354</LineStart>
<Snippet>        ShoppingCart cart = null;
        try {
            Map&lt;String, Object&gt; outMap = dispatcher.runSync(&quot;loadCartFromQuote&quot;,
                    UtilMisc.&lt;String, Object&gt;toMap(&quot;quoteId&quot;, quoteId,
                            &quot;applyQuoteAdjustments&quot;, &quot;true&quot;,</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="ABFC2E1DD9CEE34E4B36B5709000410D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>ShipmentEvents.java</FileName>
<FilePath>applications/product/src/org/ofbiz/shipment/shipment/ShipmentEvents.java</FilePath>
<LineStart>95</LineStart>
<Snippet>        GenericValue userLogin = (GenericValue)request.getSession().getAttribute(&quot;userLogin&quot;);

        String shipmentId = request.getParameter(&quot;shipmentIdReceived&quot;);
        String forceShipmentReceived = request.getParameter(&quot;forceShipmentReceived&quot;);
        if (UtilValidate.isNotEmpty(shipmentId) &amp;&amp; &quot;Y&quot;.equals(forceShipmentReceived)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="6B4D4B01B0B23F912940C07AE55D2B69">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>130</LineStart>
<Snippet>        }
        checkAfterNewline();
        super.write(s, offset, i - offset);
    }
}</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceEventHandler.java</FilePath>
<LineStart>337</LineStart>
<Snippet>                dispatcher.runAsync(serviceName, serviceContext);
            } else {
                result = dispatcher.runSync(serviceName, serviceContext);
            }
        } catch (ServiceAuthException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="E9E017439A2A86F56CDF1AAD3467087C">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>LoginEvents.java</FileName>
<FilePath>applications/securityext/src/org/ofbiz/securityext/login/LoginEvents.java</FilePath>
<LineStart>77</LineStart>
<Snippet>
            String username = request.getParameter(&quot;USERNAME&quot;);
            String password = request.getParameter(&quot;PASSWORD&quot;);

            if ((username != null) &amp;&amp; (&quot;true&quot;.equalsIgnoreCase(UtilProperties.getPropertyValue(&quot;security.properties&quot;, &quot;username.lowercase&quot;)))) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="DEEDC5034A685073509EED1EB013F639">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>CmsEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/cms/CmsEvents.java</FilePath>
<LineStart>107</LineStart>
<Snippet>            pathInfo = overrideViewUri;
        } else {
            pathInfo = request.getPathInfo();
            if (targetRequest.equals(actualRequest) &amp;&amp; pathInfo != null) {
                // was called directly -- path info is everything after the request</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="CE1F3B35E4B7F101EB883B0C8198F99C">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 130, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>130</LineStart>
<Snippet>        }
        checkAfterNewline();
        super.write(s, offset, i - offset);
    }
}</Snippet>
                            </Primary>
                            <Source>
<FileName>LoginEvents.java</FileName>
<FilePath>applications/securityext/src/org/ofbiz/securityext/login/LoginEvents.java</FilePath>
<LineStart>77</LineStart>
<Snippet>
            String username = request.getParameter(&quot;USERNAME&quot;);
            String password = request.getParameter(&quot;PASSWORD&quot;);

            if ((username != null) &amp;&amp; (&quot;true&quot;.equalsIgnoreCase(UtilProperties.getPropertyValue(&quot;security.properties&quot;, &quot;username.lowercase&quot;)))) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="C03EE6FACE309C8C809CBBFFFC13EF11">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>257</LineStart>
<Snippet>        Map&lt;String, Object&gt; results = null;
        try {
            results = dispatcher.runSync(&quot;renderContentPdf&quot;, mapIn);
        } catch (ServiceAuthException e) {
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, e.toString());</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="08B498FAFB4CA632A6CFA84FEDCBC43E">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>GenericWebEvent.java</FileName>
<FilePath>framework/webtools/src/org/ofbiz/webtools/GenericWebEvent.java</FilePath>
<LineStart>135</LineStart>
<Snippet>            }

            String fval = request.getParameter(field.getName());
            if (UtilValidate.isNotEmpty(fval)) {
                try {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="702353369FE57400251B3B2F07A261C0">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>261</LineStart>
<Snippet>        ByteBuffer imageData = (ByteBuffer) tempFile.get(&quot;imageData&quot;);
        if (UtilValidate.isEmpty(imageName) || UtilValidate.isEmpty(imageData)) {
            session.setAttribute(&quot;frameContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
            session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;There is no frame image, please select the image type *.PNG  uploading.&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="9631D7347E53ACCB62D68DC07F477F8E">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>TrackingCodeEvents.java</FileName>
<FilePath>applications/marketing/src/org/ofbiz/marketing/tracking/TrackingCodeEvents.java</FilePath>
<LineStart>93</LineStart>
<Snippet>     */
    public static String checkPartnerTrackingCodeUrlParam(HttpServletRequest request, HttpServletResponse response) {
        String trackingCodeId = request.getParameter(&quot;ptc&quot;);

        if (UtilValidate.isNotEmpty(trackingCodeId)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="CB5F49553AA62FD3F4BFFE3B70283A48">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method openEditWrap() in RenderSubContentCacheTransform.java sends unvalidated data to a web browser on line 202, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>RenderSubContentCacheTransform.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderSubContentCacheTransform.java</FilePath>
<LineStart>202</LineStart>
<Snippet>            public void openEditWrap(Writer out, String editStyle) throws IOException {
                String divStr = &quot;&lt;div class=\&quot;&quot; + editStyle + &quot;\&quot;&gt;&quot;;
                out.write(divStr);
            }
</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>104</LineStart>
<Snippet>        persistMap.put(&quot;userLogin&quot;, userLogin);
        try {
            Map&lt;String, Object&gt; persistResult = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, persistMap);
            contentId = (String)persistResult.get(&quot;contentId&quot;);
            //request.setAttribute(&quot;contentId&quot;, contentId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="629C1F379CE4CF7435318D8EE0E728E5">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 124, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>124</LineStart>
<Snippet>            if (s.charAt(i) == '\n') {
                checkAfterNewline();
                super.write(s, offset, i - offset + 1);
                offset = i + 1;
                lastWasNewline = true;</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>945</LineStart>
<Snippet>            newCart = cartList.remove(cartIndex);
        } else {
            String productStoreId = request.getParameter(&quot;productStoreId&quot;);
            if (UtilValidate.isNotEmpty(productStoreId)) {
                session.setAttribute(&quot;productStoreId&quot;, productStoreId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="6D25FCF7E1AEF044A6F77DCB7979A4FD">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>221</LineStart>
<Snippet>                sumContext.put(&quot;mapKey&quot;, &quot;SUMMARY&quot;);
                sumContext.put(&quot;dataTemplateTypeId&quot;, &quot;NONE&quot;);
                Map&lt;String, Object&gt; sumResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, sumContext);
                isError = ModelService.RESPOND_ERROR.equals(sumResults.get(ModelService.RESPONSE_MESSAGE));
                if (isError) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="D027DAA9-A3BE-49E4-BDBF-3DFF657F84CA" iid="F1B5125601EA0137BD022DDCE02F3982">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>688</LineStart>
<Snippet>        
        // TODO: the code below here needs some cleanups
        String billToCustomerPartyId = request.getParameter(&quot;billToCustomerPartyId_o_0&quot;);
        if (UtilValidate.isEmpty(billToCustomerPartyId) &amp;&amp; UtilValidate.isEmpty(supplierPartyId)) {
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, UtilProperties.getMessage(resource_error, &quot;OrderCouldNotInitPurchaseOrder&quot;, locale));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1C85B63C-0870-45B8-9909-86BA43F68B05" iid="D1D0B5E1F7AC7560384FA8646DA2B4BB">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method closeEditWrap() in RenderContentAsText.java sends unvalidated data to a web browser on line 244, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>RenderContentAsText.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderContentAsText.java</FilePath>
<LineStart>244</LineStart>
<Snippet>                ServletContext servletContext = request.getSession().getServletContext();
                RequestHandler rh = (RequestHandler) servletContext.getAttribute(&quot;_REQUEST_HANDLER_&quot;);
                out.append(rh.makeLink(request, response, &quot;/&quot; + fullRequest, false, false, true));
                out.write(&quot;\&quot;&gt;Edit&lt;/a&gt;&quot;);
                out.write(&quot;&lt;/div&gt;&quot;);</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>505</LineStart>
<Snippet>        Map&lt;String, Object&gt; ftlResults = null;
        try {
            ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
        } catch (ServiceAuthException e) {
            String msg = e.getMessage();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="AE043F5E7C243E85BACBB0F1E0A3A5D9">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 124, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>124</LineStart>
<Snippet>            if (s.charAt(i) == '\n') {
                checkAfterNewline();
                super.write(s, offset, i - offset + 1);
                offset = i + 1;
                lastWasNewline = true;</Snippet>
                            </Primary>
                            <Source>
<FileName>LoginEvents.java</FileName>
<FilePath>applications/securityext/src/org/ofbiz/securityext/login/LoginEvents.java</FilePath>
<LineStart>76</LineStart>
<Snippet>        if (userLogin == null) {

            String username = request.getParameter(&quot;USERNAME&quot;);
            String password = request.getParameter(&quot;PASSWORD&quot;);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="75CA7134-B6BE-444A-9815-E739432FCA47" iid="28A0BB50BD7670F63421AE762125C09B">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method run() in InputValue.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>InputValue.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/pseudotag/InputValue.java</FilePath>
<LineStart>145</LineStart>
<Snippet>                inputValue + &quot;\&quot;&quot;);
        } else {
            pageContext.getOut().print(inputValue);
        }
    }</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceEventHandler.java</FilePath>
<LineStart>337</LineStart>
<Snippet>                dispatcher.runAsync(serviceName, serviceContext);
            } else {
                result = dispatcher.runSync(serviceName, serviceContext);
            }
        } catch (ServiceAuthException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="9C1D422D7E10B4E9AABF8DE4E69D9E19">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1327</LineStart>
<Snippet>        ShoppingCart cart = null;
        try {
            Map&lt;String, Object&gt; outMap = dispatcher.runSync(&quot;loadCartFromShoppingList&quot;,
                    UtilMisc.&lt;String, Object&gt;toMap(&quot;shoppingListId&quot;, shoppingListId,
                    &quot;userLogin&quot;, userLogin));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF" iid="34702F8295756A7927208BE69F2BB6A0">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method run() in InputValue.java sends unvalidated data to a web browser on line 145, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>InputValue.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/pseudotag/InputValue.java</FilePath>
<LineStart>145</LineStart>
<Snippet>                inputValue + &quot;\&quot;&quot;);
        } else {
            pageContext.getOut().print(inputValue);
        }
    }</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>119</LineStart>
<Snippet>            contentRevisionMap.put(&quot;contentId&quot;, contentId);
            contentRevisionMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentRevisionAndItem&quot;, contentRevisionMap);
            keySet = result.keySet();
            iter = keySet.iterator();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="77B1ADF66A0E9188CB69CD2AF7390652">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 124, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>124</LineStart>
<Snippet>            if (s.charAt(i) == '\n') {
                checkAfterNewline();
                super.write(s, offset, i - offset + 1);
                offset = i + 1;
                lastWasNewline = true;</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceEventHandler.java</FilePath>
<LineStart>337</LineStart>
<Snippet>                dispatcher.runAsync(serviceName, serviceContext);
            } else {
                result = dispatcher.runSync(serviceName, serviceContext);
            }
        } catch (ServiceAuthException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="CFC0B9F25EC6F8B836C8BA1F833365B6">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>TrackingCodeEvents.java</FileName>
<FilePath>applications/marketing/src/org/ofbiz/marketing/tracking/TrackingCodeEvents.java</FilePath>
<LineStart>93</LineStart>
<Snippet>     */
    public static String checkPartnerTrackingCodeUrlParam(HttpServletRequest request, HttpServletResponse response) {
        String trackingCodeId = request.getParameter(&quot;ptc&quot;);

        if (UtilValidate.isNotEmpty(trackingCodeId)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="384A24D557FCF8EFF6515E5A559AF23B">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CoreEvents.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/CoreEvents.java</FilePath>
<LineStart>516</LineStart>
<Snippet>    public static String runService(HttpServletRequest request, HttpServletResponse response) {
        // get the mode and service name
        String serviceName = request.getParameter(&quot;serviceName&quot;);
        String mode = request.getParameter(&quot;mode&quot;);
        Locale locale = UtilHttp.getLocale(request);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="D027DAA9-A3BE-49E4-BDBF-3DFF657F84CA" iid="1DB73553510F5FC4AF9F9F625E931926">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>CommonEvents.java</FileName>
<FilePath>framework/common/src/org/ofbiz/common/CommonEvents.java</FilePath>
<LineStart>231</LineStart>
<Snippet>    /** Simple event to set the users per-session currency uom value */
    public static String setSessionCurrencyUom(HttpServletRequest request, HttpServletResponse response) {
        String currencyUom = request.getParameter(&quot;currencyUom&quot;);
        if (UtilValidate.isNotEmpty(currencyUom)) {
            // update the session</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="C06B2C55968910C0D27553AF1DAE9154">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method openEditWrap() in RenderContentTransform.java sends unvalidated data to a web browser on line 129, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>RenderContentTransform.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderContentTransform.java</FilePath>
<LineStart>129</LineStart>
<Snippet>            public void openEditWrap(Writer out, String editStyle) throws IOException {
                String divStr = &quot;&lt;div class=\&quot;&quot; + editStyle + &quot;\&quot;&gt;&quot;;
                out.write(divStr);
            }
</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceEventHandler.java</FilePath>
<LineStart>337</LineStart>
<Snippet>                dispatcher.runAsync(serviceName, serviceContext);
            } else {
                result = dispatcher.runSync(serviceName, serviceContext);
            }
        } catch (ServiceAuthException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="4E8CC56A686271CFF4918276570D30C8">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method close() in OfbizUrlTransform.java sends unvalidated data to a web browser on line 205, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>OfbizUrlTransform.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/ftl/OfbizUrlTransform.java</FilePath>
<LineStart>205</LineStart>
<Snippet>                        String requestUrl = buf.toString();
                        newURL.append(requestUrl);
                        out.write(newURL.toString());
                    } else if (req != null) {
                        HttpServletRequest request = (HttpServletRequest) req.getWrappedObject();</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>348</LineStart>
<Snippet>        }
        String frameContentId = request.getParameter(&quot;frameContentId&quot;);
        String frameDataResourceId = request.getParameter(&quot;frameDataResourceId&quot;);
        
        if (UtilValidate.isEmpty(request.getParameter(&quot;imageWidth&quot;)) || UtilValidate.isEmpty(request.getParameter(&quot;imageHeight&quot;))) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="12AF265A-8085-459E-A9C9-E0922DFFE1F5" iid="B2E834D35A0FF92DD71D4EF98D4678EB">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>150</LineStart>
<Snippet>            String contentAssocTypeId = (String)passedParams.get(&quot;contentAssocTypeId&quot;);
            ftlContext.put(&quot;contentAssocTypeId&quot;, null); // Don't post assoc at this time
            Map&lt;String, Object&gt; ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
            boolean isError = ModelService.RESPOND_ERROR.equals(ftlResults.get(ModelService.RESPONSE_MESSAGE));
            if (isError) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="219FCF6F-A77C-4219-8506-F5A0A0D6BE4A" iid="52BB4758DF7B617C21EAED2D7342673A">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method closeEditWrap() in RenderContentAsText.java sends unvalidated data to a web browser on line 244, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>RenderContentAsText.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderContentAsText.java</FilePath>
<LineStart>244</LineStart>
<Snippet>                ServletContext servletContext = request.getSession().getServletContext();
                RequestHandler rh = (RequestHandler) servletContext.getAttribute(&quot;_REQUEST_HANDLER_&quot;);
                out.append(rh.makeLink(request, response, &quot;/&quot; + fullRequest, false, false, true));
                out.write(&quot;\&quot;&gt;Edit&lt;/a&gt;&quot;);
                out.write(&quot;&lt;/div&gt;&quot;);</Snippet>
                            </Primary>
                            <Source>
<FileName>CommonEvents.java</FileName>
<FilePath>framework/common/src/org/ofbiz/common/CommonEvents.java</FilePath>
<LineStart>179</LineStart>
<Snippet>     * setting should be passed as a &quot;newLocale&quot; request parameter. */
    public static String setSessionLocale(HttpServletRequest request, HttpServletResponse response) {
        String localeString = request.getParameter(&quot;newLocale&quot;);
        if (UtilValidate.isNotEmpty(localeString)) {
            UtilHttp.setLocale(request, localeString);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="5C374A6E692B4D2E2FDC77DE008D6627">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method close() in OfbizUrlTransform.java sends unvalidated data to a web browser on line 205, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>OfbizUrlTransform.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/ftl/OfbizUrlTransform.java</FilePath>
<LineStart>205</LineStart>
<Snippet>                        String requestUrl = buf.toString();
                        newURL.append(requestUrl);
                        out.write(newURL.toString());
                    } else if (req != null) {
                        HttpServletRequest request = (HttpServletRequest) req.getWrappedObject();</Snippet>
                            </Primary>
                            <Source>
<FileName>AbstractOFBizAuthenticationHandler.java</FileName>
<FilePath>specialpurpose/ldap/src/org/ofbiz/ldap/commons/AbstractOFBizAuthenticationHandler.java</FilePath>
<LineStart>129</LineStart>
<Snippet>
        try {
            loginResult = dispatcher.runSync(&quot;userLogin&quot;, UtilMisc.toMap(&quot;login.username&quot;, username, &quot;login.password&quot;, password, &quot;visitId&quot;, visitId, &quot;locale&quot;, UtilHttp.getLocale(request)));
        } catch (GenericServiceException e) {
            throw new GenericServiceException(e.getLocalizedMessage());</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="12AF265A-8085-459E-A9C9-E0922DFFE1F5" iid="2AA7FD6D38BD62982EFE8479985B3956">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>303</LineStart>
<Snippet>            dataResourceCtx.put(&quot;mimeTypeId&quot;, &quot;image/png&quot;);
            dataResourceCtx.put(&quot;isPublic&quot;, &quot;Y&quot;);
            Map&lt;String, Object&gt; dataResourceResult = dispatcher.runSync(&quot;createDataResource&quot;, dataResourceCtx);
            dataResourceId = dataResourceResult.get(&quot;dataResourceId&quot;).toString();
            //create content</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="E6545A49698D3C353AA6D66CCC1E9FE7">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 115, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>115</LineStart>
<Snippet>    @Override
    public void write(String s) throws IOException {
        write(s, 0, s.length());
    }
</Snippet>
                            </Primary>
                            <Source>
<FileName>ICalWorker.java</FileName>
<FilePath>applications/workeffort/src/org/ofbiz/workeffort/workeffort/ICalWorker.java</FilePath>
<LineStart>285</LineStart>
<Snippet>        HttpSession session = request.getSession();
        LocalDispatcher dispatcher = (LocalDispatcher) request.getAttribute(&quot;dispatcher&quot;);
        Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;userLogin&quot;, serviceMap);
        if (ServiceUtil.isError(result) || ServiceUtil.isFailure(result)) {
            return;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="A49DA1087D0BEA66195E70CBC0AEB7A4">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method openEditWrap() in RenderSubContentCacheTransform.java sends unvalidated data to a web browser on line 202, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>RenderSubContentCacheTransform.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderSubContentCacheTransform.java</FilePath>
<LineStart>202</LineStart>
<Snippet>            public void openEditWrap(Writer out, String editStyle) throws IOException {
                String divStr = &quot;&lt;div class=\&quot;&quot; + editStyle + &quot;\&quot;&gt;&quot;;
                out.write(divStr);
            }
</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceMultiEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceMultiEventHandler.java</FilePath>
<LineStart>308</LineStart>
<Snippet>                Map&lt;String, Object&gt; result = null;
                try {
                    result = dispatcher.runSync(serviceName, serviceContext);
                } catch (ServiceAuthException e) {
                    // not logging since the service engine already did</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="7218C9A8FAC3B9A77ED362C67B9CD693">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 115, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>115</LineStart>
<Snippet>    @Override
    public void write(String s) throws IOException {
        write(s, 0, s.length());
    }
</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>348</LineStart>
<Snippet>        }
        String frameContentId = request.getParameter(&quot;frameContentId&quot;);
        String frameDataResourceId = request.getParameter(&quot;frameDataResourceId&quot;);
        
        if (UtilValidate.isEmpty(request.getParameter(&quot;imageWidth&quot;)) || UtilValidate.isEmpty(request.getParameter(&quot;imageHeight&quot;))) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="FAF2619346EAEDA5119D2CDBCFD90D0E">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>403</LineStart>
<Snippet>            if (UtilValidate.isNotEmpty(request.getParameter(&quot;frameExistContentId&quot;)) &amp;&amp; UtilValidate.isNotEmpty(request.getParameter(&quot;frameExistDataResourceId&quot;))) {
                session.setAttribute(&quot;frameExistContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
                session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            }
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;Required frame image content ID&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="D17A8E50B872963E6B754B2DE42FA30C">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1499</LineStart>
<Snippet>        String custRequestId = null;
        try {
            result = dispatcher.runSync(&quot;createCustRequestFromCart&quot;,
                    UtilMisc.toMap(&quot;cart&quot;, cart,
                            &quot;userLogin&quot;, userLogin));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="307A879C7F6808B598CD9ADB2CD800DD">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>TrackingCodeEvents.java</FileName>
<FilePath>applications/marketing/src/org/ofbiz/marketing/tracking/TrackingCodeEvents.java</FilePath>
<LineStart>374</LineStart>
<Snippet>        if (UtilValidate.isEmpty(trackingCodeId)) trackingCodeId = request.getParameter(&quot;atc&quot;);
        if (UtilValidate.isEmpty(trackingCodeId)) {
            Cookie[] cookies = request.getCookies();
            if (cookies != null) {
                for (Cookie cookie : cookies) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="D8F4BC918F865BFEB77AB94B3A9D3FED">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>312</LineStart>
<Snippet>            contentCtx.put(&quot;fromDate&quot;, UtilDateTime.nowTimestamp());
            contentCtx.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; contentResult = dispatcher.runSync(&quot;createContent&quot;, contentCtx);
            contentId = contentResult.get(&quot;contentId&quot;).toString();
        } catch (Exception e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="5C7B660E62F7973981E0762EEB004ACF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method checkAfterNewline() in IndentingWriter.java sends unvalidated data to a web browser on line 58, which can result in the browser executing malicious code.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>58</LineStart>
<Snippet>            if (doSpace) {
                if (doNewline) {
                    super.write(indent.toString(), 0, indent.length());
                } else {
                    super.write(' ');</Snippet>
                            </Primary>
                            <Source>
<FileName>CoreEvents.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/CoreEvents.java</FilePath>
<LineStart>412</LineStart>
<Snippet>        try {
            if (null!=request.getParameter(&quot;_RUN_SYNC_&quot;) &amp;&amp; request.getParameter(&quot;_RUN_SYNC_&quot;).equals(&quot;Y&quot;)) {
                syncServiceResult = dispatcher.runSync(serviceName, serviceContext);
            } else {
                dispatcher.schedule(jobName, poolName, serviceName, serviceContext, startTime, frequency, interval, count, endTime, maxRetry);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="A8472C4C534684D8465CA0E1EFD86241">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>CheckOutHelper.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/CheckOutHelper.java</FilePath>
<LineStart>519</LineStart>
<Snippet>                Map&lt;String, Object&gt; gcResult = null;
                try {
                    gcResult = dispatcher.runSync(&quot;createGiftCard&quot;, gcCtx);
                } catch (GenericServiceException e) {
                    Debug.logError(e, module);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="76F7C5DF-850D-4AC8-A3FE-8AE7AABFB50E" iid="F08254A6DFEE0B3A879454ED8B2080B8">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method streamContent() in UtilHttp.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>1033</LineStart>
<Snippet>        try {
            while ((read = bis.read(buffer, 0, buffer.length)) != -1) {
                bos.write(buffer, 0, read);
            }
        } catch (IOException e) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceEventHandler.java</FilePath>
<LineStart>337</LineStart>
<Snippet>                dispatcher.runAsync(serviceName, serviceContext);
            } else {
                result = dispatcher.runSync(serviceName, serviceContext);
            }
        } catch (ServiceAuthException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="F4C8608FA087EA91B791BDA4A5725C32">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>WebPosEvents.java</FileName>
<FilePath>specialpurpose/webpos/src/org/ofbiz/webpos/WebPosEvents.java</FilePath>
<LineStart>94</LineStart>
<Snippet>            GenericValue productStore = ProductStoreWorker.getProductStore(productStoreId, delegator);
            String facilityId = null;
            String currencyUomId = request.getParameter(&quot;currencyUomId&quot;);

            if (UtilValidate.isNotEmpty(productStore)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="47620C95-01F7-474F-9944-4C54A9A43679" iid="645EF36956683DD9F7C07DACF7606D27">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method closeEditWrap() in RenderContentAsText.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RenderContentAsText.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderContentAsText.java</FilePath>
<LineStart>244</LineStart>
<Snippet>                ServletContext servletContext = request.getSession().getServletContext();
                RequestHandler rh = (RequestHandler) servletContext.getAttribute(&quot;_REQUEST_HANDLER_&quot;);
                out.append(rh.makeLink(request, response, &quot;/&quot; + fullRequest, false, false, true));
                out.write(&quot;\&quot;&gt;Edit&lt;/a&gt;&quot;);
                out.write(&quot;&lt;/div&gt;&quot;);</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceMultiEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceMultiEventHandler.java</FilePath>
<LineStart>308</LineStart>
<Snippet>                Map&lt;String, Object&gt; result = null;
                try {
                    result = dispatcher.runSync(serviceName, serviceContext);
                } catch (ServiceAuthException e) {
                    // not logging since the service engine already did</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="D0197565DDD21A9413E6DA24166A7E78">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 115, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>115</LineStart>
<Snippet>    @Override
    public void write(String s) throws IOException {
        write(s, 0, s.length());
    }
</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>261</LineStart>
<Snippet>        ByteBuffer imageData = (ByteBuffer) tempFile.get(&quot;imageData&quot;);
        if (UtilValidate.isEmpty(imageName) || UtilValidate.isEmpty(imageData)) {
            session.setAttribute(&quot;frameContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
            session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;There is no frame image, please select the image type *.PNG  uploading.&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="10A31A151965DB03DBC89ACA340B5041">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 130, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>130</LineStart>
<Snippet>        }
        checkAfterNewline();
        super.write(s, offset, i - offset);
    }
}</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>184</LineStart>
<Snippet>
    public static Map&lt;String, Object&gt; getPathInfoOnlyParameterMap(HttpServletRequest request, Set&lt;? extends String&gt; nameSet, Boolean onlyIncludeOrSkip) {
        return getPathInfoOnlyParameterMap(request.getPathInfo(), nameSet, onlyIncludeOrSkip);
    }
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="843AF2B2578E88F66B149B44D01C30D3">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>RequestHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/RequestHandler.java</FilePath>
<LineStart>128</LineStart>
<Snippet>        }

        String overrideViewUri = RequestHandler.getOverrideViewUri(request.getPathInfo());

        String requestMissingErrorMessage = &quot;Unknown request [&quot; + defaultRequestUri + &quot;]; this request does not exist or cannot be called directly.&quot;;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="A14718109E34833A657BFFB3CBF7FCA5">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 124, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>124</LineStart>
<Snippet>            if (s.charAt(i) == '\n') {
                checkAfterNewline();
                super.write(s, offset, i - offset + 1);
                offset = i + 1;
                lastWasNewline = true;</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1535</LineStart>
<Snippet>
        // TODO: re-factor and move this inside the ShoppingCart constructor
        String orderMode = request.getParameter(&quot;orderMode&quot;);
        if (orderMode != null) {
            cart.setOrderType(orderMode);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="75CA7134-B6BE-444A-9815-E739432FCA47" iid="97A28257F02DE9E2C1028AFC2978BA16">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method run() in InputValue.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>InputValue.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/pseudotag/InputValue.java</FilePath>
<LineStart>145</LineStart>
<Snippet>                inputValue + &quot;\&quot;&quot;);
        } else {
            pageContext.getOut().print(inputValue);
        }
    }</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>104</LineStart>
<Snippet>        persistMap.put(&quot;userLogin&quot;, userLogin);
        try {
            Map&lt;String, Object&gt; persistResult = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, persistMap);
            contentId = (String)persistResult.get(&quot;contentId&quot;);
            //request.setAttribute(&quot;contentId&quot;, contentId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="A4E82BEFD178ED8BD06B323CA8A33CDC">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 124, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>124</LineStart>
<Snippet>            if (s.charAt(i) == '\n') {
                checkAfterNewline();
                super.write(s, offset, i - offset + 1);
                offset = i + 1;
                lastWasNewline = true;</Snippet>
                            </Primary>
                            <Source>
<FileName>CoreEvents.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/CoreEvents.java</FilePath>
<LineStart>412</LineStart>
<Snippet>        try {
            if (null!=request.getParameter(&quot;_RUN_SYNC_&quot;) &amp;&amp; request.getParameter(&quot;_RUN_SYNC_&quot;).equals(&quot;Y&quot;)) {
                syncServiceResult = dispatcher.runSync(serviceName, serviceContext);
            } else {
                dispatcher.schedule(jobName, poolName, serviceName, serviceContext, startTime, frequency, interval, count, endTime, maxRetry);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="B0DEC548E665846F615192A714357407">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 124, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>124</LineStart>
<Snippet>            if (s.charAt(i) == '\n') {
                checkAfterNewline();
                super.write(s, offset, i - offset + 1);
                offset = i + 1;
                lastWasNewline = true;</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>267</LineStart>
<Snippet>        }
        if (!&quot;image/png&quot;.equals(mimType)) {
            session.setAttribute(&quot;frameContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
            session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;The selected image type is incorrect, please select the image type *.PNG to upload.&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="6B57E9A41236AA8101C7AF828124C54B">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>TaskEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/task/TaskEvents.java</FilePath>
<LineStart>75</LineStart>
<Snippet>            Map&lt;String, ? extends Object&gt; context = UtilMisc.toMap(&quot;workEffortId&quot;, workEffortId, &quot;partyId&quot;, partyId, &quot;roleTypeId&quot;, roleTypeId,
                    &quot;fromDate&quot;, fromDate, &quot;result&quot;, parameterMap, &quot;userLogin&quot;, userLogin);
            result = dispatcher.runSync(&quot;wfCompleteAssignment&quot;, context);
            if (result.containsKey(ModelService.RESPOND_ERROR)) {
                request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, result.get(ModelService.ERROR_MESSAGE));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="994D50FA5C785F9E9BE9F9130B742CD7">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 115, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>115</LineStart>
<Snippet>    @Override
    public void write(String s) throws IOException {
        write(s, 0, s.length());
    }
</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>312</LineStart>
<Snippet>            contentCtx.put(&quot;fromDate&quot;, UtilDateTime.nowTimestamp());
            contentCtx.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; contentResult = dispatcher.runSync(&quot;createContent&quot;, contentCtx);
            contentId = contentResult.get(&quot;contentId&quot;).toString();
        } catch (Exception e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="30F61CBFE868ACC751FB1A1AF4DFB36B">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1527</LineStart>
<Snippet>        Locale locale = UtilHttp.getLocale(request);

        String productStoreId = request.getParameter(&quot;productStoreId&quot;);

        if (UtilValidate.isNotEmpty(productStoreId)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="D027DAA9-A3BE-49E4-BDBF-3DFF657F84CA" iid="7AB2BF080E0C46047B6202B3EA26AEDE">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1535</LineStart>
<Snippet>
        // TODO: re-factor and move this inside the ShoppingCart constructor
        String orderMode = request.getParameter(&quot;orderMode&quot;);
        if (orderMode != null) {
            cart.setOrderType(orderMode);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="D29F2F3FB8BA848B983AF671D228BC6B">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 130, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>130</LineStart>
<Snippet>        }
        checkAfterNewline();
        super.write(s, offset, i - offset);
    }
}</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>575</LineStart>
<Snippet>        while (e.hasMoreElements()) {
            String name = e.nextElement();
            request.setAttribute(name, request.getParameter(name));
        }
    }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="55BABD0AD23DD54930D62B968778FD63">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>124</LineStart>
<Snippet>            if (s.charAt(i) == '\n') {
                checkAfterNewline();
                super.write(s, offset, i - offset + 1);
                offset = i + 1;
                lastWasNewline = true;</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>505</LineStart>
<Snippet>        Map&lt;String, Object&gt; ftlResults = null;
        try {
            ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
        } catch (ServiceAuthException e) {
            String msg = e.getMessage();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1C85B63C-0870-45B8-9909-86BA43F68B05" iid="71CF2D9FAF26D752E47760C6E233CCB4">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method closeEditWrap() in RenderSubContentCacheTransform.java sends unvalidated data to a web browser on line 275, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>RenderSubContentCacheTransform.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderSubContentCacheTransform.java</FilePath>
<LineStart>275</LineStart>
<Snippet>                ServletContext servletContext = request.getSession().getServletContext();
                RequestHandler rh = (RequestHandler) servletContext.getAttribute(&quot;_REQUEST_HANDLER_&quot;);
                out.append(rh.makeLink(request, response, &quot;/&quot; + fullRequest, false, false, true));
                out.write(&quot;\&quot;&gt;Edit&lt;/a&gt;&quot;);
                out.write(&quot;&lt;/div&gt;&quot;);</Snippet>
                            </Primary>
                            <Source>
<FileName>ContentWorker.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/ContentWorker.java</FilePath>
<LineStart>194</LineStart>
<Snippet>                Map&lt;String,Object&gt; serviceRes;
                try {
                    serviceRes = dispatcher.runSync(serviceName, serviceCtx);
                } catch (GenericServiceException e) {
                    Debug.logError(e, module);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="DDA35839CA989A0CFE7FC5DA076D5514">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>OrderManagerEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/OrderManagerEvents.java</FilePath>
<LineStart>222</LineStart>
<Snippet>                    Map&lt;String, Object&gt; results = null;
                    try {
                        results = dispatcher.runSync(&quot;createPaymentFromPreference&quot;, UtilMisc.toMap(&quot;userLogin&quot;, userLogin,
                                &quot;orderPaymentPreferenceId&quot;, paymentPreference.get(&quot;orderPaymentPreferenceId&quot;), &quot;paymentRefNum&quot;, paymentReference,
                                &quot;paymentFromId&quot;, placingCustomer.getString(&quot;partyId&quot;), &quot;comments&quot;, &quot;Payment received offline and manually entered.&quot;));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="E64AB790860875D565648768129E6B78">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method openEditWrap() in RenderSubContentAsText.java sends unvalidated data to a web browser on line 204, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>RenderSubContentAsText.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderSubContentAsText.java</FilePath>
<LineStart>204</LineStart>
<Snippet>
                String divStr = &quot;&lt;div class=\&quot;&quot; + editStyle + &quot;\&quot;&gt;&quot;;
                out.write(divStr);
            }
</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>104</LineStart>
<Snippet>        persistMap.put(&quot;userLogin&quot;, userLogin);
        try {
            Map&lt;String, Object&gt; persistResult = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, persistMap);
            contentId = (String)persistResult.get(&quot;contentId&quot;);
            //request.setAttribute(&quot;contentId&quot;, contentId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="D9FD5E412249C0823E1EE4C2505E97C2">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>409</LineStart>
<Snippet>        }
        
        String frameContentId = request.getParameter(&quot;frameContentId&quot;);
        Delegator delegator = (Delegator) request.getAttribute(&quot;delegator&quot;);
        </Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="34B14B5E59E7A7DED7389F46F7079695">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 115, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>115</LineStart>
<Snippet>    @Override
    public void write(String s) throws IOException {
        write(s, 0, s.length());
    }
</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>564</LineStart>
<Snippet>        session.setAttribute(&quot;_CLIENT_REMOTE_ADDR_&quot;, request.getRemoteAddr());
        session.setAttribute(&quot;_CLIENT_REMOTE_HOST_&quot;, request.getRemoteHost());
        session.setAttribute(&quot;_CLIENT_REMOTE_USER_&quot;, request.getRemoteUser());
    }
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="47620C95-01F7-474F-9944-4C54A9A43679" iid="C7A625C234ED5616584D90F189B5CE2D">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method closeEditWrap() in RenderSubContentCacheTransform.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RenderSubContentCacheTransform.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderSubContentCacheTransform.java</FilePath>
<LineStart>275</LineStart>
<Snippet>                ServletContext servletContext = request.getSession().getServletContext();
                RequestHandler rh = (RequestHandler) servletContext.getAttribute(&quot;_REQUEST_HANDLER_&quot;);
                out.append(rh.makeLink(request, response, &quot;/&quot; + fullRequest, false, false, true));
                out.write(&quot;\&quot;&gt;Edit&lt;/a&gt;&quot;);
                out.write(&quot;&lt;/div&gt;&quot;);</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceEventHandler.java</FilePath>
<LineStart>337</LineStart>
<Snippet>                dispatcher.runAsync(serviceName, serviceContext);
            } else {
                result = dispatcher.runSync(serviceName, serviceContext);
            }
        } catch (ServiceAuthException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="D4A74EFCCB556FCF938E1554544ECEC3">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>564</LineStart>
<Snippet>        session.setAttribute(&quot;_CLIENT_REMOTE_ADDR_&quot;, request.getRemoteAddr());
        session.setAttribute(&quot;_CLIENT_REMOTE_HOST_&quot;, request.getRemoteHost());
        session.setAttribute(&quot;_CLIENT_REMOTE_USER_&quot;, request.getRemoteUser());
    }
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="F2BC24C31441E1D0CB8C4FB30C73DE68">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method httpEngine() in HttpEngine.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HttpEngine.java</FileName>
<FilePath>framework/service/src/org/ofbiz/service/engine/HttpEngine.java</FilePath>
<LineStart>187</LineStart>
<Snippet>            if (errorMessage.length() &gt; 0) {
                response.setContentLength(errorMessage.length());
                out.write(errorMessage.toString());
            } else {
                response.setContentLength(resultString.length());</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceMultiEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceMultiEventHandler.java</FilePath>
<LineStart>308</LineStart>
<Snippet>                Map&lt;String, Object&gt; result = null;
                try {
                    result = dispatcher.runSync(serviceName, serviceContext);
                } catch (ServiceAuthException e) {
                    // not logging since the service engine already did</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="AB29999EB353C5C4E090E89B13CFF8B0">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 130, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>130</LineStart>
<Snippet>        }
        checkAfterNewline();
        super.write(s, offset, i - offset);
    }
}</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>312</LineStart>
<Snippet>            contentCtx.put(&quot;fromDate&quot;, UtilDateTime.nowTimestamp());
            contentCtx.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; contentResult = dispatcher.runSync(&quot;createContent&quot;, contentCtx);
            contentId = contentResult.get(&quot;contentId&quot;).toString();
        } catch (Exception e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="EE87EDA5B5528837A2E5C646A5B22BB2">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>267</LineStart>
<Snippet>        }
        if (!&quot;image/png&quot;.equals(mimType)) {
            session.setAttribute(&quot;frameContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
            session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;The selected image type is incorrect, please select the image type *.PNG to upload.&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="12AF265A-8085-459E-A9C9-E0922DFFE1F5" iid="88B9A333891C7FDB43F8FCA39361625C">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>CheckOutEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/CheckOutEvents.java</FilePath>
<LineStart>131</LineStart>
<Snippet>            if (UtilValidate.isNotEmpty(taxAuthPartyGeoIds)) {
                try {
                    Map&lt;String, ? extends Object&gt; createCustomerTaxAuthInfoResult = dispatcher.runSync(&quot;createCustomerTaxAuthInfo&quot;,
                            UtilMisc.&lt;String, Object&gt;toMap(&quot;partyId&quot;, cart.getPartyId(), &quot;taxAuthPartyGeoIds&quot;, taxAuthPartyGeoIds, &quot;partyTaxId&quot;, partyTaxId, &quot;isExempt&quot;, isExempt, &quot;userLogin&quot;, userLogin));
                    ServiceUtil.getMessages(request, createCustomerTaxAuthInfoResult, null);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="EFFD51C8953179A91617EA1A6E0FAD72">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 130, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>130</LineStart>
<Snippet>        }
        checkAfterNewline();
        super.write(s, offset, i - offset);
    }
}</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>688</LineStart>
<Snippet>        
        // TODO: the code below here needs some cleanups
        String billToCustomerPartyId = request.getParameter(&quot;billToCustomerPartyId_o_0&quot;);
        if (UtilValidate.isEmpty(billToCustomerPartyId) &amp;&amp; UtilValidate.isEmpty(supplierPartyId)) {
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, UtilProperties.getMessage(resource_error, &quot;OrderCouldNotInitPurchaseOrder&quot;, locale));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="68D198F5A5EBABF8FF74B6BCDBDAE9D1">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>403</LineStart>
<Snippet>            if (UtilValidate.isNotEmpty(request.getParameter(&quot;frameExistContentId&quot;)) &amp;&amp; UtilValidate.isNotEmpty(request.getParameter(&quot;frameExistDataResourceId&quot;))) {
                session.setAttribute(&quot;frameExistContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
                session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            }
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;Required frame image content ID&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="1BCF6525B527D8EE5B838782F9C8CCA0">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method invoke() in XmlRpcEventHandler.java sends unvalidated data to a web browser on line 128, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>XmlRpcEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/XmlRpcEventHandler.java</FilePath>
<LineStart>128</LineStart>
<Snippet>                out.write(&quot;&lt;params&gt;&lt;param&gt;&quot;);
                out.write(&quot;&lt;value&gt;&lt;string&gt;&lt;![CDATA[&quot;);
                out.write(buf.toString());
                out.write(&quot;]]&gt;&lt;/string&gt;&lt;/value&gt;&quot;);
                out.write(&quot;&lt;/param&gt;&lt;/params&gt;&quot;);</Snippet>
                            </Primary>
                            <Source>
<FileName>XmlRpcEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/XmlRpcEventHandler.java</FilePath>
<LineStart>103</LineStart>
<Snippet>                // read the inputstream buffer
                String line;
                reader = new BufferedReader(new InputStreamReader(request.getInputStream()));
                while ((line = reader.readLine()) != null) {
                    buf.append(line).append(&quot;\n&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="D2E221D3E93781C57BFC488F74B6C2A5">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method toJsonObjectList() in ImageManagementServices.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ImageManagementServices.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/ImageManagementServices.java</FilePath>
<LineStart>779</LineStart>
<Snippet>            try {
                out = response.getWriter();
                out.write(jsonStr);
                out.flush();
            } catch (IOException e) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>505</LineStart>
<Snippet>        Map&lt;String, Object&gt; ftlResults = null;
        try {
            ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
        } catch (ServiceAuthException e) {
            String msg = e.getMessage();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="C20D2B1023B1DA1D968CFB30F1CA6030">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1388</LineStart>
<Snippet>        ShoppingCart cart = null;
        try {
            Map&lt;String, Object&gt; outMap = dispatcher.runSync(&quot;loadCartFromOrder&quot;,
                                                UtilMisc.&lt;String, Object&gt;toMap(&quot;orderId&quot;, orderId,
                                                        &quot;skipProductChecks&quot;, Boolean.TRUE, // the products have already been checked in the order, no need to check their validity again</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1C85B63C-0870-45B8-9909-86BA43F68B05" iid="617040F064D74B188B7CB86E6CA22ABA">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method closeEditWrap() in RenderContentAsText.java sends unvalidated data to a web browser on line 244, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>RenderContentAsText.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderContentAsText.java</FilePath>
<LineStart>244</LineStart>
<Snippet>                ServletContext servletContext = request.getSession().getServletContext();
                RequestHandler rh = (RequestHandler) servletContext.getAttribute(&quot;_REQUEST_HANDLER_&quot;);
                out.append(rh.makeLink(request, response, &quot;/&quot; + fullRequest, false, false, true));
                out.write(&quot;\&quot;&gt;Edit&lt;/a&gt;&quot;);
                out.write(&quot;&lt;/div&gt;&quot;);</Snippet>
                            </Primary>
                            <Source>
<FileName>LoginWorker.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/LoginWorker.java</FilePath>
<LineStart>397</LineStart>
<Snippet>            // get the visit id to pass to the userLogin for history
            String visitId = VisitHandler.getVisitId(session);
            result = dispatcher.runSync(&quot;userLogin&quot;, UtilMisc.toMap(&quot;login.username&quot;, username, &quot;login.password&quot;, password, &quot;visitId&quot;, visitId, &quot;locale&quot;, UtilHttp.getLocale(request)));
        } catch (GenericServiceException e) {
            Debug.logError(e, &quot;Error calling userLogin service&quot;, module);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="8186596519F85A65809D995B13CF8951">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>DataEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/data/DataEvents.java</FilePath>
<LineStart>136</LineStart>
<Snippet>            Map&lt;String, Object&gt; permSvcResp;
            try {
                permSvcResp = dispatcher.runSync(permissionService, permSvcCtx);
            } catch (GenericServiceException e) {
                Debug.logError(e, module);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="3FC0CE0A4F08CD50EC8CD88CF297B544">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>505</LineStart>
<Snippet>        Map&lt;String, Object&gt; ftlResults = null;
        try {
            ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
        } catch (ServiceAuthException e) {
            String msg = e.getMessage();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="7F2C23DFC3DF1CC07D3F0AA575835AE3">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>LoginWorker.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/LoginWorker.java</FilePath>
<LineStart>264</LineStart>
<Snippet>
                // keep the previous request name in the session
                session.setAttribute(&quot;_PREVIOUS_REQUEST_&quot;, request.getPathInfo());

                // NOTE: not using the old _PREVIOUS_PARAMS_ attribute at all because it was a security hole as it was used to put data in the URL (never encrypted) that was originally in a form field that may have been encrypted</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="CA79E9932444105A277317551DFE34B5">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1354</LineStart>
<Snippet>        ShoppingCart cart = null;
        try {
            Map&lt;String, Object&gt; outMap = dispatcher.runSync(&quot;loadCartFromQuote&quot;,
                    UtilMisc.&lt;String, Object&gt;toMap(&quot;quoteId&quot;, quoteId,
                            &quot;applyQuoteAdjustments&quot;, &quot;true&quot;,</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="A09B36122E292A761B29E0EC7BF59927">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 115, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>115</LineStart>
<Snippet>    @Override
    public void write(String s) throws IOException {
        write(s, 0, s.length());
    }
</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>558</LineStart>
<Snippet>        session.setAttribute(&quot;_CLIENT_LOCALE_&quot;, request.getLocale());
        session.setAttribute(&quot;_CLIENT_REQUEST_&quot;, fullRequestUrl.toString());
        session.setAttribute(&quot;_CLIENT_USER_AGENT_&quot;, request.getHeader(&quot;User-Agent&quot;) != null ? request.getHeader(&quot;User-Agent&quot;) : &quot;&quot;);
        session.setAttribute(&quot;_CLIENT_REFERER_&quot;, request.getHeader(&quot;Referer&quot;) != null ? request.getHeader(&quot;Referer&quot;) : &quot;&quot;);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="12AF265A-8085-459E-A9C9-E0922DFFE1F5" iid="432F98E06B1FB61A2D8CC1ECD89E4AFD">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>TaskEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/task/TaskEvents.java</FilePath>
<LineStart>75</LineStart>
<Snippet>            Map&lt;String, ? extends Object&gt; context = UtilMisc.toMap(&quot;workEffortId&quot;, workEffortId, &quot;partyId&quot;, partyId, &quot;roleTypeId&quot;, roleTypeId,
                    &quot;fromDate&quot;, fromDate, &quot;result&quot;, parameterMap, &quot;userLogin&quot;, userLogin);
            result = dispatcher.runSync(&quot;wfCompleteAssignment&quot;, context);
            if (result.containsKey(ModelService.RESPOND_ERROR)) {
                request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, result.get(ModelService.ERROR_MESSAGE));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="492CDC254FBA94CC69437D6992D0C8D1">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>688</LineStart>
<Snippet>        
        // TODO: the code below here needs some cleanups
        String billToCustomerPartyId = request.getParameter(&quot;billToCustomerPartyId_o_0&quot;);
        if (UtilValidate.isEmpty(billToCustomerPartyId) &amp;&amp; UtilValidate.isEmpty(supplierPartyId)) {
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, UtilProperties.getMessage(resource_error, &quot;OrderCouldNotInitPurchaseOrder&quot;, locale));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="93FC46C1E4195A95578004F7E6BFC789">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method close() in OfbizUrlTransform.java sends unvalidated data to a web browser on line 205, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>OfbizUrlTransform.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/ftl/OfbizUrlTransform.java</FilePath>
<LineStart>205</LineStart>
<Snippet>                        String requestUrl = buf.toString();
                        newURL.append(requestUrl);
                        out.write(newURL.toString());
                    } else if (req != null) {
                        HttpServletRequest request = (HttpServletRequest) req.getWrappedObject();</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>312</LineStart>
<Snippet>            contentCtx.put(&quot;fromDate&quot;, UtilDateTime.nowTimestamp());
            contentCtx.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; contentResult = dispatcher.runSync(&quot;createContent&quot;, contentCtx);
            contentId = contentResult.get(&quot;contentId&quot;).toString();
        } catch (Exception e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="FD4BCCF0EA9C9E5A9A976D38CD0DC392">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>ShipmentEvents.java</FileName>
<FilePath>applications/product/src/org/ofbiz/shipment/shipment/ShipmentEvents.java</FilePath>
<LineStart>48</LineStart>
<Snippet>        Delegator delegator = (Delegator) request.getAttribute(&quot;delegator&quot;);

        String shipmentId = request.getParameter(&quot;shipmentId&quot;);
        String shipmentRouteSegmentId = request.getParameter(&quot;shipmentRouteSegmentId&quot;);
        String shipmentPackageSeqId = request.getParameter(&quot;shipmentPackageSeqId&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="641DDD38E0985975AD6E9233EBCE1F92">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ProductionRunEvents.java</FileName>
<FilePath>applications/manufacturing/src/org/ofbiz/manufacturing/jobshopmgt/ProductionRunEvents.java</FilePath>
<LineStart>94</LineStart>
<Snippet>            inputMap.put(&quot;lotId&quot;, parameters.get(&quot;lotId&quot;));
            inputMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;productionRunDeclareAndProduce&quot;, inputMap);
            if (ServiceUtil.isError(result)) {
                request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, ServiceUtil.getErrorMessage(result));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="88ADE85B0D885AADBCC3760A9A00C494">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>945</LineStart>
<Snippet>            newCart = cartList.remove(cartIndex);
        } else {
            String productStoreId = request.getParameter(&quot;productStoreId&quot;);
            if (UtilValidate.isNotEmpty(productStoreId)) {
                session.setAttribute(&quot;productStoreId&quot;, productStoreId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="7AF52A79EF004301970E7165EDFAEBC4">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 130, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>130</LineStart>
<Snippet>        }
        checkAfterNewline();
        super.write(s, offset, i - offset);
    }
}</Snippet>
                            </Primary>
                            <Source>
<FileName>ICalWorker.java</FileName>
<FilePath>applications/workeffort/src/org/ofbiz/workeffort/workeffort/ICalWorker.java</FilePath>
<LineStart>285</LineStart>
<Snippet>        HttpSession session = request.getSession();
        LocalDispatcher dispatcher = (LocalDispatcher) request.getAttribute(&quot;dispatcher&quot;);
        Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;userLogin&quot;, serviceMap);
        if (ServiceUtil.isError(result) || ServiceUtil.isFailure(result)) {
            return;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="843AF2B2578E88F66B149B44D01C30D4">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>RequestHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/RequestHandler.java</FilePath>
<LineStart>128</LineStart>
<Snippet>        }

        String overrideViewUri = RequestHandler.getOverrideViewUri(request.getPathInfo());

        String requestMissingErrorMessage = &quot;Unknown request [&quot; + defaultRequestUri + &quot;]; this request does not exist or cannot be called directly.&quot;;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5B9CE105-7C9E-402F-A6B5-3BB9EACDEE95" iid="F3A3FC3DEC398F6738B98AB972B67F51">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method streamContent() in UtilHttp.java sends unvalidated data to a web browser on line 1033, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>1033</LineStart>
<Snippet>        try {
            while ((read = bis.read(buffer, 0, buffer.length)) != -1) {
                bos.write(buffer, 0, read);
            }
        } catch (IOException e) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>104</LineStart>
<Snippet>        persistMap.put(&quot;userLogin&quot;, userLogin);
        try {
            Map&lt;String, Object&gt; persistResult = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, persistMap);
            contentId = (String)persistResult.get(&quot;contentId&quot;);
            //request.setAttribute(&quot;contentId&quot;, contentId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="219FCF6F-A77C-4219-8506-F5A0A0D6BE4A" iid="F2628B998D49ACCA478E2E2612EA5DFA">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method closeEditWrap() in RenderContentAsText.java sends unvalidated data to a web browser on line 244, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>RenderContentAsText.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderContentAsText.java</FilePath>
<LineStart>244</LineStart>
<Snippet>                ServletContext servletContext = request.getSession().getServletContext();
                RequestHandler rh = (RequestHandler) servletContext.getAttribute(&quot;_REQUEST_HANDLER_&quot;);
                out.append(rh.makeLink(request, response, &quot;/&quot; + fullRequest, false, false, true));
                out.write(&quot;\&quot;&gt;Edit&lt;/a&gt;&quot;);
                out.write(&quot;&lt;/div&gt;&quot;);</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>127</LineStart>
<Snippet>
            Object value = null;
            String[] paramArr = request.getParameterValues(name);
            if (paramArr != null) {
                if (paramArr.length &gt; 1) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="2ADEAA688032E7A9167289E0D5FF4585">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method close() in OfbizUrlTransform.java sends unvalidated data to a web browser on line 205, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>OfbizUrlTransform.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/ftl/OfbizUrlTransform.java</FilePath>
<LineStart>205</LineStart>
<Snippet>                        String requestUrl = buf.toString();
                        newURL.append(requestUrl);
                        out.write(newURL.toString());
                    } else if (req != null) {
                        HttpServletRequest request = (HttpServletRequest) req.getWrappedObject();</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>575</LineStart>
<Snippet>        while (e.hasMoreElements()) {
            String name = e.nextElement();
            request.setAttribute(name, request.getParameter(name));
        }
    }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="CD024BA71F92C486759D048E15C3A6D1">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1469</LineStart>
<Snippet>        String quoteId = null;
        try {
            result = dispatcher.runSync(&quot;createQuoteFromCart&quot;,
                    UtilMisc.toMap(&quot;cart&quot;, cart,
                            &quot;userLogin&quot;, userLogin));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="5AC0FA2F2D030FD8D688E10058A5DC14">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method close() in OfbizUrlTransform.java sends unvalidated data to a web browser on line 205, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>OfbizUrlTransform.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/ftl/OfbizUrlTransform.java</FilePath>
<LineStart>205</LineStart>
<Snippet>                        String requestUrl = buf.toString();
                        newURL.append(requestUrl);
                        out.write(newURL.toString());
                    } else if (req != null) {
                        HttpServletRequest request = (HttpServletRequest) req.getWrappedObject();</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>184</LineStart>
<Snippet>
    public static Map&lt;String, Object&gt; getPathInfoOnlyParameterMap(HttpServletRequest request, Set&lt;? extends String&gt; nameSet, Boolean onlyIncludeOrSkip) {
        return getPathInfoOnlyParameterMap(request.getPathInfo(), nameSet, onlyIncludeOrSkip);
    }
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="D08615EA5BEA02B78D31053CD7A71751">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 130, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>130</LineStart>
<Snippet>        }
        checkAfterNewline();
        super.write(s, offset, i - offset);
    }
}</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>119</LineStart>
<Snippet>            contentRevisionMap.put(&quot;contentId&quot;, contentId);
            contentRevisionMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentRevisionAndItem&quot;, contentRevisionMap);
            keySet = result.keySet();
            iter = keySet.iterator();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="6B57E9A41236AA8101C7AF828124C54A">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>TaskEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/task/TaskEvents.java</FilePath>
<LineStart>75</LineStart>
<Snippet>            Map&lt;String, ? extends Object&gt; context = UtilMisc.toMap(&quot;workEffortId&quot;, workEffortId, &quot;partyId&quot;, partyId, &quot;roleTypeId&quot;, roleTypeId,
                    &quot;fromDate&quot;, fromDate, &quot;result&quot;, parameterMap, &quot;userLogin&quot;, userLogin);
            result = dispatcher.runSync(&quot;wfCompleteAssignment&quot;, context);
            if (result.containsKey(ModelService.RESPOND_ERROR)) {
                request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, result.get(ModelService.ERROR_MESSAGE));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="134787C1EFD1E11FBD601790FC12D20B">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 124, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>124</LineStart>
<Snippet>            if (s.charAt(i) == '\n') {
                checkAfterNewline();
                super.write(s, offset, i - offset + 1);
                offset = i + 1;
                lastWasNewline = true;</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>348</LineStart>
<Snippet>        }
        String frameContentId = request.getParameter(&quot;frameContentId&quot;);
        String frameDataResourceId = request.getParameter(&quot;frameDataResourceId&quot;);
        
        if (UtilValidate.isEmpty(request.getParameter(&quot;imageWidth&quot;)) || UtilValidate.isEmpty(request.getParameter(&quot;imageHeight&quot;))) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="BE2E20ABA0D33C4BD920CF7BAC50AB18">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 124, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>124</LineStart>
<Snippet>            if (s.charAt(i) == '\n') {
                checkAfterNewline();
                super.write(s, offset, i - offset + 1);
                offset = i + 1;
                lastWasNewline = true;</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1327</LineStart>
<Snippet>        ShoppingCart cart = null;
        try {
            Map&lt;String, Object&gt; outMap = dispatcher.runSync(&quot;loadCartFromShoppingList&quot;,
                    UtilMisc.&lt;String, Object&gt;toMap(&quot;shoppingListId&quot;, shoppingListId,
                    &quot;userLogin&quot;, userLogin));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="A02A799AB08AABD62A18FE66501F324F">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>TrackingCodeEvents.java</FileName>
<FilePath>applications/marketing/src/org/ofbiz/marketing/tracking/TrackingCodeEvents.java</FilePath>
<LineStart>371</LineStart>
<Snippet>        java.sql.Timestamp nowStamp = UtilDateTime.nowTimestamp();

        String trackingCodeId = request.getParameter(&quot;autoTrackingCode&quot;);
        if (UtilValidate.isEmpty(trackingCodeId)) trackingCodeId = request.getParameter(&quot;atc&quot;);
        if (UtilValidate.isEmpty(trackingCodeId)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="89FA11828653B24E20A1EE96B60D0D97">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 130, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>130</LineStart>
<Snippet>        }
        checkAfterNewline();
        super.write(s, offset, i - offset);
    }
}</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>402</LineStart>
<Snippet>        if(UtilValidate.isEmpty(request.getParameter(&quot;frameContentId&quot;))) {
            if (UtilValidate.isNotEmpty(request.getParameter(&quot;frameExistContentId&quot;)) &amp;&amp; UtilValidate.isNotEmpty(request.getParameter(&quot;frameExistDataResourceId&quot;))) {
                session.setAttribute(&quot;frameExistContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
                session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="875E043865B4B0A448EEF0BA9D62DAB8">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>SearchEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/search/SearchEvents.java</FilePath>
<LineStart>60</LineStart>
<Snippet>        serviceInMap.put(&quot;contentId&quot;, siteId);
        try {
            result = dispatcher.runSync(&quot;indexTree&quot;, serviceInMap);
        } catch (GenericServiceException e) {
            String errorMsg = &quot;Error calling the indexTree service.&quot; + e.toString();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="A05D737BDDD36E1FCDBF39ADA1A584FE">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>ShipmentEvents.java</FileName>
<FilePath>applications/product/src/org/ofbiz/shipment/shipment/ShipmentEvents.java</FilePath>
<LineStart>48</LineStart>
<Snippet>        Delegator delegator = (Delegator) request.getAttribute(&quot;delegator&quot;);

        String shipmentId = request.getParameter(&quot;shipmentId&quot;);
        String shipmentRouteSegmentId = request.getParameter(&quot;shipmentRouteSegmentId&quot;);
        String shipmentPackageSeqId = request.getParameter(&quot;shipmentPackageSeqId&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="6942A0B3CBE00A64C61465594F6D90B5">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 115, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>115</LineStart>
<Snippet>    @Override
    public void write(String s) throws IOException {
        write(s, 0, s.length());
    }
</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>402</LineStart>
<Snippet>        if(UtilValidate.isEmpty(request.getParameter(&quot;frameContentId&quot;))) {
            if (UtilValidate.isNotEmpty(request.getParameter(&quot;frameExistContentId&quot;)) &amp;&amp; UtilValidate.isNotEmpty(request.getParameter(&quot;frameExistDataResourceId&quot;))) {
                session.setAttribute(&quot;frameExistContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
                session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="B0DEC548E665846F615192A714357406">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 124, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>124</LineStart>
<Snippet>            if (s.charAt(i) == '\n') {
                checkAfterNewline();
                super.write(s, offset, i - offset + 1);
                offset = i + 1;
                lastWasNewline = true;</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>261</LineStart>
<Snippet>        ByteBuffer imageData = (ByteBuffer) tempFile.get(&quot;imageData&quot;);
        if (UtilValidate.isEmpty(imageName) || UtilValidate.isEmpty(imageData)) {
            session.setAttribute(&quot;frameContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
            session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;There is no frame image, please select the image type *.PNG  uploading.&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="065DC92E4C57BC56D5A3909F41B95FEC">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 124, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>124</LineStart>
<Snippet>            if (s.charAt(i) == '\n') {
                checkAfterNewline();
                super.write(s, offset, i - offset + 1);
                offset = i + 1;
                lastWasNewline = true;</Snippet>
                            </Primary>
                            <Source>
<FileName>LoginWorker.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/LoginWorker.java</FilePath>
<LineStart>397</LineStart>
<Snippet>            // get the visit id to pass to the userLogin for history
            String visitId = VisitHandler.getVisitId(session);
            result = dispatcher.runSync(&quot;userLogin&quot;, UtilMisc.toMap(&quot;login.username&quot;, username, &quot;login.password&quot;, password, &quot;visitId&quot;, visitId, &quot;locale&quot;, UtilHttp.getLocale(request)));
        } catch (GenericServiceException e) {
            Debug.logError(e, &quot;Error calling userLogin service&quot;, module);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="2BF92741C6CE63BC34CF0580ABF3A4B3">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>561</LineStart>
<Snippet>        session.setAttribute(&quot;_CLIENT_REFERER_&quot;, request.getHeader(&quot;Referer&quot;) != null ? request.getHeader(&quot;Referer&quot;) : &quot;&quot;);

        session.setAttribute(&quot;_CLIENT_FORWARDED_FOR_&quot;, request.getHeader(&quot;X-Forwarded-For&quot;));
        session.setAttribute(&quot;_CLIENT_REMOTE_ADDR_&quot;, request.getRemoteAddr());
        session.setAttribute(&quot;_CLIENT_REMOTE_HOST_&quot;, request.getRemoteHost());</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="60C701A2AE1725D337F2936B5D1F3122">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 130, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>130</LineStart>
<Snippet>        }
        checkAfterNewline();
        super.write(s, offset, i - offset);
    }
}</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>403</LineStart>
<Snippet>            if (UtilValidate.isNotEmpty(request.getParameter(&quot;frameExistContentId&quot;)) &amp;&amp; UtilValidate.isNotEmpty(request.getParameter(&quot;frameExistDataResourceId&quot;))) {
                session.setAttribute(&quot;frameExistContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
                session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            }
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;Required frame image content ID&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="B2C6DD8AF611E9D894C8371F21EC5A47">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>TrackingCodeEvents.java</FileName>
<FilePath>applications/marketing/src/org/ofbiz/marketing/tracking/TrackingCodeEvents.java</FilePath>
<LineStart>372</LineStart>
<Snippet>
        String trackingCodeId = request.getParameter(&quot;autoTrackingCode&quot;);
        if (UtilValidate.isEmpty(trackingCodeId)) trackingCodeId = request.getParameter(&quot;atc&quot;);
        if (UtilValidate.isEmpty(trackingCodeId)) {
            Cookie[] cookies = request.getCookies();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="DB6CFC1902599536AF609CB790990E21">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 130, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>130</LineStart>
<Snippet>        }
        checkAfterNewline();
        super.write(s, offset, i - offset);
    }
}</Snippet>
                            </Primary>
                            <Source>
<FileName>AbstractOFBizAuthenticationHandler.java</FileName>
<FilePath>specialpurpose/ldap/src/org/ofbiz/ldap/commons/AbstractOFBizAuthenticationHandler.java</FilePath>
<LineStart>129</LineStart>
<Snippet>
        try {
            loginResult = dispatcher.runSync(&quot;userLogin&quot;, UtilMisc.toMap(&quot;login.username&quot;, username, &quot;login.password&quot;, password, &quot;visitId&quot;, visitId, &quot;locale&quot;, UtilHttp.getLocale(request)));
        } catch (GenericServiceException e) {
            throw new GenericServiceException(e.getLocalizedMessage());</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="D027DAA9-A3BE-49E4-BDBF-3DFF657F84CA" iid="1FC33595B25269DA38EEDAA5AA19EFED">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>348</LineStart>
<Snippet>        }
        String frameContentId = request.getParameter(&quot;frameContentId&quot;);
        String frameDataResourceId = request.getParameter(&quot;frameDataResourceId&quot;);
        
        if (UtilValidate.isEmpty(request.getParameter(&quot;imageWidth&quot;)) || UtilValidate.isEmpty(request.getParameter(&quot;imageHeight&quot;))) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="FC7F3C33BF6D6417BEBD51584AF8D563">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>559</LineStart>
<Snippet>        session.setAttribute(&quot;_CLIENT_REQUEST_&quot;, fullRequestUrl.toString());
        session.setAttribute(&quot;_CLIENT_USER_AGENT_&quot;, request.getHeader(&quot;User-Agent&quot;) != null ? request.getHeader(&quot;User-Agent&quot;) : &quot;&quot;);
        session.setAttribute(&quot;_CLIENT_REFERER_&quot;, request.getHeader(&quot;Referer&quot;) != null ? request.getHeader(&quot;Referer&quot;) : &quot;&quot;);

        session.setAttribute(&quot;_CLIENT_FORWARDED_FOR_&quot;, request.getHeader(&quot;X-Forwarded-For&quot;));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="A833B1526744C360004320A18A66A158">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>575</LineStart>
<Snippet>        while (e.hasMoreElements()) {
            String name = e.nextElement();
            request.setAttribute(name, request.getParameter(name));
        }
    }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="322BA952C629A179772E1FC716294F67">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>ShipmentEvents.java</FileName>
<FilePath>applications/product/src/org/ofbiz/shipment/shipment/ShipmentEvents.java</FilePath>
<LineStart>49</LineStart>
<Snippet>
        String shipmentId = request.getParameter(&quot;shipmentId&quot;);
        String shipmentRouteSegmentId = request.getParameter(&quot;shipmentRouteSegmentId&quot;);
        String shipmentPackageSeqId = request.getParameter(&quot;shipmentPackageSeqId&quot;);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="E8A6D25B7B4ADBC924160BE157D2CF44">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>GoogleBaseSearchEvents.java</FileName>
<FilePath>specialpurpose/googlebase/src/org/ofbiz/googlebase/GoogleBaseSearchEvents.java</FilePath>
<LineStart>122</LineStart>
<Snippet>                    inMap.put(&quot;productStoreId&quot;, productStoreId);
                    inMap.put(&quot;allowRecommended&quot;, allowRecommended);
                    Map&lt;String, Object&gt; exportResult = dispatcher.runSync(&quot;exportToGoogle&quot;, inMap);
                    if (ServiceUtil.isError(exportResult)) {
                        List&lt;String&gt; errorMessages = UtilGenerics.checkList(exportResult.get(ModelService.ERROR_MESSAGE_LIST), String.class);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="76F7C5DF-850D-4AC8-A3FE-8AE7AABFB50E" iid="73155096098574720856188509C4C2C6">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method streamContent() in UtilHttp.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>1033</LineStart>
<Snippet>        try {
            while ((read = bis.read(buffer, 0, buffer.length)) != -1) {
                bos.write(buffer, 0, read);
            }
        } catch (IOException e) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>104</LineStart>
<Snippet>        persistMap.put(&quot;userLogin&quot;, userLogin);
        try {
            Map&lt;String, Object&gt; persistResult = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, persistMap);
            contentId = (String)persistResult.get(&quot;contentId&quot;);
            //request.setAttribute(&quot;contentId&quot;, contentId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="1816331E8BB096E7AA5A2FDE2841F408">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method httpEngine() in HttpEngine.java sends unvalidated data to a web browser on line 187, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>HttpEngine.java</FileName>
<FilePath>framework/service/src/org/ofbiz/service/engine/HttpEngine.java</FilePath>
<LineStart>187</LineStart>
<Snippet>            if (errorMessage.length() &gt; 0) {
                response.setContentLength(errorMessage.length());
                out.write(errorMessage.toString());
            } else {
                response.setContentLength(resultString.length());</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>119</LineStart>
<Snippet>            contentRevisionMap.put(&quot;contentId&quot;, contentId);
            contentRevisionMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentRevisionAndItem&quot;, contentRevisionMap);
            keySet = result.keySet();
            iter = keySet.iterator();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="4E5D54BE8C091B466AA978E1487B4DF4">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method render() in Section.java sends unvalidated data to a web browser on line 98, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Section.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/region/Section.java</FilePath>
<LineStart>98</LineStart>
<Snippet>            if (&quot;direct&quot;.equals(type)) {
                if (UtilJ2eeCompat.useOutputStreamNotWriter(context)) {
                    response.getOutputStream().print(content);
                } else {
                    response.getWriter().print(content);</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>505</LineStart>
<Snippet>        Map&lt;String, Object&gt; ftlResults = null;
        try {
            ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
        } catch (ServiceAuthException e) {
            String msg = e.getMessage();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="A0D986A8EE9F04CB1CFDAA5112CB70FD">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>LayoutEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/layout/LayoutEvents.java</FilePath>
<LineStart>552</LineStart>
<Snippet>            context.put(&quot;textData&quot;, paramMap.get(&quot;textData&quot;));
            context.put(&quot;contentAssocTypeId&quot;, null);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, context);
            boolean isError = ModelService.RESPOND_ERROR.equals(result.get(ModelService.RESPONSE_MESSAGE));
            if (isError) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="CABE95FEB804853429AFD835E8D6EDF4">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>104</LineStart>
<Snippet>        persistMap.put(&quot;userLogin&quot;, userLogin);
        try {
            Map&lt;String, Object&gt; persistResult = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, persistMap);
            contentId = (String)persistResult.get(&quot;contentId&quot;);
            //request.setAttribute(&quot;contentId&quot;, contentId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="8C4E05BEC9479E592D038FB93A81B36A">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method toJsonObjectList() in ImageManagementServices.java sends unvalidated data to a web browser on line 779, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ImageManagementServices.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/ImageManagementServices.java</FilePath>
<LineStart>779</LineStart>
<Snippet>            try {
                out = response.getWriter();
                out.write(jsonStr);
                out.flush();
            } catch (IOException e) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceEventHandler.java</FilePath>
<LineStart>337</LineStart>
<Snippet>                dispatcher.runAsync(serviceName, serviceContext);
            } else {
                result = dispatcher.runSync(serviceName, serviceContext);
            }
        } catch (ServiceAuthException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="DDA35839CA989A0CFE7FC5DA076D5515">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>OrderManagerEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/OrderManagerEvents.java</FilePath>
<LineStart>222</LineStart>
<Snippet>                    Map&lt;String, Object&gt; results = null;
                    try {
                        results = dispatcher.runSync(&quot;createPaymentFromPreference&quot;, UtilMisc.toMap(&quot;userLogin&quot;, userLogin,
                                &quot;orderPaymentPreferenceId&quot;, paymentPreference.get(&quot;orderPaymentPreferenceId&quot;), &quot;paymentRefNum&quot;, paymentReference,
                                &quot;paymentFromId&quot;, placingCustomer.getString(&quot;partyId&quot;), &quot;comments&quot;, &quot;Payment received offline and manually entered.&quot;));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="2592CAB7519B7E84D84976A1201E98DC">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 130, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>130</LineStart>
<Snippet>        }
        checkAfterNewline();
        super.write(s, offset, i - offset);
    }
}</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>267</LineStart>
<Snippet>        }
        if (!&quot;image/png&quot;.equals(mimType)) {
            session.setAttribute(&quot;frameContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
            session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;The selected image type is incorrect, please select the image type *.PNG to upload.&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="943F5C684B6B964E53184B9DD648E69C">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>OrderEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/order/OrderEvents.java</FilePath>
<LineStart>125</LineStart>
<Snippet>                        contextMap.put(&quot;userLogin&quot;, userLogin);
                        try {
                            resultMap = dispatcher.runSync(&quot;cancelOrderItem&quot;, contextMap);

                            if (ServiceUtil.isError(resultMap)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="A5224BA71A9E820EEE9DA2534BD03F3C">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>693</LineStart>
<Snippet>            return &quot;error&quot;;
        }
        String orderId = request.getParameter(&quot;orderId_o_0&quot;);
        // set the order id if supplied
        if (UtilValidate.isNotEmpty(orderId)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="A8BA3277CA586BA927A2F1087C8C90E9">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>575</LineStart>
<Snippet>        while (e.hasMoreElements()) {
            String name = e.nextElement();
            request.setAttribute(name, request.getParameter(name));
        }
    }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="6E5095AFB59AF0BC6A1F2B0D4CC54BD4">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 130, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>130</LineStart>
<Snippet>        }
        checkAfterNewline();
        super.write(s, offset, i - offset);
    }
}</Snippet>
                            </Primary>
                            <Source>
<FileName>WebPosEvents.java</FileName>
<FilePath>specialpurpose/webpos/src/org/ofbiz/webpos/WebPosEvents.java</FilePath>
<LineStart>58</LineStart>
<Snippet>        
        // get the posTerminalId
        String posTerminalId = (String) request.getParameter(&quot;posTerminalId&quot;);
        session.removeAttribute(&quot;shoppingCart&quot;);
        session.removeAttribute(&quot;webPosSession&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="ECD077890E1771998ACF963A0EDB1D6B">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method writeResponse() in ICalWorker.java sends unvalidated data to a web browser on line 337, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ICalWorker.java</FileName>
<FilePath>applications/workeffort/src/org/ofbiz/workeffort/workeffort/ICalWorker.java</FilePath>
<LineStart>337</LineStart>
<Snippet>            Writer writer = getWriter(response, context);
            try {
                writer.write(responseProps.statusMessage);
            } finally {
                writer.close();</Snippet>
                            </Primary>
                            <Source>
<FileName>ICalConverter.java</FileName>
<FilePath>applications/workeffort/src/org/ofbiz/workeffort/workeffort/ICalConverter.java</FilePath>
<LineStart>491</LineStart>
<Snippet>        localMap.put(&quot;locale&quot;, context.get(&quot;locale&quot;));
        try {
            return dispatcher.runSync(serviceName, localMap);
        } catch (GenericServiceException e) {
            String errMsg = &quot;Error while invoking service &quot; + serviceName + &quot;: &quot;;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="528DFDEE312638C40999E7E5F400B005">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 115, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>115</LineStart>
<Snippet>    @Override
    public void write(String s) throws IOException {
        write(s, 0, s.length());
    }
</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>127</LineStart>
<Snippet>
            Object value = null;
            String[] paramArr = request.getParameterValues(name);
            if (paramArr != null) {
                if (paramArr.length &gt; 1) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="12AF265A-8085-459E-A9C9-E0922DFFE1F5" iid="D136CF24D4CF167AD5DF295D785E200A">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>119</LineStart>
<Snippet>            contentRevisionMap.put(&quot;contentId&quot;, contentId);
            contentRevisionMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentRevisionAndItem&quot;, contentRevisionMap);
            keySet = result.keySet();
            iter = keySet.iterator();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="BDD2435E740019B16E1E5110FBDE9118">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>402</LineStart>
<Snippet>        if(UtilValidate.isEmpty(request.getParameter(&quot;frameContentId&quot;))) {
            if (UtilValidate.isNotEmpty(request.getParameter(&quot;frameExistContentId&quot;)) &amp;&amp; UtilValidate.isNotEmpty(request.getParameter(&quot;frameExistDataResourceId&quot;))) {
                session.setAttribute(&quot;frameExistContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
                session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="6BAC7677FF107F7FCF6723387D303436">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>347</LineStart>
<Snippet>            return &quot;error&quot;;
        }
        String frameContentId = request.getParameter(&quot;frameContentId&quot;);
        String frameDataResourceId = request.getParameter(&quot;frameDataResourceId&quot;);
        </Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="75CA7134-B6BE-444A-9815-E739432FCA47" iid="2E44690FFE337833D9121E727C81D95E">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method run() in InputValue.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>InputValue.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/pseudotag/InputValue.java</FilePath>
<LineStart>145</LineStart>
<Snippet>                inputValue + &quot;\&quot;&quot;);
        } else {
            pageContext.getOut().print(inputValue);
        }
    }</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>575</LineStart>
<Snippet>        while (e.hasMoreElements()) {
            String name = e.nextElement();
            request.setAttribute(name, request.getParameter(name));
        }
    }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="12AF265A-8085-459E-A9C9-E0922DFFE1F5" iid="743DE800110616E226AAC2A95F83DDB3">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>LayoutEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/layout/LayoutEvents.java</FilePath>
<LineStart>483</LineStart>
<Snippet>                Debug.logVerbose(&quot;in createSubContent, context:&quot; + context, module);
            }
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, context);
            boolean isError = ModelService.RESPOND_ERROR.equals(result.get(ModelService.RESPONSE_MESSAGE));
            if (isError) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="A0FB81C844FCDA43E354B9724F90FDCF">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1527</LineStart>
<Snippet>        Locale locale = UtilHttp.getLocale(request);

        String productStoreId = request.getParameter(&quot;productStoreId&quot;);

        if (UtilValidate.isNotEmpty(productStoreId)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="12AF265A-8085-459E-A9C9-E0922DFFE1F5" iid="2EB18F9E2BD6BB8866F90ED7184096F8">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceEventHandler.java</FilePath>
<LineStart>337</LineStart>
<Snippet>                dispatcher.runAsync(serviceName, serviceContext);
            } else {
                result = dispatcher.runSync(serviceName, serviceContext);
            }
        } catch (ServiceAuthException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="EBC027F3F02C58E528F792BF5D086362">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>PayPalEvents.java</FileName>
<FilePath>applications/accounting/src/org/ofbiz/accounting/thirdparty/paypal/PayPalEvents.java</FilePath>
<LineStart>497</LineStart>
<Snippet>        try {
            String comment = UtilProperties.getMessage(resource, &quot;AccountingPaymentReceiveViaPayPal&quot;, locale);
            results = dispatcher.runSync(&quot;createPaymentFromPreference&quot;, UtilMisc.toMap(&quot;userLogin&quot;, userLogin,
                    &quot;orderPaymentPreferenceId&quot;, paymentPreference.get(&quot;orderPaymentPreferenceId&quot;), &quot;comments&quot;, comment));
        } catch (GenericServiceException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="073A2ABB3198218CE09117EAEFE398E7">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method toJsonObjectList() in EbayStoreOptions.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>EbayStoreOptions.java</FileName>
<FilePath>specialpurpose/ebaystore/src/org/ofbiz/ebaystore/EbayStoreOptions.java</FilePath>
<LineStart>273</LineStart>
<Snippet>            try {
                out = response.getWriter();
                out.write(jsonStr);
                out.flush();
            } catch (IOException e) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>104</LineStart>
<Snippet>        persistMap.put(&quot;userLogin&quot;, userLogin);
        try {
            Map&lt;String, Object&gt; persistResult = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, persistMap);
            contentId = (String)persistResult.get(&quot;contentId&quot;);
            //request.setAttribute(&quot;contentId&quot;, contentId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="96E0397B2468696B529CB781942DA27C">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method close() in OfbizUrlTransform.java sends unvalidated data to a web browser on line 205, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>OfbizUrlTransform.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/ftl/OfbizUrlTransform.java</FilePath>
<LineStart>205</LineStart>
<Snippet>                        String requestUrl = buf.toString();
                        newURL.append(requestUrl);
                        out.write(newURL.toString());
                    } else if (req != null) {
                        HttpServletRequest request = (HttpServletRequest) req.getWrappedObject();</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>672</LineStart>
<Snippet>        HttpSession session = request.getSession();
        Locale locale = UtilHttp.getLocale(request);
        String supplierPartyId = request.getParameter(&quot;supplierPartyId_o_0&quot;);
        
        // check the preferred currency of the supplier, if set, use that for the cart, otherwise use system defaults.</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="BA6A27D83B9B08959D3967FDE907EE46">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CheckOutHelper.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/CheckOutHelper.java</FilePath>
<LineStart>519</LineStart>
<Snippet>                Map&lt;String, Object&gt; gcResult = null;
                try {
                    gcResult = dispatcher.runSync(&quot;createGiftCard&quot;, gcCtx);
                } catch (GenericServiceException e) {
                    Debug.logError(e, module);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="5C60FCC3E0BB7288E230EC9B17CF2C45">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 130, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>130</LineStart>
<Snippet>        }
        checkAfterNewline();
        super.write(s, offset, i - offset);
    }
}</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>347</LineStart>
<Snippet>            return &quot;error&quot;;
        }
        String frameContentId = request.getParameter(&quot;frameContentId&quot;);
        String frameDataResourceId = request.getParameter(&quot;frameDataResourceId&quot;);
        </Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="2429A7C441586936C2053CB5BBE7EE1F">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CoreEvents.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/CoreEvents.java</FilePath>
<LineStart>412</LineStart>
<Snippet>        try {
            if (null!=request.getParameter(&quot;_RUN_SYNC_&quot;) &amp;&amp; request.getParameter(&quot;_RUN_SYNC_&quot;).equals(&quot;Y&quot;)) {
                syncServiceResult = dispatcher.runSync(serviceName, serviceContext);
            } else {
                dispatcher.schedule(jobName, poolName, serviceName, serviceContext, startTime, frequency, interval, count, endTime, maxRetry);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="85CC54E875417139F30AAD032C440EED">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method toJsonObjectList() in ImageManagementServices.java sends unvalidated data to a web browser on line 779, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ImageManagementServices.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/ImageManagementServices.java</FilePath>
<LineStart>779</LineStart>
<Snippet>            try {
                out = response.getWriter();
                out.write(jsonStr);
                out.flush();
            } catch (IOException e) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>104</LineStart>
<Snippet>        persistMap.put(&quot;userLogin&quot;, userLogin);
        try {
            Map&lt;String, Object&gt; persistResult = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, persistMap);
            contentId = (String)persistResult.get(&quot;contentId&quot;);
            //request.setAttribute(&quot;contentId&quot;, contentId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="219FCF6F-A77C-4219-8506-F5A0A0D6BE4A" iid="F5C99BFEF99324298F6DE9952ACA86E2">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method closeEditWrap() in RenderSubContentCacheTransform.java sends unvalidated data to a web browser on line 275, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>RenderSubContentCacheTransform.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderSubContentCacheTransform.java</FilePath>
<LineStart>275</LineStart>
<Snippet>                ServletContext servletContext = request.getSession().getServletContext();
                RequestHandler rh = (RequestHandler) servletContext.getAttribute(&quot;_REQUEST_HANDLER_&quot;);
                out.append(rh.makeLink(request, response, &quot;/&quot; + fullRequest, false, false, true));
                out.write(&quot;\&quot;&gt;Edit&lt;/a&gt;&quot;);
                out.write(&quot;&lt;/div&gt;&quot;);</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>127</LineStart>
<Snippet>
            Object value = null;
            String[] paramArr = request.getParameterValues(name);
            if (paramArr != null) {
                if (paramArr.length &gt; 1) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="505596AEA9FA353E66397F12D0D31A24">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method render() in Section.java sends unvalidated data to a web browser on line 100, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Section.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/region/Section.java</FilePath>
<LineStart>100</LineStart>
<Snippet>                    response.getOutputStream().print(content);
                } else {
                    response.getWriter().print(content);
                }
            } else if (&quot;default&quot;.equals(type) || &quot;region&quot;.equals(type) || &quot;resource&quot;.equals(type) || &quot;jpublish&quot;.equals(type)) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>104</LineStart>
<Snippet>        persistMap.put(&quot;userLogin&quot;, userLogin);
        try {
            Map&lt;String, Object&gt; persistResult = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, persistMap);
            contentId = (String)persistResult.get(&quot;contentId&quot;);
            //request.setAttribute(&quot;contentId&quot;, contentId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="D027DAA9-A3BE-49E4-BDBF-3DFF657F84CA" iid="FCA2CCE48B16DCD6B27F00C259054AF9">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>347</LineStart>
<Snippet>            return &quot;error&quot;;
        }
        String frameContentId = request.getParameter(&quot;frameContentId&quot;);
        String frameDataResourceId = request.getParameter(&quot;frameDataResourceId&quot;);
        </Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="D17A8E50B872963E6B754B2DE42FA30B">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1499</LineStart>
<Snippet>        String custRequestId = null;
        try {
            result = dispatcher.runSync(&quot;createCustRequestFromCart&quot;,
                    UtilMisc.toMap(&quot;cart&quot;, cart,
                            &quot;userLogin&quot;, userLogin));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="A87F13A8E24C0A97F342C74D3C0952A9">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>DataEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/data/DataEvents.java</FilePath>
<LineStart>136</LineStart>
<Snippet>            Map&lt;String, Object&gt; permSvcResp;
            try {
                permSvcResp = dispatcher.runSync(permissionService, permSvcCtx);
            } catch (GenericServiceException e) {
                Debug.logError(e, module);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF" iid="31685FF44BF5841376CA4B97D64DF8B7">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method run() in InputValue.java sends unvalidated data to a web browser on line 145, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>InputValue.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/pseudotag/InputValue.java</FilePath>
<LineStart>145</LineStart>
<Snippet>                inputValue + &quot;\&quot;&quot;);
        } else {
            pageContext.getOut().print(inputValue);
        }
    }</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>505</LineStart>
<Snippet>        Map&lt;String, Object&gt; ftlResults = null;
        try {
            ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
        } catch (ServiceAuthException e) {
            String msg = e.getMessage();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="31E3EE59A4D1399D80534FAC81BF9B85">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 115, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>115</LineStart>
<Snippet>    @Override
    public void write(String s) throws IOException {
        write(s, 0, s.length());
    }
</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>104</LineStart>
<Snippet>        persistMap.put(&quot;userLogin&quot;, userLogin);
        try {
            Map&lt;String, Object&gt; persistResult = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, persistMap);
            contentId = (String)persistResult.get(&quot;contentId&quot;);
            //request.setAttribute(&quot;contentId&quot;, contentId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="C254ED96AC2D3D85DC5454423FEEE5C9">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 115, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>115</LineStart>
<Snippet>    @Override
    public void write(String s) throws IOException {
        write(s, 0, s.length());
    }
</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>409</LineStart>
<Snippet>        }
        
        String frameContentId = request.getParameter(&quot;frameContentId&quot;);
        Delegator delegator = (Delegator) request.getAttribute(&quot;delegator&quot;);
        </Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="CD024BA71F92C486759D048E15C3A6D2">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1469</LineStart>
<Snippet>        String quoteId = null;
        try {
            result = dispatcher.runSync(&quot;createQuoteFromCart&quot;,
                    UtilMisc.toMap(&quot;cart&quot;, cart,
                            &quot;userLogin&quot;, userLogin));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="12AF265A-8085-459E-A9C9-E0922DFFE1F5" iid="04AB4F1B320BFBD9B0474E001CBA0F0E">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>CheckOutEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/CheckOutEvents.java</FilePath>
<LineStart>384</LineStart>
<Snippet>        if (UtilValidate.isNotEmpty(taxAuthPartyGeoIds)) {
            try {
                Map&lt;String, Object&gt; createCustomerTaxAuthInfoResult = dispatcher.runSync(&quot;createCustomerTaxAuthInfo&quot;,
                        UtilMisc.toMap(&quot;partyId&quot;, cart.getPartyId(), &quot;taxAuthPartyGeoIds&quot;, taxAuthPartyGeoIds, &quot;partyTaxId&quot;, partyTaxId, &quot;isExempt&quot;, isExempt));
                ServiceUtil.getMessages(request, createCustomerTaxAuthInfoResult, null);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="0ED57B9E21E37C29BA735B7D0FBD37EF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>119</LineStart>
<Snippet>            contentRevisionMap.put(&quot;contentId&quot;, contentId);
            contentRevisionMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentRevisionAndItem&quot;, contentRevisionMap);
            keySet = result.keySet();
            iter = keySet.iterator();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="9C99D3AC7666DD1D7AB816329F358CED">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>561</LineStart>
<Snippet>        session.setAttribute(&quot;_CLIENT_REFERER_&quot;, request.getHeader(&quot;Referer&quot;) != null ? request.getHeader(&quot;Referer&quot;) : &quot;&quot;);

        session.setAttribute(&quot;_CLIENT_FORWARDED_FOR_&quot;, request.getHeader(&quot;X-Forwarded-For&quot;));
        session.setAttribute(&quot;_CLIENT_REMOTE_ADDR_&quot;, request.getRemoteAddr());
        session.setAttribute(&quot;_CLIENT_REMOTE_HOST_&quot;, request.getRemoteHost());</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="4B7421F2C3B70BA97FCA15BE63E5A0C4">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>303</LineStart>
<Snippet>            dataResourceCtx.put(&quot;mimeTypeId&quot;, &quot;image/png&quot;);
            dataResourceCtx.put(&quot;isPublic&quot;, &quot;Y&quot;);
            Map&lt;String, Object&gt; dataResourceResult = dispatcher.runSync(&quot;createDataResource&quot;, dataResourceCtx);
            dataResourceId = dataResourceResult.get(&quot;dataResourceId&quot;).toString();
            //create content</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="8320ED5F78F93A60FB18A9AEE081ECEC">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>559</LineStart>
<Snippet>        session.setAttribute(&quot;_CLIENT_REQUEST_&quot;, fullRequestUrl.toString());
        session.setAttribute(&quot;_CLIENT_USER_AGENT_&quot;, request.getHeader(&quot;User-Agent&quot;) != null ? request.getHeader(&quot;User-Agent&quot;) : &quot;&quot;);
        session.setAttribute(&quot;_CLIENT_REFERER_&quot;, request.getHeader(&quot;Referer&quot;) != null ? request.getHeader(&quot;Referer&quot;) : &quot;&quot;);

        session.setAttribute(&quot;_CLIENT_FORWARDED_FOR_&quot;, request.getHeader(&quot;X-Forwarded-For&quot;));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="EE87EDA5B5528837A2E5C646A5B22BB3">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>261</LineStart>
<Snippet>        ByteBuffer imageData = (ByteBuffer) tempFile.get(&quot;imageData&quot;);
        if (UtilValidate.isEmpty(imageName) || UtilValidate.isEmpty(imageData)) {
            session.setAttribute(&quot;frameContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
            session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;There is no frame image, please select the image type *.PNG  uploading.&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="641DDD38E0985975AD6E9233EBCE1F93">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>ProductionRunEvents.java</FileName>
<FilePath>applications/manufacturing/src/org/ofbiz/manufacturing/jobshopmgt/ProductionRunEvents.java</FilePath>
<LineStart>94</LineStart>
<Snippet>            inputMap.put(&quot;lotId&quot;, parameters.get(&quot;lotId&quot;));
            inputMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;productionRunDeclareAndProduce&quot;, inputMap);
            if (ServiceUtil.isError(result)) {
                request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, ServiceUtil.getErrorMessage(result));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="5CD1B884F5962585CB5765D2CA206492">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 124, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>124</LineStart>
<Snippet>            if (s.charAt(i) == '\n') {
                checkAfterNewline();
                super.write(s, offset, i - offset + 1);
                offset = i + 1;
                lastWasNewline = true;</Snippet>
                            </Primary>
                            <Source>
<FileName>XmlRpcEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/XmlRpcEventHandler.java</FilePath>
<LineStart>103</LineStart>
<Snippet>                // read the inputstream buffer
                String line;
                reader = new BufferedReader(new InputStreamReader(request.getInputStream()));
                while ((line = reader.readLine()) != null) {
                    buf.append(line).append(&quot;\n&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="DAA0522D36278FE1288FB641375A9307">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>303</LineStart>
<Snippet>            dataResourceCtx.put(&quot;mimeTypeId&quot;, &quot;image/png&quot;);
            dataResourceCtx.put(&quot;isPublic&quot;, &quot;Y&quot;);
            Map&lt;String, Object&gt; dataResourceResult = dispatcher.runSync(&quot;createDataResource&quot;, dataResourceCtx);
            dataResourceId = dataResourceResult.get(&quot;dataResourceId&quot;).toString();
            //create content</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="3FC0CE0A4F08CD50EC8CD88CF297B545">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>505</LineStart>
<Snippet>        Map&lt;String, Object&gt; ftlResults = null;
        try {
            ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
        } catch (ServiceAuthException e) {
            String msg = e.getMessage();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="7A63954732BDFA8E4DF02FA6EB29C6EE">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>104</LineStart>
<Snippet>        persistMap.put(&quot;userLogin&quot;, userLogin);
        try {
            Map&lt;String, Object&gt; persistResult = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, persistMap);
            contentId = (String)persistResult.get(&quot;contentId&quot;);
            //request.setAttribute(&quot;contentId&quot;, contentId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="B22BFC02E82EC6A2D49CEE5B1FC13D21">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingListEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppinglist/ShoppingListEvents.java</FilePath>
<LineStart>349</LineStart>
<Snippet>        Map&lt;String, Object&gt; result = null;
        try {
            result = dispatcher.runSync(&quot;updateShoppingListItem&quot;, serviceInMap);
        } catch (GenericServiceException e) {
            String errMsg = UtilProperties.getMessage(resource_error,&quot;shoppingListEvents.error_calling_update&quot;, locale) + &quot;: &quot;  + e.toString();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="58E6B8F16F728F707B973092B98D3BB8">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>ProductEvents.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/product/ProductEvents.java</FilePath>
<LineStart>804</LineStart>
<Snippet>        //Timestamp nowTimestamp = UtilDateTime.nowTimestamp();
        //GenericValue userLogin = (GenericValue) request.getSession().getAttribute(&quot;userLogin&quot;);
        String productId = request.getParameter(&quot;productId&quot;);
        String productFeatureId = request.getParameter(&quot;productFeatureId&quot;);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="787E1A013D061B9B12F50406DC9D8B5E">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>ProductionRunEvents.java</FileName>
<FilePath>applications/manufacturing/src/org/ofbiz/manufacturing/jobshopmgt/ProductionRunEvents.java</FilePath>
<LineStart>94</LineStart>
<Snippet>            inputMap.put(&quot;lotId&quot;, parameters.get(&quot;lotId&quot;));
            inputMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;productionRunDeclareAndProduce&quot;, inputMap);
            if (ServiceUtil.isError(result)) {
                request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, ServiceUtil.getErrorMessage(result));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="44FF7DAA581C86681CB18157575E9656">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 115, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>115</LineStart>
<Snippet>    @Override
    public void write(String s) throws IOException {
        write(s, 0, s.length());
    }
</Snippet>
                            </Primary>
                            <Source>
<FileName>WebPosEvents.java</FileName>
<FilePath>specialpurpose/webpos/src/org/ofbiz/webpos/WebPosEvents.java</FilePath>
<LineStart>94</LineStart>
<Snippet>            GenericValue productStore = ProductStoreWorker.getProductStore(productStoreId, delegator);
            String facilityId = null;
            String currencyUomId = request.getParameter(&quot;currencyUomId&quot;);

            if (UtilValidate.isNotEmpty(productStore)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="DA84DC7372EB763C7672DBDDF4DA3DD4">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method render() in Section.java sends unvalidated data to a web browser on line 98, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Section.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/region/Section.java</FilePath>
<LineStart>98</LineStart>
<Snippet>            if (&quot;direct&quot;.equals(type)) {
                if (UtilJ2eeCompat.useOutputStreamNotWriter(context)) {
                    response.getOutputStream().print(content);
                } else {
                    response.getWriter().print(content);</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceEventHandler.java</FilePath>
<LineStart>337</LineStart>
<Snippet>                dispatcher.runAsync(serviceName, serviceContext);
            } else {
                result = dispatcher.runSync(serviceName, serviceContext);
            }
        } catch (ServiceAuthException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="58E6B8F16F728F707B973092B98D3BB7">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>ProductEvents.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/product/ProductEvents.java</FilePath>
<LineStart>804</LineStart>
<Snippet>        //Timestamp nowTimestamp = UtilDateTime.nowTimestamp();
        //GenericValue userLogin = (GenericValue) request.getSession().getAttribute(&quot;userLogin&quot;);
        String productId = request.getParameter(&quot;productId&quot;);
        String productFeatureId = request.getParameter(&quot;productFeatureId&quot;);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="ACC41FD6270E5182C427EC7C487BA9A7">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>183</LineStart>
<Snippet>        Map&lt;String, Object&gt; results = null;
        try {
            results = dispatcher.runSync(&quot;renderCompDocPdf&quot;, mapIn);
        } catch (ServiceAuthException e) {
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, e.toString());</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="8AE35199C5A69DF2F93145C2C645239B">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>GenericWebEvent.java</FileName>
<FilePath>framework/webtools/src/org/ofbiz/webtools/GenericWebEvent.java</FilePath>
<LineStart>135</LineStart>
<Snippet>            }

            String fval = request.getParameter(field.getName());
            if (UtilValidate.isNotEmpty(fval)) {
                try {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="47620C95-01F7-474F-9944-4C54A9A43679" iid="A3B3BCE15947844FFD44C1A20D64A37F">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method closeEditWrap() in RenderContentAsText.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RenderContentAsText.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderContentAsText.java</FilePath>
<LineStart>244</LineStart>
<Snippet>                ServletContext servletContext = request.getSession().getServletContext();
                RequestHandler rh = (RequestHandler) servletContext.getAttribute(&quot;_REQUEST_HANDLER_&quot;);
                out.append(rh.makeLink(request, response, &quot;/&quot; + fullRequest, false, false, true));
                out.write(&quot;\&quot;&gt;Edit&lt;/a&gt;&quot;);
                out.write(&quot;&lt;/div&gt;&quot;);</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceEventHandler.java</FilePath>
<LineStart>337</LineStart>
<Snippet>                dispatcher.runAsync(serviceName, serviceContext);
            } else {
                result = dispatcher.runSync(serviceName, serviceContext);
            }
        } catch (ServiceAuthException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="56DC40620CC5BD81D18B95F752A249AB">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 115, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>115</LineStart>
<Snippet>    @Override
    public void write(String s) throws IOException {
        write(s, 0, s.length());
    }
</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>119</LineStart>
<Snippet>            contentRevisionMap.put(&quot;contentId&quot;, contentId);
            contentRevisionMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentRevisionAndItem&quot;, contentRevisionMap);
            keySet = result.keySet();
            iter = keySet.iterator();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="D027DAA9-A3BE-49E4-BDBF-3DFF657F84CA" iid="CE3874FA23D5E0ED7D2EEE8B198CEBEA">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>402</LineStart>
<Snippet>        if(UtilValidate.isEmpty(request.getParameter(&quot;frameContentId&quot;))) {
            if (UtilValidate.isNotEmpty(request.getParameter(&quot;frameExistContentId&quot;)) &amp;&amp; UtilValidate.isNotEmpty(request.getParameter(&quot;frameExistDataResourceId&quot;))) {
                session.setAttribute(&quot;frameExistContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
                session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF" iid="9850D966E516634AFB0FCB6D7A276D0C">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method run() in InputValue.java sends unvalidated data to a web browser on line 143, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>InputValue.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/pseudotag/InputValue.java</FilePath>
<LineStart>143</LineStart>
<Snippet>            inputValue = UtilFormatOut.replaceString(inputValue, &quot;\&quot;&quot;, &quot;&amp;quot;&quot;);
            pageContext.getOut().print(&quot;name=\&quot;&quot; + paramName + &quot;\&quot; value=\&quot;&quot; +
                inputValue + &quot;\&quot;&quot;);
        } else {
            pageContext.getOut().print(inputValue);</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceMultiEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceMultiEventHandler.java</FilePath>
<LineStart>308</LineStart>
<Snippet>                Map&lt;String, Object&gt; result = null;
                try {
                    result = dispatcher.runSync(serviceName, serviceContext);
                } catch (ServiceAuthException e) {
                    // not logging since the service engine already did</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="12AF265A-8085-459E-A9C9-E0922DFFE1F5" iid="586EF2728FDCDA3554C7DFD8603A633D">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>OrderManagerEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/OrderManagerEvents.java</FilePath>
<LineStart>98</LineStart>
<Snippet>                    Map&lt;String, Object&gt; results = null;
                    try {
                        results = dispatcher.runSync(&quot;createPaymentFromPreference&quot;, UtilMisc.toMap(&quot;orderPaymentPreferenceId&quot;, ppref.get(&quot;orderPaymentPreferenceId&quot;),
                                &quot;paymentFromId&quot;, placingCustomer.getString(&quot;partyId&quot;), &quot;comments&quot;, &quot;Payment received offline and manually entered.&quot;));
                    } catch (GenericServiceException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="C72A8AC8AA7250D7F7EB11C052B3AA39">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method close() in OfbizUrlTransform.java sends unvalidated data to a web browser on line 205, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>OfbizUrlTransform.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/ftl/OfbizUrlTransform.java</FilePath>
<LineStart>205</LineStart>
<Snippet>                        String requestUrl = buf.toString();
                        newURL.append(requestUrl);
                        out.write(newURL.toString());
                    } else if (req != null) {
                        HttpServletRequest request = (HttpServletRequest) req.getWrappedObject();</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>558</LineStart>
<Snippet>        session.setAttribute(&quot;_CLIENT_LOCALE_&quot;, request.getLocale());
        session.setAttribute(&quot;_CLIENT_REQUEST_&quot;, fullRequestUrl.toString());
        session.setAttribute(&quot;_CLIENT_USER_AGENT_&quot;, request.getHeader(&quot;User-Agent&quot;) != null ? request.getHeader(&quot;User-Agent&quot;) : &quot;&quot;);
        session.setAttribute(&quot;_CLIENT_REFERER_&quot;, request.getHeader(&quot;Referer&quot;) != null ? request.getHeader(&quot;Referer&quot;) : &quot;&quot;);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="BB17568377C2ECB6761E207389EC65B0">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>WebShoppingCart.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/WebShoppingCart.java</FilePath>
<LineStart>48</LineStart>
<Snippet>                WebSiteWorker.getWebSiteId(request), (locale != null ? locale : ProductStoreWorker.getStoreLocale(request)),
                (currencyUom != null ? currencyUom : ProductStoreWorker.getStoreCurrencyUomId(request)),
                request.getParameter(&quot;billToCustomerPartyId&quot;),
                (request.getParameter(&quot;supplierPartyId&quot;) != null ? request.getParameter(&quot;supplierPartyId&quot;) : request.getParameter(&quot;billFromVendorPartyId&quot;)));
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="907C0BD7AD98CB781A2DFF335D3A0149">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>LoginWorker.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/LoginWorker.java</FilePath>
<LineStart>264</LineStart>
<Snippet>
                // keep the previous request name in the session
                session.setAttribute(&quot;_PREVIOUS_REQUEST_&quot;, request.getPathInfo());

                // NOTE: not using the old _PREVIOUS_PARAMS_ attribute at all because it was a security hole as it was used to put data in the URL (never encrypted) that was originally in a form field that may have been encrypted</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="633E3A7E9D0DA9B62FC37826278B6ABB">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>312</LineStart>
<Snippet>            contentCtx.put(&quot;fromDate&quot;, UtilDateTime.nowTimestamp());
            contentCtx.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; contentResult = dispatcher.runSync(&quot;createContent&quot;, contentCtx);
            contentId = contentResult.get(&quot;contentId&quot;).toString();
        } catch (Exception e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="822245C9577C2C30AB0DAD94F8D4E811">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>LoginWorker.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/LoginWorker.java</FilePath>
<LineStart>397</LineStart>
<Snippet>            // get the visit id to pass to the userLogin for history
            String visitId = VisitHandler.getVisitId(session);
            result = dispatcher.runSync(&quot;userLogin&quot;, UtilMisc.toMap(&quot;login.username&quot;, username, &quot;login.password&quot;, password, &quot;visitId&quot;, visitId, &quot;locale&quot;, UtilHttp.getLocale(request)));
        } catch (GenericServiceException e) {
            Debug.logError(e, &quot;Error calling userLogin service&quot;, module);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="EBC027F3F02C58E528F792BF5D086361">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>PayPalEvents.java</FileName>
<FilePath>applications/accounting/src/org/ofbiz/accounting/thirdparty/paypal/PayPalEvents.java</FilePath>
<LineStart>497</LineStart>
<Snippet>        try {
            String comment = UtilProperties.getMessage(resource, &quot;AccountingPaymentReceiveViaPayPal&quot;, locale);
            results = dispatcher.runSync(&quot;createPaymentFromPreference&quot;, UtilMisc.toMap(&quot;userLogin&quot;, userLogin,
                    &quot;orderPaymentPreferenceId&quot;, paymentPreference.get(&quot;orderPaymentPreferenceId&quot;), &quot;comments&quot;, comment));
        } catch (GenericServiceException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="A9458A7D71FEDD0E63D8A3BC72DD4FAF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>287</LineStart>
<Snippet>                imgContext.put(&quot;rootDir&quot;, &quot;rootDir&quot;);
                if (Debug.infoOn()) Debug.logInfo(&quot;[UploadContentAndImage]imgContext &quot; + imgContext, module);
                Map&lt;String, Object&gt; imgResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, imgContext);
                isError = ModelService.RESPOND_ERROR.equals(imgResults.get(ModelService.RESPONSE_MESSAGE));
                if (isError) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="3B16BA1DA8142E34F6F9A79B49E087C4">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>WebPosEvents.java</FileName>
<FilePath>specialpurpose/webpos/src/org/ofbiz/webpos/WebPosEvents.java</FilePath>
<LineStart>94</LineStart>
<Snippet>            GenericValue productStore = ProductStoreWorker.getProductStore(productStoreId, delegator);
            String facilityId = null;
            String currencyUomId = request.getParameter(&quot;currencyUomId&quot;);

            if (UtilValidate.isNotEmpty(productStore)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="3D0BC3A3382E7D9CFE90152F9F8A8079">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method close() in OfbizUrlTransform.java sends unvalidated data to a web browser on line 205, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>OfbizUrlTransform.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/ftl/OfbizUrlTransform.java</FilePath>
<LineStart>205</LineStart>
<Snippet>                        String requestUrl = buf.toString();
                        newURL.append(requestUrl);
                        out.write(newURL.toString());
                    } else if (req != null) {
                        HttpServletRequest request = (HttpServletRequest) req.getWrappedObject();</Snippet>
                            </Primary>
                            <Source>
<FileName>CommonEvents.java</FileName>
<FilePath>framework/common/src/org/ofbiz/common/CommonEvents.java</FilePath>
<LineStart>179</LineStart>
<Snippet>     * setting should be passed as a &quot;newLocale&quot; request parameter. */
    public static String setSessionLocale(HttpServletRequest request, HttpServletResponse response) {
        String localeString = request.getParameter(&quot;newLocale&quot;);
        if (UtilValidate.isNotEmpty(localeString)) {
            UtilHttp.setLocale(request, localeString);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="D73BBE0DAF2E744BF5459ACC25630295">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>LoginWorker.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/LoginWorker.java</FilePath>
<LineStart>397</LineStart>
<Snippet>            // get the visit id to pass to the userLogin for history
            String visitId = VisitHandler.getVisitId(session);
            result = dispatcher.runSync(&quot;userLogin&quot;, UtilMisc.toMap(&quot;login.username&quot;, username, &quot;login.password&quot;, password, &quot;visitId&quot;, visitId, &quot;locale&quot;, UtilHttp.getLocale(request)));
        } catch (GenericServiceException e) {
            Debug.logError(e, &quot;Error calling userLogin service&quot;, module);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="721BF9A793257EF5152D4D3DF1AA0533">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>CmsEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/cms/CmsEvents.java</FilePath>
<LineStart>107</LineStart>
<Snippet>            pathInfo = overrideViewUri;
        } else {
            pathInfo = request.getPathInfo();
            if (targetRequest.equals(actualRequest) &amp;&amp; pathInfo != null) {
                // was called directly -- path info is everything after the request</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="46A0DCF66B56126463964D4F62F05F4E">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>GoogleBaseSearchEvents.java</FileName>
<FilePath>specialpurpose/googlebase/src/org/ofbiz/googlebase/GoogleBaseSearchEvents.java</FilePath>
<LineStart>122</LineStart>
<Snippet>                    inMap.put(&quot;productStoreId&quot;, productStoreId);
                    inMap.put(&quot;allowRecommended&quot;, allowRecommended);
                    Map&lt;String, Object&gt; exportResult = dispatcher.runSync(&quot;exportToGoogle&quot;, inMap);
                    if (ServiceUtil.isError(exportResult)) {
                        List&lt;String&gt; errorMessages = UtilGenerics.checkList(exportResult.get(ModelService.ERROR_MESSAGE_LIST), String.class);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="45CEC2C0622DDC95BE6F1E90F5DD81A8">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>CoreEvents.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/CoreEvents.java</FilePath>
<LineStart>412</LineStart>
<Snippet>        try {
            if (null!=request.getParameter(&quot;_RUN_SYNC_&quot;) &amp;&amp; request.getParameter(&quot;_RUN_SYNC_&quot;).equals(&quot;Y&quot;)) {
                syncServiceResult = dispatcher.runSync(serviceName, serviceContext);
            } else {
                dispatcher.schedule(jobName, poolName, serviceName, serviceContext, startTime, frequency, interval, count, endTime, maxRetry);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="B2BEC031A207748D943C043F218604D2">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>672</LineStart>
<Snippet>        HttpSession session = request.getSession();
        Locale locale = UtilHttp.getLocale(request);
        String supplierPartyId = request.getParameter(&quot;supplierPartyId_o_0&quot;);
        
        // check the preferred currency of the supplier, if set, use that for the cart, otherwise use system defaults.</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="875E043865B4B0A448EEF0BA9D62DAB9">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>SearchEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/search/SearchEvents.java</FilePath>
<LineStart>60</LineStart>
<Snippet>        serviceInMap.put(&quot;contentId&quot;, siteId);
        try {
            result = dispatcher.runSync(&quot;indexTree&quot;, serviceInMap);
        } catch (GenericServiceException e) {
            String errorMsg = &quot;Error calling the indexTree service.&quot; + e.toString();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="D4A74EFCCB556FCF938E1554544ECEC4">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>564</LineStart>
<Snippet>        session.setAttribute(&quot;_CLIENT_REMOTE_ADDR_&quot;, request.getRemoteAddr());
        session.setAttribute(&quot;_CLIENT_REMOTE_HOST_&quot;, request.getRemoteHost());
        session.setAttribute(&quot;_CLIENT_REMOTE_USER_&quot;, request.getRemoteUser());
    }
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="384A24D557FCF8EFF6515E5A559AF23C">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>CoreEvents.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/CoreEvents.java</FilePath>
<LineStart>516</LineStart>
<Snippet>    public static String runService(HttpServletRequest request, HttpServletResponse response) {
        // get the mode and service name
        String serviceName = request.getParameter(&quot;serviceName&quot;);
        String mode = request.getParameter(&quot;mode&quot;);
        Locale locale = UtilHttp.getLocale(request);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="2D904C29E0E0D95BFA49F6E912A43A4E">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>WebShoppingCart.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/WebShoppingCart.java</FilePath>
<LineStart>49</LineStart>
<Snippet>                (currencyUom != null ? currencyUom : ProductStoreWorker.getStoreCurrencyUomId(request)),
                request.getParameter(&quot;billToCustomerPartyId&quot;),
                (request.getParameter(&quot;supplierPartyId&quot;) != null ? request.getParameter(&quot;supplierPartyId&quot;) : request.getParameter(&quot;billFromVendorPartyId&quot;)));

        HttpSession session = request.getSession(true);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1C85B63C-0870-45B8-9909-86BA43F68B05" iid="8343FB6F0B8C1A6D3D7D099603DA6819">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method closeEditWrap() in RenderSubContentCacheTransform.java sends unvalidated data to a web browser on line 275, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>RenderSubContentCacheTransform.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderSubContentCacheTransform.java</FilePath>
<LineStart>275</LineStart>
<Snippet>                ServletContext servletContext = request.getSession().getServletContext();
                RequestHandler rh = (RequestHandler) servletContext.getAttribute(&quot;_REQUEST_HANDLER_&quot;);
                out.append(rh.makeLink(request, response, &quot;/&quot; + fullRequest, false, false, true));
                out.write(&quot;\&quot;&gt;Edit&lt;/a&gt;&quot;);
                out.write(&quot;&lt;/div&gt;&quot;);</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>119</LineStart>
<Snippet>            contentRevisionMap.put(&quot;contentId&quot;, contentId);
            contentRevisionMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentRevisionAndItem&quot;, contentRevisionMap);
            keySet = result.keySet();
            iter = keySet.iterator();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="BDD2435E740019B16E1E5110FBDE9117">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>402</LineStart>
<Snippet>        if(UtilValidate.isEmpty(request.getParameter(&quot;frameContentId&quot;))) {
            if (UtilValidate.isNotEmpty(request.getParameter(&quot;frameExistContentId&quot;)) &amp;&amp; UtilValidate.isNotEmpty(request.getParameter(&quot;frameExistDataResourceId&quot;))) {
                session.setAttribute(&quot;frameExistContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
                session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="7B75FEC6835F72FF9B184D196AB299B6">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>OrderManagerEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/OrderManagerEvents.java</FilePath>
<LineStart>98</LineStart>
<Snippet>                    Map&lt;String, Object&gt; results = null;
                    try {
                        results = dispatcher.runSync(&quot;createPaymentFromPreference&quot;, UtilMisc.toMap(&quot;orderPaymentPreferenceId&quot;, ppref.get(&quot;orderPaymentPreferenceId&quot;),
                                &quot;paymentFromId&quot;, placingCustomer.getString(&quot;partyId&quot;), &quot;comments&quot;, &quot;Payment received offline and manually entered.&quot;));
                    } catch (GenericServiceException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="1715D42B52BD474DFA501E05CC2162AD">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method close() in OfbizUrlTransform.java sends unvalidated data to a web browser on line 205, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>OfbizUrlTransform.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/ftl/OfbizUrlTransform.java</FilePath>
<LineStart>205</LineStart>
<Snippet>                        String requestUrl = buf.toString();
                        newURL.append(requestUrl);
                        out.write(newURL.toString());
                    } else if (req != null) {
                        HttpServletRequest request = (HttpServletRequest) req.getWrappedObject();</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>262</LineStart>
<Snippet>        if (UtilValidate.isEmpty(imageName) || UtilValidate.isEmpty(imageData)) {
            session.setAttribute(&quot;frameContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
            session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;There is no frame image, please select the image type *.PNG  uploading.&quot;);
            return &quot;error&quot;;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="E6B4AFB293CEEAE37A9A7C26D4E370CB">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>OrderEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/order/OrderEvents.java</FilePath>
<LineStart>58</LineStart>
<Snippet>        Delegator delegator = (Delegator) request.getAttribute(&quot;delegator&quot;);
        GenericValue userLogin = (GenericValue) session.getAttribute(&quot;userLogin&quot;);
        String dataResourceId = request.getParameter(&quot;dataResourceId&quot;);

        try {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="D8FE3222E7E6794848A3E717B7468A94">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 130, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>130</LineStart>
<Snippet>        }
        checkAfterNewline();
        super.write(s, offset, i - offset);
    }
}</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1527</LineStart>
<Snippet>        Locale locale = UtilHttp.getLocale(request);

        String productStoreId = request.getParameter(&quot;productStoreId&quot;);

        if (UtilValidate.isNotEmpty(productStoreId)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="489FF3AB0C7234E9B8C4ABA2E1D61C82">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>LayoutEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/layout/LayoutEvents.java</FilePath>
<LineStart>552</LineStart>
<Snippet>            context.put(&quot;textData&quot;, paramMap.get(&quot;textData&quot;));
            context.put(&quot;contentAssocTypeId&quot;, null);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, context);
            boolean isError = ModelService.RESPOND_ERROR.equals(result.get(ModelService.RESPONSE_MESSAGE));
            if (isError) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="6D09DD021F87A0ED5388A71DDC1349DA">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>262</LineStart>
<Snippet>        if (UtilValidate.isEmpty(imageName) || UtilValidate.isEmpty(imageData)) {
            session.setAttribute(&quot;frameContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
            session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;There is no frame image, please select the image type *.PNG  uploading.&quot;);
            return &quot;error&quot;;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="51A1FEACF7C94A60C08C6BAA5F657FDB">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>TrackingCodeEvents.java</FileName>
<FilePath>applications/marketing/src/org/ofbiz/marketing/tracking/TrackingCodeEvents.java</FilePath>
<LineStart>374</LineStart>
<Snippet>        if (UtilValidate.isEmpty(trackingCodeId)) trackingCodeId = request.getParameter(&quot;atc&quot;);
        if (UtilValidate.isEmpty(trackingCodeId)) {
            Cookie[] cookies = request.getCookies();
            if (cookies != null) {
                for (Cookie cookie : cookies) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="B34245705E958D122A67287F90DF7616">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 124, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>124</LineStart>
<Snippet>            if (s.charAt(i) == '\n') {
                checkAfterNewline();
                super.write(s, offset, i - offset + 1);
                offset = i + 1;
                lastWasNewline = true;</Snippet>
                            </Primary>
                            <Source>
<FileName>ICalWorker.java</FileName>
<FilePath>applications/workeffort/src/org/ofbiz/workeffort/workeffort/ICalWorker.java</FilePath>
<LineStart>285</LineStart>
<Snippet>        HttpSession session = request.getSession();
        LocalDispatcher dispatcher = (LocalDispatcher) request.getAttribute(&quot;dispatcher&quot;);
        Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;userLogin&quot;, serviceMap);
        if (ServiceUtil.isError(result) || ServiceUtil.isFailure(result)) {
            return;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="3ABAA953853A9B1EA09B229957311A5B">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceMultiEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceMultiEventHandler.java</FilePath>
<LineStart>308</LineStart>
<Snippet>                Map&lt;String, Object&gt; result = null;
                try {
                    result = dispatcher.runSync(serviceName, serviceContext);
                } catch (ServiceAuthException e) {
                    // not logging since the service engine already did</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="91AFCD490FE19AB53E4C8B0ADBA79899">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 130, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>130</LineStart>
<Snippet>        }
        checkAfterNewline();
        super.write(s, offset, i - offset);
    }
}</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>564</LineStart>
<Snippet>        session.setAttribute(&quot;_CLIENT_REMOTE_ADDR_&quot;, request.getRemoteAddr());
        session.setAttribute(&quot;_CLIENT_REMOTE_HOST_&quot;, request.getRemoteHost());
        session.setAttribute(&quot;_CLIENT_REMOTE_USER_&quot;, request.getRemoteUser());
    }
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="6E5A6C6DD32150E77CBC72C32B710D0E">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 130, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>130</LineStart>
<Snippet>        }
        checkAfterNewline();
        super.write(s, offset, i - offset);
    }
}</Snippet>
                            </Primary>
                            <Source>
<FileName>TrackingCodeEvents.java</FileName>
<FilePath>applications/marketing/src/org/ofbiz/marketing/tracking/TrackingCodeEvents.java</FilePath>
<LineStart>93</LineStart>
<Snippet>     */
    public static String checkPartnerTrackingCodeUrlParam(HttpServletRequest request, HttpServletResponse response) {
        String trackingCodeId = request.getParameter(&quot;ptc&quot;);

        if (UtilValidate.isNotEmpty(trackingCodeId)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="DCD90CCE7C3989CF8167D4AB2A9B7E3F">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>251</LineStart>
<Snippet>                txtContext.put(&quot;mapKey&quot;, &quot;ARTICLE&quot;);
                txtContext.put(&quot;dataTemplateTypeId&quot;, &quot;NONE&quot;);
                Map&lt;String, Object&gt; txtResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, txtContext);
                isError = ModelService.RESPOND_ERROR.equals(txtResults.get(ModelService.RESPONSE_MESSAGE));
                if (isError) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="D027DAA9-A3BE-49E4-BDBF-3DFF657F84CA" iid="EA43AF8C81C895C762C839100C98503D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>261</LineStart>
<Snippet>        ByteBuffer imageData = (ByteBuffer) tempFile.get(&quot;imageData&quot;);
        if (UtilValidate.isEmpty(imageName) || UtilValidate.isEmpty(imageData)) {
            session.setAttribute(&quot;frameContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
            session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;There is no frame image, please select the image type *.PNG  uploading.&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="CCA0DA154C61812C453925D7078C6645">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>184</LineStart>
<Snippet>
    public static Map&lt;String, Object&gt; getPathInfoOnlyParameterMap(HttpServletRequest request, Set&lt;? extends String&gt; nameSet, Boolean onlyIncludeOrSkip) {
        return getPathInfoOnlyParameterMap(request.getPathInfo(), nameSet, onlyIncludeOrSkip);
    }
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="D1241DC99FDBE21C7BE3366115227E75">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method close() in OfbizUrlTransform.java sends unvalidated data to a web browser on line 218, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>OfbizUrlTransform.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/ftl/OfbizUrlTransform.java</FilePath>
<LineStart>218</LineStart>
<Snippet>                        // make the link
                        RequestHandler rh = (RequestHandler) ctx.getAttribute(&quot;_REQUEST_HANDLER_&quot;);
                        out.write(rh.makeLink(request, response, requestUrl, fullPath, secure, encode));
                    } else if (prefix != null) {
                        if (prefix instanceof TemplateScalarModel) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>104</LineStart>
<Snippet>        persistMap.put(&quot;userLogin&quot;, userLogin);
        try {
            Map&lt;String, Object&gt; persistResult = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, persistMap);
            contentId = (String)persistResult.get(&quot;contentId&quot;);
            //request.setAttribute(&quot;contentId&quot;, contentId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="C3C50EC4CFC275EA26159ADFF222CFD8">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>ContentManagementEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/ContentManagementEvents.java</FilePath>
<LineStart>288</LineStart>
<Snippet>                        serviceIn.put(&quot;targetOperationList&quot;, targetOperationList);
                        serviceIn.put(&quot;contentPurposeList&quot;, contentPurposeList);
                        results = dispatcher.runSync(&quot;createContentAssoc&quot;, serviceIn);
                        responseMessage = (String)results.get(ModelService.RESPONSE_MESSAGE);
                        if (UtilValidate.isNotEmpty(responseMessage)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF" iid="4762F2924B4B30B05136C4D6F663FADC">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method run() in EntityField.java sends unvalidated data to a web browser on line 249, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EntityField.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/pseudotag/EntityField.java</FilePath>
<LineStart>249</LineStart>
<Snippet>            if (prefix != null)
                out.print(prefix);
            out.print(fieldString);
            if (suffix != null)
                out.print(suffix);</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceEventHandler.java</FilePath>
<LineStart>337</LineStart>
<Snippet>                dispatcher.runAsync(serviceName, serviceContext);
            } else {
                result = dispatcher.runSync(serviceName, serviceContext);
            }
        } catch (ServiceAuthException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="DDC06DFE2934358E1CA23F9E07E0BACF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>119</LineStart>
<Snippet>            contentRevisionMap.put(&quot;contentId&quot;, contentId);
            contentRevisionMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentRevisionAndItem&quot;, contentRevisionMap);
            keySet = result.keySet();
            iter = keySet.iterator();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="1EAA5D8A66FD5F2786D3CFCD0C1C1DB5">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 130, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>130</LineStart>
<Snippet>        }
        checkAfterNewline();
        super.write(s, offset, i - offset);
    }
}</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>409</LineStart>
<Snippet>        }
        
        String frameContentId = request.getParameter(&quot;frameContentId&quot;);
        Delegator delegator = (Delegator) request.getAttribute(&quot;delegator&quot;);
        </Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="3F9E19BE8A5E436079DC270A1E9B3C5C">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>184</LineStart>
<Snippet>
    public static Map&lt;String, Object&gt; getPathInfoOnlyParameterMap(HttpServletRequest request, Set&lt;? extends String&gt; nameSet, Boolean onlyIncludeOrSkip) {
        return getPathInfoOnlyParameterMap(request.getPathInfo(), nameSet, onlyIncludeOrSkip);
    }
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="A34A357DA17B73183A8CA325776DE9EC">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method httpEngine() in HttpEngine.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HttpEngine.java</FileName>
<FilePath>framework/service/src/org/ofbiz/service/engine/HttpEngine.java</FilePath>
<LineStart>187</LineStart>
<Snippet>            if (errorMessage.length() &gt; 0) {
                response.setContentLength(errorMessage.length());
                out.write(errorMessage.toString());
            } else {
                response.setContentLength(resultString.length());</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>104</LineStart>
<Snippet>        persistMap.put(&quot;userLogin&quot;, userLogin);
        try {
            Map&lt;String, Object&gt; persistResult = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, persistMap);
            contentId = (String)persistResult.get(&quot;contentId&quot;);
            //request.setAttribute(&quot;contentId&quot;, contentId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="6D09DD021F87A0ED5388A71DDC1349DB">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>268</LineStart>
<Snippet>        if (!&quot;image/png&quot;.equals(mimType)) {
            session.setAttribute(&quot;frameContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
            session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;The selected image type is incorrect, please select the image type *.PNG to upload.&quot;);
            return &quot;error&quot;;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="2CC8284A0201BEBC5BF0AEA41D53D294">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>LoginEvents.java</FileName>
<FilePath>applications/securityext/src/org/ofbiz/securityext/login/LoginEvents.java</FilePath>
<LineStart>77</LineStart>
<Snippet>
            String username = request.getParameter(&quot;USERNAME&quot;);
            String password = request.getParameter(&quot;PASSWORD&quot;);

            if ((username != null) &amp;&amp; (&quot;true&quot;.equalsIgnoreCase(UtilProperties.getPropertyValue(&quot;security.properties&quot;, &quot;username.lowercase&quot;)))) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="ABFC2E1DD9CEE34E4B36B5709000410C">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>ShipmentEvents.java</FileName>
<FilePath>applications/product/src/org/ofbiz/shipment/shipment/ShipmentEvents.java</FilePath>
<LineStart>95</LineStart>
<Snippet>        GenericValue userLogin = (GenericValue)request.getSession().getAttribute(&quot;userLogin&quot;);

        String shipmentId = request.getParameter(&quot;shipmentIdReceived&quot;);
        String forceShipmentReceived = request.getParameter(&quot;forceShipmentReceived&quot;);
        if (UtilValidate.isNotEmpty(shipmentId) &amp;&amp; &quot;Y&quot;.equals(forceShipmentReceived)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="3B16BA1DA8142E34F6F9A79B49E087C3">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>WebPosEvents.java</FileName>
<FilePath>specialpurpose/webpos/src/org/ofbiz/webpos/WebPosEvents.java</FilePath>
<LineStart>94</LineStart>
<Snippet>            GenericValue productStore = ProductStoreWorker.getProductStore(productStoreId, delegator);
            String facilityId = null;
            String currencyUomId = request.getParameter(&quot;currencyUomId&quot;);

            if (UtilValidate.isNotEmpty(productStore)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="3ABAA953853A9B1EA09B229957311A5C">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceMultiEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceMultiEventHandler.java</FilePath>
<LineStart>308</LineStart>
<Snippet>                Map&lt;String, Object&gt; result = null;
                try {
                    result = dispatcher.runSync(serviceName, serviceContext);
                } catch (ServiceAuthException e) {
                    // not logging since the service engine already did</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="BCAA6A9BEFC1DEBF694F7143921E115D">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>182</LineStart>
<Snippet>                }
                if (UtilValidate.isNotEmpty(map.get(&quot;contentAssocTypeId&quot;))) {
                    ftlResults = dispatcher.runSync(&quot;createContentAssoc&quot;, map);
                    isError = ModelService.RESPOND_ERROR.equals(ftlResults.get(ModelService.RESPONSE_MESSAGE));
                    if (isError) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF" iid="A5880F2C488E4E7E5981872899ADB2E3">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method run() in InputValue.java sends unvalidated data to a web browser on line 143, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>InputValue.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/pseudotag/InputValue.java</FilePath>
<LineStart>143</LineStart>
<Snippet>            inputValue = UtilFormatOut.replaceString(inputValue, &quot;\&quot;&quot;, &quot;&amp;quot;&quot;);
            pageContext.getOut().print(&quot;name=\&quot;&quot; + paramName + &quot;\&quot; value=\&quot;&quot; +
                inputValue + &quot;\&quot;&quot;);
        } else {
            pageContext.getOut().print(inputValue);</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceEventHandler.java</FilePath>
<LineStart>337</LineStart>
<Snippet>                dispatcher.runAsync(serviceName, serviceContext);
            } else {
                result = dispatcher.runSync(serviceName, serviceContext);
            }
        } catch (ServiceAuthException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1C85B63C-0870-45B8-9909-86BA43F68B05" iid="F1612D9F9EDCCE6EF89E57E42170CBC7">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method closeEditWrap() in RenderContentAsText.java sends unvalidated data to a web browser on line 244, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>RenderContentAsText.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderContentAsText.java</FilePath>
<LineStart>244</LineStart>
<Snippet>                ServletContext servletContext = request.getSession().getServletContext();
                RequestHandler rh = (RequestHandler) servletContext.getAttribute(&quot;_REQUEST_HANDLER_&quot;);
                out.append(rh.makeLink(request, response, &quot;/&quot; + fullRequest, false, false, true));
                out.write(&quot;\&quot;&gt;Edit&lt;/a&gt;&quot;);
                out.write(&quot;&lt;/div&gt;&quot;);</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceMultiEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceMultiEventHandler.java</FilePath>
<LineStart>308</LineStart>
<Snippet>                Map&lt;String, Object&gt; result = null;
                try {
                    result = dispatcher.runSync(serviceName, serviceContext);
                } catch (ServiceAuthException e) {
                    // not logging since the service engine already did</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="47C8951C3FFF963AC63347702E673A23">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method openEditWrap() in RenderSubContentCacheTransform.java sends unvalidated data to a web browser on line 202, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>RenderSubContentCacheTransform.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderSubContentCacheTransform.java</FilePath>
<LineStart>202</LineStart>
<Snippet>            public void openEditWrap(Writer out, String editStyle) throws IOException {
                String divStr = &quot;&lt;div class=\&quot;&quot; + editStyle + &quot;\&quot;&gt;&quot;;
                out.write(divStr);
            }
</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>575</LineStart>
<Snippet>        while (e.hasMoreElements()) {
            String name = e.nextElement();
            request.setAttribute(name, request.getParameter(name));
        }
    }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="492CDC254FBA94CC69437D6992D0C8D0">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>688</LineStart>
<Snippet>        
        // TODO: the code below here needs some cleanups
        String billToCustomerPartyId = request.getParameter(&quot;billToCustomerPartyId_o_0&quot;);
        if (UtilValidate.isEmpty(billToCustomerPartyId) &amp;&amp; UtilValidate.isEmpty(supplierPartyId)) {
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, UtilProperties.getMessage(resource_error, &quot;OrderCouldNotInitPurchaseOrder&quot;, locale));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1C85B63C-0870-45B8-9909-86BA43F68B05" iid="B8B3468198F1D95A49375F42C3C39407">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method closeEditWrap() in RenderContentAsText.java sends unvalidated data to a web browser on line 244, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>RenderContentAsText.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderContentAsText.java</FilePath>
<LineStart>244</LineStart>
<Snippet>                ServletContext servletContext = request.getSession().getServletContext();
                RequestHandler rh = (RequestHandler) servletContext.getAttribute(&quot;_REQUEST_HANDLER_&quot;);
                out.append(rh.makeLink(request, response, &quot;/&quot; + fullRequest, false, false, true));
                out.write(&quot;\&quot;&gt;Edit&lt;/a&gt;&quot;);
                out.write(&quot;&lt;/div&gt;&quot;);</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>119</LineStart>
<Snippet>            contentRevisionMap.put(&quot;contentId&quot;, contentId);
            contentRevisionMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentRevisionAndItem&quot;, contentRevisionMap);
            keySet = result.keySet();
            iter = keySet.iterator();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="C0CB936D95355DE55A7CBBF4BCD4B27B">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method toJsonObjectList() in EbayStoreOptions.java sends unvalidated data to a web browser on line 273, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EbayStoreOptions.java</FileName>
<FilePath>specialpurpose/ebaystore/src/org/ofbiz/ebaystore/EbayStoreOptions.java</FilePath>
<LineStart>273</LineStart>
<Snippet>            try {
                out = response.getWriter();
                out.write(jsonStr);
                out.flush();
            } catch (IOException e) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CoreEvents.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/CoreEvents.java</FilePath>
<LineStart>412</LineStart>
<Snippet>        try {
            if (null!=request.getParameter(&quot;_RUN_SYNC_&quot;) &amp;&amp; request.getParameter(&quot;_RUN_SYNC_&quot;).equals(&quot;Y&quot;)) {
                syncServiceResult = dispatcher.runSync(serviceName, serviceContext);
            } else {
                dispatcher.schedule(jobName, poolName, serviceName, serviceContext, startTime, frequency, interval, count, endTime, maxRetry);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF" iid="204013A4100772CC9FE25112AD11B564">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doEndTag() in UrlTag.java sends unvalidated data to a web browser on line 57, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>UrlTag.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/taglib/UrlTag.java</FilePath>
<LineStart>57</LineStart>
<Snippet>
        try {
            getPreviousOut().print(newURL);
        } catch (IOException e) {
            if (UtilJ2eeCompat.useNestedJspException(pageContext.getServletContext())) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>104</LineStart>
<Snippet>        persistMap.put(&quot;userLogin&quot;, userLogin);
        try {
            Map&lt;String, Object&gt; persistResult = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, persistMap);
            contentId = (String)persistResult.get(&quot;contentId&quot;);
            //request.setAttribute(&quot;contentId&quot;, contentId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="0EE2FA63997A1FA58808C7EC14C07B12">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 115, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>115</LineStart>
<Snippet>    @Override
    public void write(String s) throws IOException {
        write(s, 0, s.length());
    }
</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>688</LineStart>
<Snippet>        
        // TODO: the code below here needs some cleanups
        String billToCustomerPartyId = request.getParameter(&quot;billToCustomerPartyId_o_0&quot;);
        if (UtilValidate.isEmpty(billToCustomerPartyId) &amp;&amp; UtilValidate.isEmpty(supplierPartyId)) {
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, UtilProperties.getMessage(resource_error, &quot;OrderCouldNotInitPurchaseOrder&quot;, locale));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="58C35F5EAEAA6E02F835DBA6953411DC">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>WebPosEvents.java</FileName>
<FilePath>specialpurpose/webpos/src/org/ofbiz/webpos/WebPosEvents.java</FilePath>
<LineStart>58</LineStart>
<Snippet>        
        // get the posTerminalId
        String posTerminalId = (String) request.getParameter(&quot;posTerminalId&quot;);
        session.removeAttribute(&quot;shoppingCart&quot;);
        session.removeAttribute(&quot;webPosSession&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="3704A47FC1D9599ED5F75210749EE001">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 115, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>115</LineStart>
<Snippet>    @Override
    public void write(String s) throws IOException {
        write(s, 0, s.length());
    }
</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>505</LineStart>
<Snippet>        Map&lt;String, Object&gt; ftlResults = null;
        try {
            ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
        } catch (ServiceAuthException e) {
            String msg = e.getMessage();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1C85B63C-0870-45B8-9909-86BA43F68B05" iid="FC6273145A6E5FC83512566DFFFBD0C4">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method closeEditWrap() in RenderContentTransform.java sends unvalidated data to a web browser on line 144, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>RenderContentTransform.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderContentTransform.java</FilePath>
<LineStart>144</LineStart>
<Snippet>                ServletContext servletContext = request.getSession().getServletContext();
                RequestHandler rh = (RequestHandler) servletContext.getAttribute(&quot;_REQUEST_HANDLER_&quot;);
                out.append(rh.makeLink(request, response, &quot;/&quot; + fullRequest, false, false, true));
                out.write(&quot;\&quot;&gt;Edit&lt;/a&gt;&quot;);
                out.write(&quot;&lt;/div&gt;&quot;);</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>104</LineStart>
<Snippet>        persistMap.put(&quot;userLogin&quot;, userLogin);
        try {
            Map&lt;String, Object&gt; persistResult = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, persistMap);
            contentId = (String)persistResult.get(&quot;contentId&quot;);
            //request.setAttribute(&quot;contentId&quot;, contentId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="A8D387E3685974A13672531D2BF98349">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>257</LineStart>
<Snippet>        Map&lt;String, Object&gt; results = null;
        try {
            results = dispatcher.runSync(&quot;renderContentPdf&quot;, mapIn);
        } catch (ServiceAuthException e) {
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, e.toString());</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1C85B63C-0870-45B8-9909-86BA43F68B05" iid="6887111DDCB6C0BC0C6E6BC28F9C92E0">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method closeEditWrap() in RenderContentAsText.java sends unvalidated data to a web browser on line 244, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>RenderContentAsText.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderContentAsText.java</FilePath>
<LineStart>244</LineStart>
<Snippet>                ServletContext servletContext = request.getSession().getServletContext();
                RequestHandler rh = (RequestHandler) servletContext.getAttribute(&quot;_REQUEST_HANDLER_&quot;);
                out.append(rh.makeLink(request, response, &quot;/&quot; + fullRequest, false, false, true));
                out.write(&quot;\&quot;&gt;Edit&lt;/a&gt;&quot;);
                out.write(&quot;&lt;/div&gt;&quot;);</Snippet>
                            </Primary>
                            <Source>
<FileName>AbstractOFBizAuthenticationHandler.java</FileName>
<FilePath>specialpurpose/ldap/src/org/ofbiz/ldap/commons/AbstractOFBizAuthenticationHandler.java</FilePath>
<LineStart>129</LineStart>
<Snippet>
        try {
            loginResult = dispatcher.runSync(&quot;userLogin&quot;, UtilMisc.toMap(&quot;login.username&quot;, username, &quot;login.password&quot;, password, &quot;visitId&quot;, visitId, &quot;locale&quot;, UtilHttp.getLocale(request)));
        } catch (GenericServiceException e) {
            throw new GenericServiceException(e.getLocalizedMessage());</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="8AE35199C5A69DF2F93145C2C645239A">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>GenericWebEvent.java</FileName>
<FilePath>framework/webtools/src/org/ofbiz/webtools/GenericWebEvent.java</FilePath>
<LineStart>135</LineStart>
<Snippet>            }

            String fval = request.getParameter(field.getName());
            if (UtilValidate.isNotEmpty(fval)) {
                try {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="7C841476A9FEF7A8C95F24DCF49F018E">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method close() in OfbizUrlTransform.java sends unvalidated data to a web browser on line 205, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>OfbizUrlTransform.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/ftl/OfbizUrlTransform.java</FilePath>
<LineStart>205</LineStart>
<Snippet>                        String requestUrl = buf.toString();
                        newURL.append(requestUrl);
                        out.write(newURL.toString());
                    } else if (req != null) {
                        HttpServletRequest request = (HttpServletRequest) req.getWrappedObject();</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceEventHandler.java</FilePath>
<LineStart>337</LineStart>
<Snippet>                dispatcher.runAsync(serviceName, serviceContext);
            } else {
                result = dispatcher.runSync(serviceName, serviceContext);
            }
        } catch (ServiceAuthException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="23A70C0349880158E97F9E6621354483">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 124, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>124</LineStart>
<Snippet>            if (s.charAt(i) == '\n') {
                checkAfterNewline();
                super.write(s, offset, i - offset + 1);
                offset = i + 1;
                lastWasNewline = true;</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>312</LineStart>
<Snippet>            contentCtx.put(&quot;fromDate&quot;, UtilDateTime.nowTimestamp());
            contentCtx.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; contentResult = dispatcher.runSync(&quot;createContent&quot;, contentCtx);
            contentId = contentResult.get(&quot;contentId&quot;).toString();
        } catch (Exception e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="686F7DED8B2909C20E8BEB115BF90B03">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 130, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>130</LineStart>
<Snippet>        }
        checkAfterNewline();
        super.write(s, offset, i - offset);
    }
}</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>693</LineStart>
<Snippet>            return &quot;error&quot;;
        }
        String orderId = request.getParameter(&quot;orderId_o_0&quot;);
        // set the order id if supplied
        if (UtilValidate.isNotEmpty(orderId)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="105A7C7C2408A7A8092A59B446D9D3AB">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 115, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>115</LineStart>
<Snippet>    @Override
    public void write(String s) throws IOException {
        write(s, 0, s.length());
    }
</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>693</LineStart>
<Snippet>            return &quot;error&quot;;
        }
        String orderId = request.getParameter(&quot;orderId_o_0&quot;);
        // set the order id if supplied
        if (UtilValidate.isNotEmpty(orderId)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="12AF265A-8085-459E-A9C9-E0922DFFE1F5" iid="79984A107FCB771C3CB01A9702B2B029">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>257</LineStart>
<Snippet>        Map&lt;String, Object&gt; results = null;
        try {
            results = dispatcher.runSync(&quot;renderContentPdf&quot;, mapIn);
        } catch (ServiceAuthException e) {
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, e.toString());</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="F4DC45D041CD6B13425C0297BA5A5D07">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method openEditWrap() in RenderContentTransform.java sends unvalidated data to a web browser on line 129, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>RenderContentTransform.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderContentTransform.java</FilePath>
<LineStart>129</LineStart>
<Snippet>            public void openEditWrap(Writer out, String editStyle) throws IOException {
                String divStr = &quot;&lt;div class=\&quot;&quot; + editStyle + &quot;\&quot;&gt;&quot;;
                out.write(divStr);
            }
</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>119</LineStart>
<Snippet>            contentRevisionMap.put(&quot;contentId&quot;, contentId);
            contentRevisionMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentRevisionAndItem&quot;, contentRevisionMap);
            keySet = result.keySet();
            iter = keySet.iterator();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="4B58814AA50FE13F4063100B078561BD">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 130, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>130</LineStart>
<Snippet>        }
        checkAfterNewline();
        super.write(s, offset, i - offset);
    }
}</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>303</LineStart>
<Snippet>            dataResourceCtx.put(&quot;mimeTypeId&quot;, &quot;image/png&quot;);
            dataResourceCtx.put(&quot;isPublic&quot;, &quot;Y&quot;);
            Map&lt;String, Object&gt; dataResourceResult = dispatcher.runSync(&quot;createDataResource&quot;, dataResourceCtx);
            dataResourceId = dataResourceResult.get(&quot;dataResourceId&quot;).toString();
            //create content</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF" iid="57D9D4EB5AC0CB78DDCA74D7C2E45E61">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method run() in InputValue.java sends unvalidated data to a web browser on line 145, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>InputValue.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/pseudotag/InputValue.java</FilePath>
<LineStart>145</LineStart>
<Snippet>                inputValue + &quot;\&quot;&quot;);
        } else {
            pageContext.getOut().print(inputValue);
        }
    }</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceEventHandler.java</FilePath>
<LineStart>337</LineStart>
<Snippet>                dispatcher.runAsync(serviceName, serviceContext);
            } else {
                result = dispatcher.runSync(serviceName, serviceContext);
            }
        } catch (ServiceAuthException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="D027DAA9-A3BE-49E4-BDBF-3DFF657F84CA" iid="17BE5C83BA0FEBFF9E27560795D08822">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>WebShoppingCart.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/WebShoppingCart.java</FilePath>
<LineStart>49</LineStart>
<Snippet>                (currencyUom != null ? currencyUom : ProductStoreWorker.getStoreCurrencyUomId(request)),
                request.getParameter(&quot;billToCustomerPartyId&quot;),
                (request.getParameter(&quot;supplierPartyId&quot;) != null ? request.getParameter(&quot;supplierPartyId&quot;) : request.getParameter(&quot;billFromVendorPartyId&quot;)));

        HttpSession session = request.getSession(true);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="461E6BDA153B685A5F5163C868622049">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 115, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>115</LineStart>
<Snippet>    @Override
    public void write(String s) throws IOException {
        write(s, 0, s.length());
    }
</Snippet>
                            </Primary>
                            <Source>
<FileName>WebPosEvents.java</FileName>
<FilePath>specialpurpose/webpos/src/org/ofbiz/webpos/WebPosEvents.java</FilePath>
<LineStart>58</LineStart>
<Snippet>        
        // get the posTerminalId
        String posTerminalId = (String) request.getParameter(&quot;posTerminalId&quot;);
        session.removeAttribute(&quot;shoppingCart&quot;);
        session.removeAttribute(&quot;webPosSession&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="E34E6386DF83E5B2F80654B2E619DCC4">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>CommonEvents.java</FileName>
<FilePath>framework/common/src/org/ofbiz/common/CommonEvents.java</FilePath>
<LineStart>231</LineStart>
<Snippet>    /** Simple event to set the users per-session currency uom value */
    public static String setSessionCurrencyUom(HttpServletRequest request, HttpServletResponse response) {
        String currencyUom = request.getParameter(&quot;currencyUom&quot;);
        if (UtilValidate.isNotEmpty(currencyUom)) {
            // update the session</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="7A63954732BDFA8E4DF02FA6EB29C6ED">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>104</LineStart>
<Snippet>        persistMap.put(&quot;userLogin&quot;, userLogin);
        try {
            Map&lt;String, Object&gt; persistResult = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, persistMap);
            contentId = (String)persistResult.get(&quot;contentId&quot;);
            //request.setAttribute(&quot;contentId&quot;, contentId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="6BAC7677FF107F7FCF6723387D303437">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>347</LineStart>
<Snippet>            return &quot;error&quot;;
        }
        String frameContentId = request.getParameter(&quot;frameContentId&quot;);
        String frameDataResourceId = request.getParameter(&quot;frameDataResourceId&quot;);
        </Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1C85B63C-0870-45B8-9909-86BA43F68B05" iid="D77B72721EE52AF5DF4267109BEB4288">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method closeEditWrap() in RenderContentTransform.java sends unvalidated data to a web browser on line 144, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>RenderContentTransform.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderContentTransform.java</FilePath>
<LineStart>144</LineStart>
<Snippet>                ServletContext servletContext = request.getSession().getServletContext();
                RequestHandler rh = (RequestHandler) servletContext.getAttribute(&quot;_REQUEST_HANDLER_&quot;);
                out.append(rh.makeLink(request, response, &quot;/&quot; + fullRequest, false, false, true));
                out.write(&quot;\&quot;&gt;Edit&lt;/a&gt;&quot;);
                out.write(&quot;&lt;/div&gt;&quot;);</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceEventHandler.java</FilePath>
<LineStart>337</LineStart>
<Snippet>                dispatcher.runAsync(serviceName, serviceContext);
            } else {
                result = dispatcher.runSync(serviceName, serviceContext);
            }
        } catch (ServiceAuthException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="12AF265A-8085-459E-A9C9-E0922DFFE1F5" iid="826E81B0332633FBC45C655655AB8012">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1388</LineStart>
<Snippet>        ShoppingCart cart = null;
        try {
            Map&lt;String, Object&gt; outMap = dispatcher.runSync(&quot;loadCartFromOrder&quot;,
                                                UtilMisc.&lt;String, Object&gt;toMap(&quot;orderId&quot;, orderId,
                                                        &quot;skipProductChecks&quot;, Boolean.TRUE, // the products have already been checked in the order, no need to check their validity again</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="307A879C7F6808B598CD9ADB2CD800DC">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>TrackingCodeEvents.java</FileName>
<FilePath>applications/marketing/src/org/ofbiz/marketing/tracking/TrackingCodeEvents.java</FilePath>
<LineStart>374</LineStart>
<Snippet>        if (UtilValidate.isEmpty(trackingCodeId)) trackingCodeId = request.getParameter(&quot;atc&quot;);
        if (UtilValidate.isEmpty(trackingCodeId)) {
            Cookie[] cookies = request.getCookies();
            if (cookies != null) {
                for (Cookie cookie : cookies) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="62F88E80F9DDBEBFF2A237D151E8D172">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method render() in Section.java sends unvalidated data to a web browser on line 100, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Section.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/region/Section.java</FilePath>
<LineStart>100</LineStart>
<Snippet>                    response.getOutputStream().print(content);
                } else {
                    response.getWriter().print(content);
                }
            } else if (&quot;default&quot;.equals(type) || &quot;region&quot;.equals(type) || &quot;resource&quot;.equals(type) || &quot;jpublish&quot;.equals(type)) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceEventHandler.java</FilePath>
<LineStart>337</LineStart>
<Snippet>                dispatcher.runAsync(serviceName, serviceContext);
            } else {
                result = dispatcher.runSync(serviceName, serviceContext);
            }
        } catch (ServiceAuthException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="BC009024E4D196E63370603EFF03B3C3">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CommonEvents.java</FileName>
<FilePath>framework/common/src/org/ofbiz/common/CommonEvents.java</FilePath>
<LineStart>179</LineStart>
<Snippet>     * setting should be passed as a &quot;newLocale&quot; request parameter. */
    public static String setSessionLocale(HttpServletRequest request, HttpServletResponse response) {
        String localeString = request.getParameter(&quot;newLocale&quot;);
        if (UtilValidate.isNotEmpty(localeString)) {
            UtilHttp.setLocale(request, localeString);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="76F7C5DF-850D-4AC8-A3FE-8AE7AABFB50E" iid="C153A29E8E9EE6668504BA782B83F74F">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method streamContent() in UtilHttp.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>1033</LineStart>
<Snippet>        try {
            while ((read = bis.read(buffer, 0, buffer.length)) != -1) {
                bos.write(buffer, 0, read);
            }
        } catch (IOException e) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceMultiEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceMultiEventHandler.java</FilePath>
<LineStart>308</LineStart>
<Snippet>                Map&lt;String, Object&gt; result = null;
                try {
                    result = dispatcher.runSync(serviceName, serviceContext);
                } catch (ServiceAuthException e) {
                    // not logging since the service engine already did</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="1A4A03D669C3409954ADEE3ECF4464C4">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceEventHandler.java</FilePath>
<LineStart>337</LineStart>
<Snippet>                dispatcher.runAsync(serviceName, serviceContext);
            } else {
                result = dispatcher.runSync(serviceName, serviceContext);
            }
        } catch (ServiceAuthException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="47620C95-01F7-474F-9944-4C54A9A43679" iid="2CEEA643F78FABBD9F56117240EC3808">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method closeEditWrap() in RenderSubContentCacheTransform.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RenderSubContentCacheTransform.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderSubContentCacheTransform.java</FilePath>
<LineStart>275</LineStart>
<Snippet>                ServletContext servletContext = request.getSession().getServletContext();
                RequestHandler rh = (RequestHandler) servletContext.getAttribute(&quot;_REQUEST_HANDLER_&quot;);
                out.append(rh.makeLink(request, response, &quot;/&quot; + fullRequest, false, false, true));
                out.write(&quot;\&quot;&gt;Edit&lt;/a&gt;&quot;);
                out.write(&quot;&lt;/div&gt;&quot;);</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>119</LineStart>
<Snippet>            contentRevisionMap.put(&quot;contentId&quot;, contentId);
            contentRevisionMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentRevisionAndItem&quot;, contentRevisionMap);
            keySet = result.keySet();
            iter = keySet.iterator();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="47620C95-01F7-474F-9944-4C54A9A43679" iid="C566A74088AF8EA026536B69408525A3">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method closeEditWrap() in RenderSubContentCacheTransform.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RenderSubContentCacheTransform.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderSubContentCacheTransform.java</FilePath>
<LineStart>275</LineStart>
<Snippet>                ServletContext servletContext = request.getSession().getServletContext();
                RequestHandler rh = (RequestHandler) servletContext.getAttribute(&quot;_REQUEST_HANDLER_&quot;);
                out.append(rh.makeLink(request, response, &quot;/&quot; + fullRequest, false, false, true));
                out.write(&quot;\&quot;&gt;Edit&lt;/a&gt;&quot;);
                out.write(&quot;&lt;/div&gt;&quot;);</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>104</LineStart>
<Snippet>        persistMap.put(&quot;userLogin&quot;, userLogin);
        try {
            Map&lt;String, Object&gt; persistResult = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, persistMap);
            contentId = (String)persistResult.get(&quot;contentId&quot;);
            //request.setAttribute(&quot;contentId&quot;, contentId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="0E3FC0D53747A385129849E607E44B14">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method close() in OfbizUrlTransform.java sends unvalidated data to a web browser on line 205, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>OfbizUrlTransform.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/ftl/OfbizUrlTransform.java</FilePath>
<LineStart>205</LineStart>
<Snippet>                        String requestUrl = buf.toString();
                        newURL.append(requestUrl);
                        out.write(newURL.toString());
                    } else if (req != null) {
                        HttpServletRequest request = (HttpServletRequest) req.getWrappedObject();</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>104</LineStart>
<Snippet>        persistMap.put(&quot;userLogin&quot;, userLogin);
        try {
            Map&lt;String, Object&gt; persistResult = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, persistMap);
            contentId = (String)persistResult.get(&quot;contentId&quot;);
            //request.setAttribute(&quot;contentId&quot;, contentId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="12AF265A-8085-459E-A9C9-E0922DFFE1F5" iid="F29D4EDD5AE615E5133A7FA75395F967">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>505</LineStart>
<Snippet>        Map&lt;String, Object&gt; ftlResults = null;
        try {
            ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
        } catch (ServiceAuthException e) {
            String msg = e.getMessage();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="8A2A66F292294F42912F624B8BC396F3">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 115, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>115</LineStart>
<Snippet>    @Override
    public void write(String s) throws IOException {
        write(s, 0, s.length());
    }
</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>268</LineStart>
<Snippet>        if (!&quot;image/png&quot;.equals(mimType)) {
            session.setAttribute(&quot;frameContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
            session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;The selected image type is incorrect, please select the image type *.PNG to upload.&quot;);
            return &quot;error&quot;;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="75CA7134-B6BE-444A-9815-E739432FCA47" iid="BA9B89C3F791FE9A8A1FB9678AFA37D4">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method run() in EntityField.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>EntityField.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/pseudotag/EntityField.java</FilePath>
<LineStart>249</LineStart>
<Snippet>            if (prefix != null)
                out.print(prefix);
            out.print(fieldString);
            if (suffix != null)
                out.print(suffix);</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceEventHandler.java</FilePath>
<LineStart>337</LineStart>
<Snippet>                dispatcher.runAsync(serviceName, serviceContext);
            } else {
                result = dispatcher.runSync(serviceName, serviceContext);
            }
        } catch (ServiceAuthException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="CF641C5FDB9EACB972517217E4A63F17">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method openEditWrap() in RenderContentAsText.java sends unvalidated data to a web browser on line 224, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>RenderContentAsText.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderContentAsText.java</FilePath>
<LineStart>224</LineStart>
<Snippet>            public void openEditWrap(Writer out, String editStyle) throws IOException {
                String divStr = &quot;&lt;div class=\&quot;&quot; + editStyle + &quot;\&quot;&gt;&quot;;
                out.write(divStr);
            }
</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>575</LineStart>
<Snippet>        while (e.hasMoreElements()) {
            String name = e.nextElement();
            request.setAttribute(name, request.getParameter(name));
        }
    }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="AEABDAB9F9A94EAE7D2BD1E53A63018F">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>127</LineStart>
<Snippet>
            Object value = null;
            String[] paramArr = request.getParameterValues(name);
            if (paramArr != null) {
                if (paramArr.length &gt; 1) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="CFC0B9F25EC6F8B836C8BA1F833365B7">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>TrackingCodeEvents.java</FileName>
<FilePath>applications/marketing/src/org/ofbiz/marketing/tracking/TrackingCodeEvents.java</FilePath>
<LineStart>93</LineStart>
<Snippet>     */
    public static String checkPartnerTrackingCodeUrlParam(HttpServletRequest request, HttpServletResponse response) {
        String trackingCodeId = request.getParameter(&quot;ptc&quot;);

        if (UtilValidate.isNotEmpty(trackingCodeId)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="08B498FAFB4CA632A6CFA84FEDCBC43F">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>GenericWebEvent.java</FileName>
<FilePath>framework/webtools/src/org/ofbiz/webtools/GenericWebEvent.java</FilePath>
<LineStart>183</LineStart>
<Snippet>            }

            String fval = request.getParameter(field.getName());
            if (UtilValidate.isNotEmpty(fval)) {
                try {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="75CA7134-B6BE-444A-9815-E739432FCA47" iid="8E5FA2010DD6C0F828B352415A25142D">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method run() in InputValue.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>InputValue.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/pseudotag/InputValue.java</FilePath>
<LineStart>143</LineStart>
<Snippet>            inputValue = UtilFormatOut.replaceString(inputValue, &quot;\&quot;&quot;, &quot;&amp;quot;&quot;);
            pageContext.getOut().print(&quot;name=\&quot;&quot; + paramName + &quot;\&quot; value=\&quot;&quot; +
                inputValue + &quot;\&quot;&quot;);
        } else {
            pageContext.getOut().print(inputValue);</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>505</LineStart>
<Snippet>        Map&lt;String, Object&gt; ftlResults = null;
        try {
            ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
        } catch (ServiceAuthException e) {
            String msg = e.getMessage();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="D027DAA9-A3BE-49E4-BDBF-3DFF657F84CA" iid="5962BF57C41E5E0F22B1695AB842B6DA">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>184</LineStart>
<Snippet>
    public static Map&lt;String, Object&gt; getPathInfoOnlyParameterMap(HttpServletRequest request, Set&lt;? extends String&gt; nameSet, Boolean onlyIncludeOrSkip) {
        return getPathInfoOnlyParameterMap(request.getPathInfo(), nameSet, onlyIncludeOrSkip);
    }
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="CA79E9932444105A277317551DFE34B6">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1354</LineStart>
<Snippet>        ShoppingCart cart = null;
        try {
            Map&lt;String, Object&gt; outMap = dispatcher.runSync(&quot;loadCartFromQuote&quot;,
                    UtilMisc.&lt;String, Object&gt;toMap(&quot;quoteId&quot;, quoteId,
                            &quot;applyQuoteAdjustments&quot;, &quot;true&quot;,</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="D027DAA9-A3BE-49E4-BDBF-3DFF657F84CA" iid="6E6625A6337F8E604E33A21AA349DC37">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>CatalogUrlServlet.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/category/CatalogUrlServlet.java</FilePath>
<LineStart>80</LineStart>
<Snippet>        Delegator delegator = (Delegator) getServletContext().getAttribute(&quot;delegator&quot;);

        String pathInfo = request.getPathInfo();
        List&lt;String&gt; pathElements = StringUtil.split(pathInfo, &quot;/&quot;);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="C9ACBA6F2E8E99AB6A7B404449ED96FB">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 124, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>124</LineStart>
<Snippet>            if (s.charAt(i) == '\n') {
                checkAfterNewline();
                super.write(s, offset, i - offset + 1);
                offset = i + 1;
                lastWasNewline = true;</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>268</LineStart>
<Snippet>        if (!&quot;image/png&quot;.equals(mimType)) {
            session.setAttribute(&quot;frameContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
            session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;The selected image type is incorrect, please select the image type *.PNG to upload.&quot;);
            return &quot;error&quot;;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="46610AC2893AC7F68EE96EB76992DE48">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 130, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>130</LineStart>
<Snippet>        }
        checkAfterNewline();
        super.write(s, offset, i - offset);
    }
}</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>104</LineStart>
<Snippet>        persistMap.put(&quot;userLogin&quot;, userLogin);
        try {
            Map&lt;String, Object&gt; persistResult = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, persistMap);
            contentId = (String)persistResult.get(&quot;contentId&quot;);
            //request.setAttribute(&quot;contentId&quot;, contentId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="46BF5F0A5078E4B50524FAA84B1CE84C">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method toJsonObjectList() in ImageManagementServices.java sends unvalidated data to a web browser on line 779, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ImageManagementServices.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/ImageManagementServices.java</FilePath>
<LineStart>779</LineStart>
<Snippet>            try {
                out = response.getWriter();
                out.write(jsonStr);
                out.flush();
            } catch (IOException e) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>119</LineStart>
<Snippet>            contentRevisionMap.put(&quot;contentId&quot;, contentId);
            contentRevisionMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentRevisionAndItem&quot;, contentRevisionMap);
            keySet = result.keySet();
            iter = keySet.iterator();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="F60A42C3047D8A2A3A59FCA228470A72">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method close() in OfbizUrlTransform.java sends unvalidated data to a web browser on line 205, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>OfbizUrlTransform.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/ftl/OfbizUrlTransform.java</FilePath>
<LineStart>205</LineStart>
<Snippet>                        String requestUrl = buf.toString();
                        newURL.append(requestUrl);
                        out.write(newURL.toString());
                    } else if (req != null) {
                        HttpServletRequest request = (HttpServletRequest) req.getWrappedObject();</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1527</LineStart>
<Snippet>        Locale locale = UtilHttp.getLocale(request);

        String productStoreId = request.getParameter(&quot;productStoreId&quot;);

        if (UtilValidate.isNotEmpty(productStoreId)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="E196532E08CFEEE2BC56F2155F5A341D">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CheckOutEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/CheckOutEvents.java</FilePath>
<LineStart>384</LineStart>
<Snippet>        if (UtilValidate.isNotEmpty(taxAuthPartyGeoIds)) {
            try {
                Map&lt;String, Object&gt; createCustomerTaxAuthInfoResult = dispatcher.runSync(&quot;createCustomerTaxAuthInfo&quot;,
                        UtilMisc.toMap(&quot;partyId&quot;, cart.getPartyId(), &quot;taxAuthPartyGeoIds&quot;, taxAuthPartyGeoIds, &quot;partyTaxId&quot;, partyTaxId, &quot;isExempt&quot;, isExempt));
                ServiceUtil.getMessages(request, createCustomerTaxAuthInfoResult, null);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="12AF265A-8085-459E-A9C9-E0922DFFE1F5" iid="2ACED255039F3BF03519EA52A0C9CC97">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>CheckOutHelper.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/CheckOutHelper.java</FilePath>
<LineStart>519</LineStart>
<Snippet>                Map&lt;String, Object&gt; gcResult = null;
                try {
                    gcResult = dispatcher.runSync(&quot;createGiftCard&quot;, gcCtx);
                } catch (GenericServiceException e) {
                    Debug.logError(e, module);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="ECFDD975C8AED884267A1AFE6DB2166F">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method checkAfterNewline() in IndentingWriter.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>58</LineStart>
<Snippet>            if (doSpace) {
                if (doNewline) {
                    super.write(indent.toString(), 0, indent.length());
                } else {
                    super.write(' ');</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceEventHandler.java</FilePath>
<LineStart>337</LineStart>
<Snippet>                dispatcher.runAsync(serviceName, serviceContext);
            } else {
                result = dispatcher.runSync(serviceName, serviceContext);
            }
        } catch (ServiceAuthException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="2DAC96BD73B5F07D03A6FC6FE02B77C8">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method httpEngine() in HttpEngine.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HttpEngine.java</FileName>
<FilePath>framework/service/src/org/ofbiz/service/engine/HttpEngine.java</FilePath>
<LineStart>187</LineStart>
<Snippet>            if (errorMessage.length() &gt; 0) {
                response.setContentLength(errorMessage.length());
                out.write(errorMessage.toString());
            } else {
                response.setContentLength(resultString.length());</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceEventHandler.java</FilePath>
<LineStart>337</LineStart>
<Snippet>                dispatcher.runAsync(serviceName, serviceContext);
            } else {
                result = dispatcher.runSync(serviceName, serviceContext);
            }
        } catch (ServiceAuthException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="CB99D8E84EC6CF4D9FE3820387EAC50F">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1354</LineStart>
<Snippet>        ShoppingCart cart = null;
        try {
            Map&lt;String, Object&gt; outMap = dispatcher.runSync(&quot;loadCartFromQuote&quot;,
                    UtilMisc.&lt;String, Object&gt;toMap(&quot;quoteId&quot;, quoteId,
                            &quot;applyQuoteAdjustments&quot;, &quot;true&quot;,</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="D027DAA9-A3BE-49E4-BDBF-3DFF657F84CA" iid="D42EED3C73B18056508AB6483D10079A">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>LoginEvents.java</FileName>
<FilePath>applications/securityext/src/org/ofbiz/securityext/login/LoginEvents.java</FilePath>
<LineStart>77</LineStart>
<Snippet>
            String username = request.getParameter(&quot;USERNAME&quot;);
            String password = request.getParameter(&quot;PASSWORD&quot;);

            if ((username != null) &amp;&amp; (&quot;true&quot;.equalsIgnoreCase(UtilProperties.getPropertyValue(&quot;security.properties&quot;, &quot;username.lowercase&quot;)))) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="15A7ABB785436674E3E20BF887215F83">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>130</LineStart>
<Snippet>        }
        checkAfterNewline();
        super.write(s, offset, i - offset);
    }
}</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>505</LineStart>
<Snippet>        Map&lt;String, Object&gt; ftlResults = null;
        try {
            ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
        } catch (ServiceAuthException e) {
            String msg = e.getMessage();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="970D000AC3632B594A3A3717F1144871">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>409</LineStart>
<Snippet>        }
        
        String frameContentId = request.getParameter(&quot;frameContentId&quot;);
        Delegator delegator = (Delegator) request.getAttribute(&quot;delegator&quot;);
        </Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="4D7174CA67563C0EC7F70F0C35E67A06">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>127</LineStart>
<Snippet>
            Object value = null;
            String[] paramArr = request.getParameterValues(name);
            if (paramArr != null) {
                if (paramArr.length &gt; 1) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="BA8A6704D20B1D80B730A9C23837DDDC">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>945</LineStart>
<Snippet>            newCart = cartList.remove(cartIndex);
        } else {
            String productStoreId = request.getParameter(&quot;productStoreId&quot;);
            if (UtilValidate.isNotEmpty(productStoreId)) {
                session.setAttribute(&quot;productStoreId&quot;, productStoreId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="A588F56B032A8BABCA22EAB64B04F206">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>TrackingCodeEvents.java</FileName>
<FilePath>applications/marketing/src/org/ofbiz/marketing/tracking/TrackingCodeEvents.java</FilePath>
<LineStart>372</LineStart>
<Snippet>
        String trackingCodeId = request.getParameter(&quot;autoTrackingCode&quot;);
        if (UtilValidate.isEmpty(trackingCodeId)) trackingCodeId = request.getParameter(&quot;atc&quot;);
        if (UtilValidate.isEmpty(trackingCodeId)) {
            Cookie[] cookies = request.getCookies();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="529E2822991E645DF25D492D0E5E1AE2">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1469</LineStart>
<Snippet>        String quoteId = null;
        try {
            result = dispatcher.runSync(&quot;createQuoteFromCart&quot;,
                    UtilMisc.toMap(&quot;cart&quot;, cart,
                            &quot;userLogin&quot;, userLogin));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="944954D7A349E98E28298A4A5E476345">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>ProductEvents.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/product/ProductEvents.java</FilePath>
<LineStart>805</LineStart>
<Snippet>        //GenericValue userLogin = (GenericValue) request.getSession().getAttribute(&quot;userLogin&quot;);
        String productId = request.getParameter(&quot;productId&quot;);
        String productFeatureId = request.getParameter(&quot;productFeatureId&quot;);

        if (UtilValidate.isEmpty(productId) || UtilValidate.isEmpty(productFeatureId)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792" iid="7173D6EF40A8C2348D244B3EB9D3686C">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method run() in EntityField.java sends unvalidated data to a web browser on line 249, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EntityField.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/pseudotag/EntityField.java</FilePath>
<LineStart>249</LineStart>
<Snippet>            if (prefix != null)
                out.print(prefix);
            out.print(fieldString);
            if (suffix != null)
                out.print(suffix);</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>575</LineStart>
<Snippet>        while (e.hasMoreElements()) {
            String name = e.nextElement();
            request.setAttribute(name, request.getParameter(name));
        }
    }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="9E58CBDAEF88E9C594C7908D95A3F1ED">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>124</LineStart>
<Snippet>            if (s.charAt(i) == '\n') {
                checkAfterNewline();
                super.write(s, offset, i - offset + 1);
                offset = i + 1;
                lastWasNewline = true;</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>575</LineStart>
<Snippet>        while (e.hasMoreElements()) {
            String name = e.nextElement();
            request.setAttribute(name, request.getParameter(name));
        }
    }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="3F9E19BE8A5E436079DC270A1E9B3C5B">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>184</LineStart>
<Snippet>
    public static Map&lt;String, Object&gt; getPathInfoOnlyParameterMap(HttpServletRequest request, Set&lt;? extends String&gt; nameSet, Boolean onlyIncludeOrSkip) {
        return getPathInfoOnlyParameterMap(request.getPathInfo(), nameSet, onlyIncludeOrSkip);
    }
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="6A1C7596FE7873335140ABA037A72E95">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>CoreEvents.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/CoreEvents.java</FilePath>
<LineStart>516</LineStart>
<Snippet>    public static String runService(HttpServletRequest request, HttpServletResponse response) {
        // get the mode and service name
        String serviceName = request.getParameter(&quot;serviceName&quot;);
        String mode = request.getParameter(&quot;mode&quot;);
        Locale locale = UtilHttp.getLocale(request);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="A588F56B032A8BABCA22EAB64B04F205">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>TrackingCodeEvents.java</FileName>
<FilePath>applications/marketing/src/org/ofbiz/marketing/tracking/TrackingCodeEvents.java</FilePath>
<LineStart>372</LineStart>
<Snippet>
        String trackingCodeId = request.getParameter(&quot;autoTrackingCode&quot;);
        if (UtilValidate.isEmpty(trackingCodeId)) trackingCodeId = request.getParameter(&quot;atc&quot;);
        if (UtilValidate.isEmpty(trackingCodeId)) {
            Cookie[] cookies = request.getCookies();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="A833B1526744C360004320A18A66A159">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>575</LineStart>
<Snippet>        while (e.hasMoreElements()) {
            String name = e.nextElement();
            request.setAttribute(name, request.getParameter(name));
        }
    }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="6D09DD021F87A0ED5388A71DDC1349D9">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>268</LineStart>
<Snippet>        if (!&quot;image/png&quot;.equals(mimType)) {
            session.setAttribute(&quot;frameContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
            session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;The selected image type is incorrect, please select the image type *.PNG to upload.&quot;);
            return &quot;error&quot;;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="750B6A5F94B9AB74DDB88C6F001ED822">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method invoke() in SOAPEventHandler.java sends unvalidated data to a web browser on line 136, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SOAPEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/SOAPEventHandler.java</FilePath>
<LineStart>136</LineStart>
<Snippet>                    sb.append(&quot;&lt;/ul&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;&quot;);

                    writer.write(sb.toString());
                    writer.flush();
                    return null;</Snippet>
                            </Primary>
                            <Source>
<FileName>SOAPEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/SOAPEventHandler.java</FilePath>
<LineStart>328</LineStart>
<Snippet>        uri.append(request.getServletPath());

        String reqInfo = RequestHandler.getRequestUri(request.getPathInfo());
        if (!reqInfo.startsWith(&quot;/&quot;)) {
            reqInfo = &quot;/&quot; + reqInfo;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="2E3C0BD127711B6ECA83C5D70E1B6B1C">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ProductEvents.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/product/ProductEvents.java</FilePath>
<LineStart>805</LineStart>
<Snippet>        //GenericValue userLogin = (GenericValue) request.getSession().getAttribute(&quot;userLogin&quot;);
        String productId = request.getParameter(&quot;productId&quot;);
        String productFeatureId = request.getParameter(&quot;productFeatureId&quot;);

        if (UtilValidate.isEmpty(productId) || UtilValidate.isEmpty(productFeatureId)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="5A4DEC21C92A99994E15B3435B2C1250">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method openEditWrap() in RenderContentAsText.java sends unvalidated data to a web browser on line 224, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>RenderContentAsText.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderContentAsText.java</FilePath>
<LineStart>224</LineStart>
<Snippet>            public void openEditWrap(Writer out, String editStyle) throws IOException {
                String divStr = &quot;&lt;div class=\&quot;&quot; + editStyle + &quot;\&quot;&gt;&quot;;
                out.write(divStr);
            }
</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>119</LineStart>
<Snippet>            contentRevisionMap.put(&quot;contentId&quot;, contentId);
            contentRevisionMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentRevisionAndItem&quot;, contentRevisionMap);
            keySet = result.keySet();
            iter = keySet.iterator();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="56344531108A482D3C1E6DE33037C8B8">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method close() in OfbizUrlTransform.java sends unvalidated data to a web browser on line 205, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>OfbizUrlTransform.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/ftl/OfbizUrlTransform.java</FilePath>
<LineStart>205</LineStart>
<Snippet>                        String requestUrl = buf.toString();
                        newURL.append(requestUrl);
                        out.write(newURL.toString());
                    } else if (req != null) {
                        HttpServletRequest request = (HttpServletRequest) req.getWrappedObject();</Snippet>
                            </Primary>
                            <Source>
<FileName>WebPosEvents.java</FileName>
<FilePath>specialpurpose/webpos/src/org/ofbiz/webpos/WebPosEvents.java</FilePath>
<LineStart>58</LineStart>
<Snippet>        
        // get the posTerminalId
        String posTerminalId = (String) request.getParameter(&quot;posTerminalId&quot;);
        session.removeAttribute(&quot;shoppingCart&quot;);
        session.removeAttribute(&quot;webPosSession&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="45C155C47B8A8FFF73ACF0DDA82686BF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method httpEngine() in HttpEngine.java sends unvalidated data to a web browser on line 187, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>HttpEngine.java</FileName>
<FilePath>framework/service/src/org/ofbiz/service/engine/HttpEngine.java</FilePath>
<LineStart>187</LineStart>
<Snippet>            if (errorMessage.length() &gt; 0) {
                response.setContentLength(errorMessage.length());
                out.write(errorMessage.toString());
            } else {
                response.setContentLength(resultString.length());</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>104</LineStart>
<Snippet>        persistMap.put(&quot;userLogin&quot;, userLogin);
        try {
            Map&lt;String, Object&gt; persistResult = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, persistMap);
            contentId = (String)persistResult.get(&quot;contentId&quot;);
            //request.setAttribute(&quot;contentId&quot;, contentId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="20FEDC655B1A71B80921543AD9A22671">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 115, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>115</LineStart>
<Snippet>    @Override
    public void write(String s) throws IOException {
        write(s, 0, s.length());
    }
</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>303</LineStart>
<Snippet>            dataResourceCtx.put(&quot;mimeTypeId&quot;, &quot;image/png&quot;);
            dataResourceCtx.put(&quot;isPublic&quot;, &quot;Y&quot;);
            Map&lt;String, Object&gt; dataResourceResult = dispatcher.runSync(&quot;createDataResource&quot;, dataResourceCtx);
            dataResourceId = dataResourceResult.get(&quot;dataResourceId&quot;).toString();
            //create content</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="6D59B8969C15A6D7EFA87AAAE2C7FFCD">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 130, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>130</LineStart>
<Snippet>        }
        checkAfterNewline();
        super.write(s, offset, i - offset);
    }
}</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>127</LineStart>
<Snippet>
            Object value = null;
            String[] paramArr = request.getParameterValues(name);
            if (paramArr != null) {
                if (paramArr.length &gt; 1) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="D027DAA9-A3BE-49E4-BDBF-3DFF657F84CA" iid="F3B35D995F4CA79AAF1AB36AB601FCF1">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>WebPosEvents.java</FileName>
<FilePath>specialpurpose/webpos/src/org/ofbiz/webpos/WebPosEvents.java</FilePath>
<LineStart>94</LineStart>
<Snippet>            GenericValue productStore = ProductStoreWorker.getProductStore(productStoreId, delegator);
            String facilityId = null;
            String currencyUomId = request.getParameter(&quot;currencyUomId&quot;);

            if (UtilValidate.isNotEmpty(productStore)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="A1AB44F1E5D7388C76C475BCC6BEEFB5">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>SearchEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/search/SearchEvents.java</FilePath>
<LineStart>60</LineStart>
<Snippet>        serviceInMap.put(&quot;contentId&quot;, siteId);
        try {
            result = dispatcher.runSync(&quot;indexTree&quot;, serviceInMap);
        } catch (GenericServiceException e) {
            String errorMsg = &quot;Error calling the indexTree service.&quot; + e.toString();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="12AF265A-8085-459E-A9C9-E0922DFFE1F5" iid="8AE47766A607E7774854871CC822C142">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>CoreEvents.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/CoreEvents.java</FilePath>
<LineStart>412</LineStart>
<Snippet>        try {
            if (null!=request.getParameter(&quot;_RUN_SYNC_&quot;) &amp;&amp; request.getParameter(&quot;_RUN_SYNC_&quot;).equals(&quot;Y&quot;)) {
                syncServiceResult = dispatcher.runSync(serviceName, serviceContext);
            } else {
                dispatcher.schedule(jobName, poolName, serviceName, serviceContext, startTime, frequency, interval, count, endTime, maxRetry);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="DE3E11DDBBE40FB0B91B83A3C51816C2">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method checkAfterNewline() in IndentingWriter.java sends unvalidated data to a web browser on line 58, which can result in the browser executing malicious code.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>58</LineStart>
<Snippet>            if (doSpace) {
                if (doNewline) {
                    super.write(indent.toString(), 0, indent.length());
                } else {
                    super.write(' ');</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>575</LineStart>
<Snippet>        while (e.hasMoreElements()) {
            String name = e.nextElement();
            request.setAttribute(name, request.getParameter(name));
        }
    }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="DB7F236B8017C77A4BC882B81BCD4806">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>268</LineStart>
<Snippet>        if (!&quot;image/png&quot;.equals(mimType)) {
            session.setAttribute(&quot;frameContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
            session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;The selected image type is incorrect, please select the image type *.PNG to upload.&quot;);
            return &quot;error&quot;;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="8AF5C09C6DF6925CE2B7EDB390E16A67">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>ICalWorker.java</FileName>
<FilePath>applications/workeffort/src/org/ofbiz/workeffort/workeffort/ICalWorker.java</FilePath>
<LineStart>285</LineStart>
<Snippet>        HttpSession session = request.getSession();
        LocalDispatcher dispatcher = (LocalDispatcher) request.getAttribute(&quot;dispatcher&quot;);
        Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;userLogin&quot;, serviceMap);
        if (ServiceUtil.isError(result) || ServiceUtil.isFailure(result)) {
            return;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="CF02A37E3516A39EB5ACDE7263141CCF">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method close() in OfbizUrlTransform.java sends unvalidated data to a web browser on line 205, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>OfbizUrlTransform.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/ftl/OfbizUrlTransform.java</FilePath>
<LineStart>205</LineStart>
<Snippet>                        String requestUrl = buf.toString();
                        newURL.append(requestUrl);
                        out.write(newURL.toString());
                    } else if (req != null) {
                        HttpServletRequest request = (HttpServletRequest) req.getWrappedObject();</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>409</LineStart>
<Snippet>        }
        
        String frameContentId = request.getParameter(&quot;frameContentId&quot;);
        Delegator delegator = (Delegator) request.getAttribute(&quot;delegator&quot;);
        </Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="E83E29D6FEC816FDD0CC93BC06CC567C">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>347</LineStart>
<Snippet>            return &quot;error&quot;;
        }
        String frameContentId = request.getParameter(&quot;frameContentId&quot;);
        String frameDataResourceId = request.getParameter(&quot;frameDataResourceId&quot;);
        </Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="6962B502597E7B7BCA39F94F050B2081">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>CatalogUrlServlet.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/category/CatalogUrlServlet.java</FilePath>
<LineStart>80</LineStart>
<Snippet>        Delegator delegator = (Delegator) getServletContext().getAttribute(&quot;delegator&quot;);

        String pathInfo = request.getPathInfo();
        List&lt;String&gt; pathElements = StringUtil.split(pathInfo, &quot;/&quot;);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="82753D8F3FD486CE982384269ECD216B">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method httpEngine() in HttpEngine.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HttpEngine.java</FileName>
<FilePath>framework/service/src/org/ofbiz/service/engine/HttpEngine.java</FilePath>
<LineStart>187</LineStart>
<Snippet>            if (errorMessage.length() &gt; 0) {
                response.setContentLength(errorMessage.length());
                out.write(errorMessage.toString());
            } else {
                response.setContentLength(resultString.length());</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>575</LineStart>
<Snippet>        while (e.hasMoreElements()) {
            String name = e.nextElement();
            request.setAttribute(name, request.getParameter(name));
        }
    }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="12AF265A-8085-459E-A9C9-E0922DFFE1F5" iid="BA5F185E816D83B76248ABF041ECACDC">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceMultiEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceMultiEventHandler.java</FilePath>
<LineStart>308</LineStart>
<Snippet>                Map&lt;String, Object&gt; result = null;
                try {
                    result = dispatcher.runSync(serviceName, serviceContext);
                } catch (ServiceAuthException e) {
                    // not logging since the service engine already did</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="D027DAA9-A3BE-49E4-BDBF-3DFF657F84CA" iid="52AB4007127393573309EAC60A43A9B7">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>575</LineStart>
<Snippet>        while (e.hasMoreElements()) {
            String name = e.nextElement();
            request.setAttribute(name, request.getParameter(name));
        }
    }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="8320ED5F78F93A60FB18A9AEE081ECEB">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>559</LineStart>
<Snippet>        session.setAttribute(&quot;_CLIENT_REQUEST_&quot;, fullRequestUrl.toString());
        session.setAttribute(&quot;_CLIENT_USER_AGENT_&quot;, request.getHeader(&quot;User-Agent&quot;) != null ? request.getHeader(&quot;User-Agent&quot;) : &quot;&quot;);
        session.setAttribute(&quot;_CLIENT_REFERER_&quot;, request.getHeader(&quot;Referer&quot;) != null ? request.getHeader(&quot;Referer&quot;) : &quot;&quot;);

        session.setAttribute(&quot;_CLIENT_FORWARDED_FOR_&quot;, request.getHeader(&quot;X-Forwarded-For&quot;));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="76F7C5DF-850D-4AC8-A3FE-8AE7AABFB50E" iid="B46E5629A6CD4AFA095E51862B11F2AA">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method streamContent() in UtilHttp.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>1033</LineStart>
<Snippet>        try {
            while ((read = bis.read(buffer, 0, buffer.length)) != -1) {
                bos.write(buffer, 0, read);
            }
        } catch (IOException e) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>575</LineStart>
<Snippet>        while (e.hasMoreElements()) {
            String name = e.nextElement();
            request.setAttribute(name, request.getParameter(name));
        }
    }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="973835221FED5C38BC5275B7AEB982DF">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 115, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>115</LineStart>
<Snippet>    @Override
    public void write(String s) throws IOException {
        write(s, 0, s.length());
    }
</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>945</LineStart>
<Snippet>            newCart = cartList.remove(cartIndex);
        } else {
            String productStoreId = request.getParameter(&quot;productStoreId&quot;);
            if (UtilValidate.isNotEmpty(productStoreId)) {
                session.setAttribute(&quot;productStoreId&quot;, productStoreId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="AC26F93EB486A595C0C1CA3549036FE9">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 124, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>124</LineStart>
<Snippet>            if (s.charAt(i) == '\n') {
                checkAfterNewline();
                super.write(s, offset, i - offset + 1);
                offset = i + 1;
                lastWasNewline = true;</Snippet>
                            </Primary>
                            <Source>
<FileName>WebPosEvents.java</FileName>
<FilePath>specialpurpose/webpos/src/org/ofbiz/webpos/WebPosEvents.java</FilePath>
<LineStart>94</LineStart>
<Snippet>            GenericValue productStore = ProductStoreWorker.getProductStore(productStoreId, delegator);
            String facilityId = null;
            String currencyUomId = request.getParameter(&quot;currencyUomId&quot;);

            if (UtilValidate.isNotEmpty(productStore)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="1678ED8ABAB9B5E82233CB0E0371B102">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>688</LineStart>
<Snippet>        
        // TODO: the code below here needs some cleanups
        String billToCustomerPartyId = request.getParameter(&quot;billToCustomerPartyId_o_0&quot;);
        if (UtilValidate.isEmpty(billToCustomerPartyId) &amp;&amp; UtilValidate.isEmpty(supplierPartyId)) {
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, UtilProperties.getMessage(resource_error, &quot;OrderCouldNotInitPurchaseOrder&quot;, locale));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="12AF265A-8085-459E-A9C9-E0922DFFE1F5" iid="68BA35FDC1E8C1CDE92EB666C482A77C">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>ProductionRunEvents.java</FileName>
<FilePath>applications/manufacturing/src/org/ofbiz/manufacturing/jobshopmgt/ProductionRunEvents.java</FilePath>
<LineStart>94</LineStart>
<Snippet>            inputMap.put(&quot;lotId&quot;, parameters.get(&quot;lotId&quot;));
            inputMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;productionRunDeclareAndProduce&quot;, inputMap);
            if (ServiceUtil.isError(result)) {
                request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, ServiceUtil.getErrorMessage(result));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="E1BFD5BF9DF5C921B8670BC5BEB81F56">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>CommonEvents.java</FileName>
<FilePath>framework/common/src/org/ofbiz/common/CommonEvents.java</FilePath>
<LineStart>179</LineStart>
<Snippet>     * setting should be passed as a &quot;newLocale&quot; request parameter. */
    public static String setSessionLocale(HttpServletRequest request, HttpServletResponse response) {
        String localeString = request.getParameter(&quot;newLocale&quot;);
        if (UtilValidate.isNotEmpty(localeString)) {
            UtilHttp.setLocale(request, localeString);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="ED7DC8423B8C7D59507180A8F3874C53">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceMultiEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceMultiEventHandler.java</FilePath>
<LineStart>308</LineStart>
<Snippet>                Map&lt;String, Object&gt; result = null;
                try {
                    result = dispatcher.runSync(serviceName, serviceContext);
                } catch (ServiceAuthException e) {
                    // not logging since the service engine already did</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="63C3EC7806AB4085C23038DAEE96E047">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>693</LineStart>
<Snippet>            return &quot;error&quot;;
        }
        String orderId = request.getParameter(&quot;orderId_o_0&quot;);
        // set the order id if supplied
        if (UtilValidate.isNotEmpty(orderId)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="078ABB08D9EF4F35B69E42C58995691C">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method render() in Section.java sends unvalidated data to a web browser on line 100, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Section.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/region/Section.java</FilePath>
<LineStart>100</LineStart>
<Snippet>                    response.getOutputStream().print(content);
                } else {
                    response.getWriter().print(content);
                }
            } else if (&quot;default&quot;.equals(type) || &quot;region&quot;.equals(type) || &quot;resource&quot;.equals(type) || &quot;jpublish&quot;.equals(type)) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceMultiEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceMultiEventHandler.java</FilePath>
<LineStart>308</LineStart>
<Snippet>                Map&lt;String, Object&gt; result = null;
                try {
                    result = dispatcher.runSync(serviceName, serviceContext);
                } catch (ServiceAuthException e) {
                    // not logging since the service engine already did</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="DE4B1DE4A8BFE8F149E1A8B6E223B2B6">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1994</LineStart>
<Snippet>                    appendOrderItemMap.put(&quot;shipGroupSeqId&quot;, shipGroupSeqId);
                    try {
                        Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;appendOrderItem&quot;, appendOrderItemMap);
                        request.setAttribute(&quot;shoppingCart&quot;, (ShoppingCart) result.get(&quot;shoppingCart&quot;));
                        ShoppingCartEvents.destroyCart(request, response);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="7AA2239C0978477D20FF9825EBEDCA47">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 130, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>130</LineStart>
<Snippet>        }
        checkAfterNewline();
        super.write(s, offset, i - offset);
    }
}</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>348</LineStart>
<Snippet>        }
        String frameContentId = request.getParameter(&quot;frameContentId&quot;);
        String frameDataResourceId = request.getParameter(&quot;frameDataResourceId&quot;);
        
        if (UtilValidate.isEmpty(request.getParameter(&quot;imageWidth&quot;)) || UtilValidate.isEmpty(request.getParameter(&quot;imageHeight&quot;))) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="47620C95-01F7-474F-9944-4C54A9A43679" iid="C7FAB22EFA002CED641B8E40089614EB">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method closeEditWrap() in RenderContentTransform.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RenderContentTransform.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderContentTransform.java</FilePath>
<LineStart>144</LineStart>
<Snippet>                ServletContext servletContext = request.getSession().getServletContext();
                RequestHandler rh = (RequestHandler) servletContext.getAttribute(&quot;_REQUEST_HANDLER_&quot;);
                out.append(rh.makeLink(request, response, &quot;/&quot; + fullRequest, false, false, true));
                out.write(&quot;\&quot;&gt;Edit&lt;/a&gt;&quot;);
                out.write(&quot;&lt;/div&gt;&quot;);</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>505</LineStart>
<Snippet>        Map&lt;String, Object&gt; ftlResults = null;
        try {
            ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
        } catch (ServiceAuthException e) {
            String msg = e.getMessage();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="2D904C29E0E0D95BFA49F6E912A43A4D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>WebShoppingCart.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/WebShoppingCart.java</FilePath>
<LineStart>49</LineStart>
<Snippet>                (currencyUom != null ? currencyUom : ProductStoreWorker.getStoreCurrencyUomId(request)),
                request.getParameter(&quot;billToCustomerPartyId&quot;),
                (request.getParameter(&quot;supplierPartyId&quot;) != null ? request.getParameter(&quot;supplierPartyId&quot;) : request.getParameter(&quot;billFromVendorPartyId&quot;)));

        HttpSession session = request.getSession(true);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="59E806A42D8203B6B2C75E7D0CDA6786">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method close() in OfbizUrlTransform.java sends unvalidated data to a web browser on line 205, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>OfbizUrlTransform.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/ftl/OfbizUrlTransform.java</FilePath>
<LineStart>205</LineStart>
<Snippet>                        String requestUrl = buf.toString();
                        newURL.append(requestUrl);
                        out.write(newURL.toString());
                    } else if (req != null) {
                        HttpServletRequest request = (HttpServletRequest) req.getWrappedObject();</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>119</LineStart>
<Snippet>            contentRevisionMap.put(&quot;contentId&quot;, contentId);
            contentRevisionMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentRevisionAndItem&quot;, contentRevisionMap);
            keySet = result.keySet();
            iter = keySet.iterator();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="F386EBC12D536458AA49408F0892AC79">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceEventHandler.java</FilePath>
<LineStart>337</LineStart>
<Snippet>                dispatcher.runAsync(serviceName, serviceContext);
            } else {
                result = dispatcher.runSync(serviceName, serviceContext);
            }
        } catch (ServiceAuthException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="AB365CDC259AB792553C97D5A31D2ADC">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method checkAfterNewline() in IndentingWriter.java sends unvalidated data to a web browser on line 58, which can result in the browser executing malicious code.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>58</LineStart>
<Snippet>            if (doSpace) {
                if (doNewline) {
                    super.write(indent.toString(), 0, indent.length());
                } else {
                    super.write(' ');</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceEventHandler.java</FilePath>
<LineStart>337</LineStart>
<Snippet>                dispatcher.runAsync(serviceName, serviceContext);
            } else {
                result = dispatcher.runSync(serviceName, serviceContext);
            }
        } catch (ServiceAuthException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="75CA7134-B6BE-444A-9815-E739432FCA47" iid="CC18A62189BA77DB4565E916534D1874">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method run() in InputValue.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>InputValue.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/pseudotag/InputValue.java</FilePath>
<LineStart>143</LineStart>
<Snippet>            inputValue = UtilFormatOut.replaceString(inputValue, &quot;\&quot;&quot;, &quot;&amp;quot;&quot;);
            pageContext.getOut().print(&quot;name=\&quot;&quot; + paramName + &quot;\&quot; value=\&quot;&quot; +
                inputValue + &quot;\&quot;&quot;);
        } else {
            pageContext.getOut().print(inputValue);</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>575</LineStart>
<Snippet>        while (e.hasMoreElements()) {
            String name = e.nextElement();
            request.setAttribute(name, request.getParameter(name));
        }
    }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="6D680B970CEB974C04DD98609E5BCF2C">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 115, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>115</LineStart>
<Snippet>    @Override
    public void write(String s) throws IOException {
        write(s, 0, s.length());
    }
</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1327</LineStart>
<Snippet>        ShoppingCart cart = null;
        try {
            Map&lt;String, Object&gt; outMap = dispatcher.runSync(&quot;loadCartFromShoppingList&quot;,
                    UtilMisc.&lt;String, Object&gt;toMap(&quot;shoppingListId&quot;, shoppingListId,
                    &quot;userLogin&quot;, userLogin));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="CE9730C7C34A415591182170AD702EEB">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1535</LineStart>
<Snippet>
        // TODO: re-factor and move this inside the ShoppingCart constructor
        String orderMode = request.getParameter(&quot;orderMode&quot;);
        if (orderMode != null) {
            cart.setOrderType(orderMode);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="D027DAA9-A3BE-49E4-BDBF-3DFF657F84CA" iid="83CD11FBDDE20B30FCDC103EB379EF8F">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>561</LineStart>
<Snippet>        session.setAttribute(&quot;_CLIENT_REFERER_&quot;, request.getHeader(&quot;Referer&quot;) != null ? request.getHeader(&quot;Referer&quot;) : &quot;&quot;);

        session.setAttribute(&quot;_CLIENT_FORWARDED_FOR_&quot;, request.getHeader(&quot;X-Forwarded-For&quot;));
        session.setAttribute(&quot;_CLIENT_REMOTE_ADDR_&quot;, request.getRemoteAddr());
        session.setAttribute(&quot;_CLIENT_REMOTE_HOST_&quot;, request.getRemoteHost());</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="D09A1D5DB3A4A3B906F511E859A82190">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 115, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>115</LineStart>
<Snippet>    @Override
    public void write(String s) throws IOException {
        write(s, 0, s.length());
    }
</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>672</LineStart>
<Snippet>        HttpSession session = request.getSession();
        Locale locale = UtilHttp.getLocale(request);
        String supplierPartyId = request.getParameter(&quot;supplierPartyId_o_0&quot;);
        
        // check the preferred currency of the supplier, if set, use that for the cart, otherwise use system defaults.</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="DB9B9815B20FB78DB1F0AD7D2DBA0BB3">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>564</LineStart>
<Snippet>        session.setAttribute(&quot;_CLIENT_REMOTE_ADDR_&quot;, request.getRemoteAddr());
        session.setAttribute(&quot;_CLIENT_REMOTE_HOST_&quot;, request.getRemoteHost());
        session.setAttribute(&quot;_CLIENT_REMOTE_USER_&quot;, request.getRemoteUser());
    }
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="149D2DC3979337B50041192A889A21DD">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method outputError() in ServiceStreamHandler.java sends unvalidated data to a web browser on line 110, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ServiceStreamHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceStreamHandler.java</FilePath>
<LineStart>110</LineStart>
<Snippet>        PrintStream out = new PrintStream(stream);
        if (message != null)
            out.println(&quot;Error message: &quot; + message);
        if (error != null)
            out.println(&quot;Exception occured: &quot; + error.toString());</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceStreamHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceStreamHandler.java</FilePath>
<LineStart>81</LineStart>
<Snippet>        Map&lt;String, Object&gt; resp;
        try {
            resp = dispatcher.runSync(event.invoke, context);
        } catch (GenericServiceException e) {
            outputError(out, e, &quot;Exception thrown in runSync()&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="47620C95-01F7-474F-9944-4C54A9A43679" iid="EFBCB098E2FC535EFCB95A90205F1179">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method closeEditWrap() in RenderSubContentCacheTransform.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RenderSubContentCacheTransform.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderSubContentCacheTransform.java</FilePath>
<LineStart>275</LineStart>
<Snippet>                ServletContext servletContext = request.getSession().getServletContext();
                RequestHandler rh = (RequestHandler) servletContext.getAttribute(&quot;_REQUEST_HANDLER_&quot;);
                out.append(rh.makeLink(request, response, &quot;/&quot; + fullRequest, false, false, true));
                out.write(&quot;\&quot;&gt;Edit&lt;/a&gt;&quot;);
                out.write(&quot;&lt;/div&gt;&quot;);</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>505</LineStart>
<Snippet>        Map&lt;String, Object&gt; ftlResults = null;
        try {
            ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
        } catch (ServiceAuthException e) {
            String msg = e.getMessage();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="9DD0E232B3443E5BEC885AFEDA51A8DA">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ShipmentEvents.java</FileName>
<FilePath>applications/product/src/org/ofbiz/shipment/shipment/ShipmentEvents.java</FilePath>
<LineStart>49</LineStart>
<Snippet>
        String shipmentId = request.getParameter(&quot;shipmentId&quot;);
        String shipmentRouteSegmentId = request.getParameter(&quot;shipmentRouteSegmentId&quot;);
        String shipmentPackageSeqId = request.getParameter(&quot;shipmentPackageSeqId&quot;);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792" iid="62699BE9BE8CB1CDD394E4ACA078E5C2">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method run() in InputValue.java sends unvalidated data to a web browser on line 143, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>InputValue.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/pseudotag/InputValue.java</FilePath>
<LineStart>143</LineStart>
<Snippet>            inputValue = UtilFormatOut.replaceString(inputValue, &quot;\&quot;&quot;, &quot;&amp;quot;&quot;);
            pageContext.getOut().print(&quot;name=\&quot;&quot; + paramName + &quot;\&quot; value=\&quot;&quot; +
                inputValue + &quot;\&quot;&quot;);
        } else {
            pageContext.getOut().print(inputValue);</Snippet>
                            </Primary>
                            <Source>
<FileName>InputValue.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/pseudotag/InputValue.java</FilePath>
<LineStart>134</LineStart>
<Snippet>            // if nothing found in entity, or if not checked, try a parameter
            // if (inputValue == null) {
            inputValue = pageContext.getRequest().getParameter(paramName);
        }
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="D0197565DDD21A9413E6DA24166A7E79">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 115, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>115</LineStart>
<Snippet>    @Override
    public void write(String s) throws IOException {
        write(s, 0, s.length());
    }
</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>267</LineStart>
<Snippet>        }
        if (!&quot;image/png&quot;.equals(mimType)) {
            session.setAttribute(&quot;frameContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
            session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;The selected image type is incorrect, please select the image type *.PNG to upload.&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1C85B63C-0870-45B8-9909-86BA43F68B05" iid="EBA8170BBD7105E73B5D9E5B22CAF814">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method closeEditWrap() in RenderContentAsText.java sends unvalidated data to a web browser on line 244, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>RenderContentAsText.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderContentAsText.java</FilePath>
<LineStart>244</LineStart>
<Snippet>                ServletContext servletContext = request.getSession().getServletContext();
                RequestHandler rh = (RequestHandler) servletContext.getAttribute(&quot;_REQUEST_HANDLER_&quot;);
                out.append(rh.makeLink(request, response, &quot;/&quot; + fullRequest, false, false, true));
                out.write(&quot;\&quot;&gt;Edit&lt;/a&gt;&quot;);
                out.write(&quot;&lt;/div&gt;&quot;);</Snippet>
                            </Primary>
                            <Source>
<FileName>ICalWorker.java</FileName>
<FilePath>applications/workeffort/src/org/ofbiz/workeffort/workeffort/ICalWorker.java</FilePath>
<LineStart>285</LineStart>
<Snippet>        HttpSession session = request.getSession();
        LocalDispatcher dispatcher = (LocalDispatcher) request.getAttribute(&quot;dispatcher&quot;);
        Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;userLogin&quot;, serviceMap);
        if (ServiceUtil.isError(result) || ServiceUtil.isFailure(result)) {
            return;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="3C26B1FEE069DF092371E1826AC5C8C1">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 124, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>124</LineStart>
<Snippet>            if (s.charAt(i) == '\n') {
                checkAfterNewline();
                super.write(s, offset, i - offset + 1);
                offset = i + 1;
                lastWasNewline = true;</Snippet>
                            </Primary>
                            <Source>
<FileName>LoginEvents.java</FileName>
<FilePath>applications/securityext/src/org/ofbiz/securityext/login/LoginEvents.java</FilePath>
<LineStart>77</LineStart>
<Snippet>
            String username = request.getParameter(&quot;USERNAME&quot;);
            String password = request.getParameter(&quot;PASSWORD&quot;);

            if ((username != null) &amp;&amp; (&quot;true&quot;.equalsIgnoreCase(UtilProperties.getPropertyValue(&quot;security.properties&quot;, &quot;username.lowercase&quot;)))) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="4BA001586DC222C819070122A5189317">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>ShipmentEvents.java</FileName>
<FilePath>applications/product/src/org/ofbiz/shipment/shipment/ShipmentEvents.java</FilePath>
<LineStart>50</LineStart>
<Snippet>        String shipmentId = request.getParameter(&quot;shipmentId&quot;);
        String shipmentRouteSegmentId = request.getParameter(&quot;shipmentRouteSegmentId&quot;);
        String shipmentPackageSeqId = request.getParameter(&quot;shipmentPackageSeqId&quot;);

        GenericValue shipmentPackageRouteSeg = null;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="A5D69D794095CD2C871BB900A8DD662D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method close() in OfbizUrlTransform.java sends unvalidated data to a web browser on line 205, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>OfbizUrlTransform.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/ftl/OfbizUrlTransform.java</FilePath>
<LineStart>205</LineStart>
<Snippet>                        String requestUrl = buf.toString();
                        newURL.append(requestUrl);
                        out.write(newURL.toString());
                    } else if (req != null) {
                        HttpServletRequest request = (HttpServletRequest) req.getWrappedObject();</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>402</LineStart>
<Snippet>        if(UtilValidate.isEmpty(request.getParameter(&quot;frameContentId&quot;))) {
            if (UtilValidate.isNotEmpty(request.getParameter(&quot;frameExistContentId&quot;)) &amp;&amp; UtilValidate.isNotEmpty(request.getParameter(&quot;frameExistDataResourceId&quot;))) {
                session.setAttribute(&quot;frameExistContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
                session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="C5370D5B1F6D0A78DF780A527198546B">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 115, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>115</LineStart>
<Snippet>    @Override
    public void write(String s) throws IOException {
        write(s, 0, s.length());
    }
</Snippet>
                            </Primary>
                            <Source>
<FileName>LoginEvents.java</FileName>
<FilePath>applications/securityext/src/org/ofbiz/securityext/login/LoginEvents.java</FilePath>
<LineStart>76</LineStart>
<Snippet>        if (userLogin == null) {

            String username = request.getParameter(&quot;USERNAME&quot;);
            String password = request.getParameter(&quot;PASSWORD&quot;);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="3FD3EB45DCBF8690196AF4C78D432970">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>150</LineStart>
<Snippet>            String contentAssocTypeId = (String)passedParams.get(&quot;contentAssocTypeId&quot;);
            ftlContext.put(&quot;contentAssocTypeId&quot;, null); // Don't post assoc at this time
            Map&lt;String, Object&gt; ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
            boolean isError = ModelService.RESPOND_ERROR.equals(ftlResults.get(ModelService.RESPONSE_MESSAGE));
            if (isError) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="DB7F236B8017C77A4BC882B81BCD4808">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>268</LineStart>
<Snippet>        if (!&quot;image/png&quot;.equals(mimType)) {
            session.setAttribute(&quot;frameContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
            session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;The selected image type is incorrect, please select the image type *.PNG to upload.&quot;);
            return &quot;error&quot;;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="30F61CBFE868ACC751FB1A1AF4DFB36C">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1527</LineStart>
<Snippet>        Locale locale = UtilHttp.getLocale(request);

        String productStoreId = request.getParameter(&quot;productStoreId&quot;);

        if (UtilValidate.isNotEmpty(productStoreId)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="6D09DD021F87A0ED5388A71DDC1349D8">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>262</LineStart>
<Snippet>        if (UtilValidate.isEmpty(imageName) || UtilValidate.isEmpty(imageData)) {
            session.setAttribute(&quot;frameContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
            session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;There is no frame image, please select the image type *.PNG  uploading.&quot;);
            return &quot;error&quot;;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="47620C95-01F7-474F-9944-4C54A9A43679" iid="6F13A51D4D845FD9959635D575F82D80">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method closeEditWrap() in RenderSubContentCacheTransform.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RenderSubContentCacheTransform.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderSubContentCacheTransform.java</FilePath>
<LineStart>275</LineStart>
<Snippet>                ServletContext servletContext = request.getSession().getServletContext();
                RequestHandler rh = (RequestHandler) servletContext.getAttribute(&quot;_REQUEST_HANDLER_&quot;);
                out.append(rh.makeLink(request, response, &quot;/&quot; + fullRequest, false, false, true));
                out.write(&quot;\&quot;&gt;Edit&lt;/a&gt;&quot;);
                out.write(&quot;&lt;/div&gt;&quot;);</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceMultiEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceMultiEventHandler.java</FilePath>
<LineStart>308</LineStart>
<Snippet>                Map&lt;String, Object&gt; result = null;
                try {
                    result = dispatcher.runSync(serviceName, serviceContext);
                } catch (ServiceAuthException e) {
                    // not logging since the service engine already did</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="2CE9E010532DF7B372EF3DAFB9DCE65A">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 124, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>124</LineStart>
<Snippet>            if (s.charAt(i) == '\n') {
                checkAfterNewline();
                super.write(s, offset, i - offset + 1);
                offset = i + 1;
                lastWasNewline = true;</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>505</LineStart>
<Snippet>        Map&lt;String, Object&gt; ftlResults = null;
        try {
            ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
        } catch (ServiceAuthException e) {
            String msg = e.getMessage();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="BCAA6A9BEFC1DEBF694F7143921E115C">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>182</LineStart>
<Snippet>                }
                if (UtilValidate.isNotEmpty(map.get(&quot;contentAssocTypeId&quot;))) {
                    ftlResults = dispatcher.runSync(&quot;createContentAssoc&quot;, map);
                    isError = ModelService.RESPOND_ERROR.equals(ftlResults.get(ModelService.RESPONSE_MESSAGE));
                    if (isError) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="D027DAA9-A3BE-49E4-BDBF-3DFF657F84CA" iid="67F3873BC44E9532E82B04FE6A0791CB">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>TrackingCodeEvents.java</FileName>
<FilePath>applications/marketing/src/org/ofbiz/marketing/tracking/TrackingCodeEvents.java</FilePath>
<LineStart>372</LineStart>
<Snippet>
        String trackingCodeId = request.getParameter(&quot;autoTrackingCode&quot;);
        if (UtilValidate.isEmpty(trackingCodeId)) trackingCodeId = request.getParameter(&quot;atc&quot;);
        if (UtilValidate.isEmpty(trackingCodeId)) {
            Cookie[] cookies = request.getCookies();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="75CA7134-B6BE-444A-9815-E739432FCA47" iid="F2A1F852EEB1919ABBC1DDCA370EA208">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method run() in InputValue.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>InputValue.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/pseudotag/InputValue.java</FilePath>
<LineStart>145</LineStart>
<Snippet>                inputValue + &quot;\&quot;&quot;);
        } else {
            pageContext.getOut().print(inputValue);
        }
    }</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceMultiEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceMultiEventHandler.java</FilePath>
<LineStart>308</LineStart>
<Snippet>                Map&lt;String, Object&gt; result = null;
                try {
                    result = dispatcher.runSync(serviceName, serviceContext);
                } catch (ServiceAuthException e) {
                    // not logging since the service engine already did</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="D8C1EA49A1721502F772AE75B1BDAEA5">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method render() in Section.java sends unvalidated data to a web browser on line 98, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Section.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/region/Section.java</FilePath>
<LineStart>98</LineStart>
<Snippet>            if (&quot;direct&quot;.equals(type)) {
                if (UtilJ2eeCompat.useOutputStreamNotWriter(context)) {
                    response.getOutputStream().print(content);
                } else {
                    response.getWriter().print(content);</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>575</LineStart>
<Snippet>        while (e.hasMoreElements()) {
            String name = e.nextElement();
            request.setAttribute(name, request.getParameter(name));
        }
    }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="943F5C684B6B964E53184B9DD648E69B">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>OrderEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/order/OrderEvents.java</FilePath>
<LineStart>125</LineStart>
<Snippet>                        contextMap.put(&quot;userLogin&quot;, userLogin);
                        try {
                            resultMap = dispatcher.runSync(&quot;cancelOrderItem&quot;, contextMap);

                            if (ServiceUtil.isError(resultMap)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="7E53182E8F31E408DCEDA65B5AE94ABA">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>287</LineStart>
<Snippet>                imgContext.put(&quot;rootDir&quot;, &quot;rootDir&quot;);
                if (Debug.infoOn()) Debug.logInfo(&quot;[UploadContentAndImage]imgContext &quot; + imgContext, module);
                Map&lt;String, Object&gt; imgResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, imgContext);
                isError = ModelService.RESPOND_ERROR.equals(imgResults.get(ModelService.RESPONSE_MESSAGE));
                if (isError) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="DB7F236B8017C77A4BC882B81BCD4805">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>262</LineStart>
<Snippet>        if (UtilValidate.isEmpty(imageName) || UtilValidate.isEmpty(imageData)) {
            session.setAttribute(&quot;frameContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
            session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;There is no frame image, please select the image type *.PNG  uploading.&quot;);
            return &quot;error&quot;;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="E93D24BAD714A9D60739B0C0B1C44DA0">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 124, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>124</LineStart>
<Snippet>            if (s.charAt(i) == '\n') {
                checkAfterNewline();
                super.write(s, offset, i - offset + 1);
                offset = i + 1;
                lastWasNewline = true;</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>693</LineStart>
<Snippet>            return &quot;error&quot;;
        }
        String orderId = request.getParameter(&quot;orderId_o_0&quot;);
        // set the order id if supplied
        if (UtilValidate.isNotEmpty(orderId)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="331C3EC0F6BA541116391321661810BE">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 130, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>130</LineStart>
<Snippet>        }
        checkAfterNewline();
        super.write(s, offset, i - offset);
    }
}</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceMultiEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceMultiEventHandler.java</FilePath>
<LineStart>308</LineStart>
<Snippet>                Map&lt;String, Object&gt; result = null;
                try {
                    result = dispatcher.runSync(serviceName, serviceContext);
                } catch (ServiceAuthException e) {
                    // not logging since the service engine already did</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="2592CAB7519B7E84D84976A1201E98DB">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 130, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>130</LineStart>
<Snippet>        }
        checkAfterNewline();
        super.write(s, offset, i - offset);
    }
}</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>261</LineStart>
<Snippet>        ByteBuffer imageData = (ByteBuffer) tempFile.get(&quot;imageData&quot;);
        if (UtilValidate.isEmpty(imageName) || UtilValidate.isEmpty(imageData)) {
            session.setAttribute(&quot;frameContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
            session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;There is no frame image, please select the image type *.PNG  uploading.&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="6B0F5F88C4748CD8919A3BAB27F49E2F">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method close() in OfbizUrlTransform.java sends unvalidated data to a web browser on line 218, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>OfbizUrlTransform.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/ftl/OfbizUrlTransform.java</FilePath>
<LineStart>218</LineStart>
<Snippet>                        // make the link
                        RequestHandler rh = (RequestHandler) ctx.getAttribute(&quot;_REQUEST_HANDLER_&quot;);
                        out.write(rh.makeLink(request, response, requestUrl, fullPath, secure, encode));
                    } else if (prefix != null) {
                        if (prefix instanceof TemplateScalarModel) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>575</LineStart>
<Snippet>        while (e.hasMoreElements()) {
            String name = e.nextElement();
            request.setAttribute(name, request.getParameter(name));
        }
    }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="BA6A27D83B9B08959D3967FDE907EE47">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>CheckOutHelper.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/CheckOutHelper.java</FilePath>
<LineStart>519</LineStart>
<Snippet>                Map&lt;String, Object&gt; gcResult = null;
                try {
                    gcResult = dispatcher.runSync(&quot;createGiftCard&quot;, gcCtx);
                } catch (GenericServiceException e) {
                    Debug.logError(e, module);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="D027DAA9-A3BE-49E4-BDBF-3DFF657F84CA" iid="E4820C929EFC54BF94722530E451008C">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>672</LineStart>
<Snippet>        HttpSession session = request.getSession();
        Locale locale = UtilHttp.getLocale(request);
        String supplierPartyId = request.getParameter(&quot;supplierPartyId_o_0&quot;);
        
        // check the preferred currency of the supplier, if set, use that for the cart, otherwise use system defaults.</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="D027DAA9-A3BE-49E4-BDBF-3DFF657F84CA" iid="6B46636565A9F749F059D411960493C8">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>ShipmentEvents.java</FileName>
<FilePath>applications/product/src/org/ofbiz/shipment/shipment/ShipmentEvents.java</FilePath>
<LineStart>48</LineStart>
<Snippet>        Delegator delegator = (Delegator) request.getAttribute(&quot;delegator&quot;);

        String shipmentId = request.getParameter(&quot;shipmentId&quot;);
        String shipmentRouteSegmentId = request.getParameter(&quot;shipmentRouteSegmentId&quot;);
        String shipmentPackageSeqId = request.getParameter(&quot;shipmentPackageSeqId&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="58EF103DC8F1FEA68B89A9B92D828F7C">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 124, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>124</LineStart>
<Snippet>            if (s.charAt(i) == '\n') {
                checkAfterNewline();
                super.write(s, offset, i - offset + 1);
                offset = i + 1;
                lastWasNewline = true;</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>409</LineStart>
<Snippet>        }
        
        String frameContentId = request.getParameter(&quot;frameContentId&quot;);
        Delegator delegator = (Delegator) request.getAttribute(&quot;delegator&quot;);
        </Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="DD4DCC2B9F5144D0AAC703F176243264">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 124, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>124</LineStart>
<Snippet>            if (s.charAt(i) == '\n') {
                checkAfterNewline();
                super.write(s, offset, i - offset + 1);
                offset = i + 1;
                lastWasNewline = true;</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>303</LineStart>
<Snippet>            dataResourceCtx.put(&quot;mimeTypeId&quot;, &quot;image/png&quot;);
            dataResourceCtx.put(&quot;isPublic&quot;, &quot;Y&quot;);
            Map&lt;String, Object&gt; dataResourceResult = dispatcher.runSync(&quot;createDataResource&quot;, dataResourceCtx);
            dataResourceId = dataResourceResult.get(&quot;dataResourceId&quot;).toString();
            //create content</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="870D9B2F611C88058FBD7F1D6967701E">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingListEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppinglist/ShoppingListEvents.java</FilePath>
<LineStart>349</LineStart>
<Snippet>        Map&lt;String, Object&gt; result = null;
        try {
            result = dispatcher.runSync(&quot;updateShoppingListItem&quot;, serviceInMap);
        } catch (GenericServiceException e) {
            String errMsg = UtilProperties.getMessage(resource_error,&quot;shoppingListEvents.error_calling_update&quot;, locale) + &quot;: &quot;  + e.toString();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="C03EE6FACE309C8C809CBBFFFC13EF10">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>257</LineStart>
<Snippet>        Map&lt;String, Object&gt; results = null;
        try {
            results = dispatcher.runSync(&quot;renderContentPdf&quot;, mapIn);
        } catch (ServiceAuthException e) {
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, e.toString());</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="D56AA849B535DA30CE3DE141D7F5EFB4">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method close() in OfbizUrlTransform.java sends unvalidated data to a web browser on line 205, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>OfbizUrlTransform.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/ftl/OfbizUrlTransform.java</FilePath>
<LineStart>205</LineStart>
<Snippet>                        String requestUrl = buf.toString();
                        newURL.append(requestUrl);
                        out.write(newURL.toString());
                    } else if (req != null) {
                        HttpServletRequest request = (HttpServletRequest) req.getWrappedObject();</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>347</LineStart>
<Snippet>            return &quot;error&quot;;
        }
        String frameContentId = request.getParameter(&quot;frameContentId&quot;);
        String frameDataResourceId = request.getParameter(&quot;frameDataResourceId&quot;);
        </Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="3516FEE6616091E06A22E6E08B1D414C">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method close() in OfbizUrlTransform.java sends unvalidated data to a web browser on line 205, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>OfbizUrlTransform.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/ftl/OfbizUrlTransform.java</FilePath>
<LineStart>205</LineStart>
<Snippet>                        String requestUrl = buf.toString();
                        newURL.append(requestUrl);
                        out.write(newURL.toString());
                    } else if (req != null) {
                        HttpServletRequest request = (HttpServletRequest) req.getWrappedObject();</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>127</LineStart>
<Snippet>
            Object value = null;
            String[] paramArr = request.getParameterValues(name);
            if (paramArr != null) {
                if (paramArr.length &gt; 1) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="47620C95-01F7-474F-9944-4C54A9A43679" iid="93AC337AA6F656A96B517697E076CC6E">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method closeEditWrap() in RenderContentTransform.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RenderContentTransform.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderContentTransform.java</FilePath>
<LineStart>144</LineStart>
<Snippet>                ServletContext servletContext = request.getSession().getServletContext();
                RequestHandler rh = (RequestHandler) servletContext.getAttribute(&quot;_REQUEST_HANDLER_&quot;);
                out.append(rh.makeLink(request, response, &quot;/&quot; + fullRequest, false, false, true));
                out.write(&quot;\&quot;&gt;Edit&lt;/a&gt;&quot;);
                out.write(&quot;&lt;/div&gt;&quot;);</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>575</LineStart>
<Snippet>        while (e.hasMoreElements()) {
            String name = e.nextElement();
            request.setAttribute(name, request.getParameter(name));
        }
    }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="CCD8406D7BD4822A4F8DF82D04585BA7">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>AbstractOFBizAuthenticationHandler.java</FileName>
<FilePath>specialpurpose/ldap/src/org/ofbiz/ldap/commons/AbstractOFBizAuthenticationHandler.java</FilePath>
<LineStart>129</LineStart>
<Snippet>
        try {
            loginResult = dispatcher.runSync(&quot;userLogin&quot;, UtilMisc.toMap(&quot;login.username&quot;, username, &quot;login.password&quot;, password, &quot;visitId&quot;, visitId, &quot;locale&quot;, UtilHttp.getLocale(request)));
        } catch (GenericServiceException e) {
            throw new GenericServiceException(e.getLocalizedMessage());</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="E6B4AFB293CEEAE37A9A7C26D4E370CC">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>OrderEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/order/OrderEvents.java</FilePath>
<LineStart>58</LineStart>
<Snippet>        Delegator delegator = (Delegator) request.getAttribute(&quot;delegator&quot;);
        GenericValue userLogin = (GenericValue) session.getAttribute(&quot;userLogin&quot;);
        String dataResourceId = request.getParameter(&quot;dataResourceId&quot;);

        try {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="FB0D845BD245A689D11E1346B845EF83">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>115</LineStart>
<Snippet>    @Override
    public void write(String s) throws IOException {
        write(s, 0, s.length());
    }
</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>119</LineStart>
<Snippet>            contentRevisionMap.put(&quot;contentId&quot;, contentId);
            contentRevisionMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentRevisionAndItem&quot;, contentRevisionMap);
            keySet = result.keySet();
            iter = keySet.iterator();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="D027DAA9-A3BE-49E4-BDBF-3DFF657F84CA" iid="4923A6587F48AA183CE97BDD1BAAE357">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>WebPosEvents.java</FileName>
<FilePath>specialpurpose/webpos/src/org/ofbiz/webpos/WebPosEvents.java</FilePath>
<LineStart>58</LineStart>
<Snippet>        
        // get the posTerminalId
        String posTerminalId = (String) request.getParameter(&quot;posTerminalId&quot;);
        session.removeAttribute(&quot;shoppingCart&quot;);
        session.removeAttribute(&quot;webPosSession&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="61356519CC1D9B5048AC553D47A5B9A5">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method close() in OfbizUrlTransform.java sends unvalidated data to a web browser on line 205, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>OfbizUrlTransform.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/ftl/OfbizUrlTransform.java</FilePath>
<LineStart>205</LineStart>
<Snippet>                        String requestUrl = buf.toString();
                        newURL.append(requestUrl);
                        out.write(newURL.toString());
                    } else if (req != null) {
                        HttpServletRequest request = (HttpServletRequest) req.getWrappedObject();</Snippet>
                            </Primary>
                            <Source>
<FileName>ICalWorker.java</FileName>
<FilePath>applications/workeffort/src/org/ofbiz/workeffort/workeffort/ICalWorker.java</FilePath>
<LineStart>285</LineStart>
<Snippet>        HttpSession session = request.getSession();
        LocalDispatcher dispatcher = (LocalDispatcher) request.getAttribute(&quot;dispatcher&quot;);
        Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;userLogin&quot;, serviceMap);
        if (ServiceUtil.isError(result) || ServiceUtil.isFailure(result)) {
            return;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="596FB0E8BCEAC666A51E0B758E61E5B3">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method toJsonObjectList() in EbayStoreOptions.java sends unvalidated data to a web browser on line 273, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EbayStoreOptions.java</FileName>
<FilePath>specialpurpose/ebaystore/src/org/ofbiz/ebaystore/EbayStoreOptions.java</FilePath>
<LineStart>273</LineStart>
<Snippet>            try {
                out = response.getWriter();
                out.write(jsonStr);
                out.flush();
            } catch (IOException e) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>575</LineStart>
<Snippet>        while (e.hasMoreElements()) {
            String name = e.nextElement();
            request.setAttribute(name, request.getParameter(name));
        }
    }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="08B498FAFB4CA632A6CFA84FEDCBC440">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>GenericWebEvent.java</FileName>
<FilePath>framework/webtools/src/org/ofbiz/webtools/GenericWebEvent.java</FilePath>
<LineStart>183</LineStart>
<Snippet>            }

            String fval = request.getParameter(field.getName());
            if (UtilValidate.isNotEmpty(fval)) {
                try {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="AFB8FC928D9DA863FAFE1D8B9382167B">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>AbstractOFBizAuthenticationHandler.java</FileName>
<FilePath>specialpurpose/ldap/src/org/ofbiz/ldap/commons/AbstractOFBizAuthenticationHandler.java</FilePath>
<LineStart>129</LineStart>
<Snippet>
        try {
            loginResult = dispatcher.runSync(&quot;userLogin&quot;, UtilMisc.toMap(&quot;login.username&quot;, username, &quot;login.password&quot;, password, &quot;visitId&quot;, visitId, &quot;locale&quot;, UtilHttp.getLocale(request)));
        } catch (GenericServiceException e) {
            throw new GenericServiceException(e.getLocalizedMessage());</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="E83E29D6FEC816FDD0CC93BC06CC567B">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>347</LineStart>
<Snippet>            return &quot;error&quot;;
        }
        String frameContentId = request.getParameter(&quot;frameContentId&quot;);
        String frameDataResourceId = request.getParameter(&quot;frameDataResourceId&quot;);
        </Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="D970D03B7FC7B73CF2A1A8AFE792B941">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 115, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>115</LineStart>
<Snippet>    @Override
    public void write(String s) throws IOException {
        write(s, 0, s.length());
    }
</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>347</LineStart>
<Snippet>            return &quot;error&quot;;
        }
        String frameContentId = request.getParameter(&quot;frameContentId&quot;);
        String frameDataResourceId = request.getParameter(&quot;frameDataResourceId&quot;);
        </Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="845C1B6CDDAD2E190BB5374B7FADDF7B">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method close() in OfbizUrlTransform.java sends unvalidated data to a web browser on line 218, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>OfbizUrlTransform.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/ftl/OfbizUrlTransform.java</FilePath>
<LineStart>218</LineStart>
<Snippet>                        // make the link
                        RequestHandler rh = (RequestHandler) ctx.getAttribute(&quot;_REQUEST_HANDLER_&quot;);
                        out.write(rh.makeLink(request, response, requestUrl, fullPath, secure, encode));
                    } else if (prefix != null) {
                        if (prefix instanceof TemplateScalarModel) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>505</LineStart>
<Snippet>        Map&lt;String, Object&gt; ftlResults = null;
        try {
            ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
        } catch (ServiceAuthException e) {
            String msg = e.getMessage();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="76F7C5DF-850D-4AC8-A3FE-8AE7AABFB50E" iid="0E6A1B9E6D6C5834248559D1D56A7540">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method streamContent() in UtilHttp.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>1033</LineStart>
<Snippet>        try {
            while ((read = bis.read(buffer, 0, buffer.length)) != -1) {
                bos.write(buffer, 0, read);
            }
        } catch (IOException e) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>119</LineStart>
<Snippet>            contentRevisionMap.put(&quot;contentId&quot;, contentId);
            contentRevisionMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentRevisionAndItem&quot;, contentRevisionMap);
            keySet = result.keySet();
            iter = keySet.iterator();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="CCE3158E912973BED0CB8CF02669A809">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 124, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>124</LineStart>
<Snippet>            if (s.charAt(i) == '\n') {
                checkAfterNewline();
                super.write(s, offset, i - offset + 1);
                offset = i + 1;
                lastWasNewline = true;</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>104</LineStart>
<Snippet>        persistMap.put(&quot;userLogin&quot;, userLogin);
        try {
            Map&lt;String, Object&gt; persistResult = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, persistMap);
            contentId = (String)persistResult.get(&quot;contentId&quot;);
            //request.setAttribute(&quot;contentId&quot;, contentId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="A0D986A8EE9F04CB1CFDAA5112CB70FE">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>LayoutEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/layout/LayoutEvents.java</FilePath>
<LineStart>552</LineStart>
<Snippet>            context.put(&quot;textData&quot;, paramMap.get(&quot;textData&quot;));
            context.put(&quot;contentAssocTypeId&quot;, null);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, context);
            boolean isError = ModelService.RESPOND_ERROR.equals(result.get(ModelService.RESPONSE_MESSAGE));
            if (isError) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="CF316068F58AEBA27CDB8DEEC968D04D">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method close() in OfbizUrlTransform.java sends unvalidated data to a web browser on line 218, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>OfbizUrlTransform.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/ftl/OfbizUrlTransform.java</FilePath>
<LineStart>218</LineStart>
<Snippet>                        // make the link
                        RequestHandler rh = (RequestHandler) ctx.getAttribute(&quot;_REQUEST_HANDLER_&quot;);
                        out.write(rh.makeLink(request, response, requestUrl, fullPath, secure, encode));
                    } else if (prefix != null) {
                        if (prefix instanceof TemplateScalarModel) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceMultiEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceMultiEventHandler.java</FilePath>
<LineStart>308</LineStart>
<Snippet>                Map&lt;String, Object&gt; result = null;
                try {
                    result = dispatcher.runSync(serviceName, serviceContext);
                } catch (ServiceAuthException e) {
                    // not logging since the service engine already did</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="CC551DACF16BA62105E684152EB880F4">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>130</LineStart>
<Snippet>        }
        checkAfterNewline();
        super.write(s, offset, i - offset);
    }
}</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>104</LineStart>
<Snippet>        persistMap.put(&quot;userLogin&quot;, userLogin);
        try {
            Map&lt;String, Object&gt; persistResult = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, persistMap);
            contentId = (String)persistResult.get(&quot;contentId&quot;);
            //request.setAttribute(&quot;contentId&quot;, contentId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="B00D79C650DE3B0B880CACCA65721D8D">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method checkAfterNewline() in IndentingWriter.java sends unvalidated data to a web browser on line 58, which can result in the browser executing malicious code.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>58</LineStart>
<Snippet>            if (doSpace) {
                if (doNewline) {
                    super.write(indent.toString(), 0, indent.length());
                } else {
                    super.write(' ');</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>104</LineStart>
<Snippet>        persistMap.put(&quot;userLogin&quot;, userLogin);
        try {
            Map&lt;String, Object&gt; persistResult = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, persistMap);
            contentId = (String)persistResult.get(&quot;contentId&quot;);
            //request.setAttribute(&quot;contentId&quot;, contentId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="75CA7134-B6BE-444A-9815-E739432FCA47" iid="2C15239C87860CA76B8F14944BC8218B">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method run() in EntityField.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>EntityField.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/pseudotag/EntityField.java</FilePath>
<LineStart>249</LineStart>
<Snippet>            if (prefix != null)
                out.print(prefix);
            out.print(fieldString);
            if (suffix != null)
                out.print(suffix);</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>104</LineStart>
<Snippet>        persistMap.put(&quot;userLogin&quot;, userLogin);
        try {
            Map&lt;String, Object&gt; persistResult = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, persistMap);
            contentId = (String)persistResult.get(&quot;contentId&quot;);
            //request.setAttribute(&quot;contentId&quot;, contentId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="DE4B1DE4A8BFE8F149E1A8B6E223B2B5">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1994</LineStart>
<Snippet>                    appendOrderItemMap.put(&quot;shipGroupSeqId&quot;, shipGroupSeqId);
                    try {
                        Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;appendOrderItem&quot;, appendOrderItemMap);
                        request.setAttribute(&quot;shoppingCart&quot;, (ShoppingCart) result.get(&quot;shoppingCart&quot;));
                        ShoppingCartEvents.destroyCart(request, response);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="46A0DCF66B56126463964D4F62F05F4F">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>GoogleBaseSearchEvents.java</FileName>
<FilePath>specialpurpose/googlebase/src/org/ofbiz/googlebase/GoogleBaseSearchEvents.java</FilePath>
<LineStart>122</LineStart>
<Snippet>                    inMap.put(&quot;productStoreId&quot;, productStoreId);
                    inMap.put(&quot;allowRecommended&quot;, allowRecommended);
                    Map&lt;String, Object&gt; exportResult = dispatcher.runSync(&quot;exportToGoogle&quot;, inMap);
                    if (ServiceUtil.isError(exportResult)) {
                        List&lt;String&gt; errorMessages = UtilGenerics.checkList(exportResult.get(ModelService.ERROR_MESSAGE_LIST), String.class);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="A05D737BDDD36E1FCDBF39ADA1A584FD">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ShipmentEvents.java</FileName>
<FilePath>applications/product/src/org/ofbiz/shipment/shipment/ShipmentEvents.java</FilePath>
<LineStart>48</LineStart>
<Snippet>        Delegator delegator = (Delegator) request.getAttribute(&quot;delegator&quot;);

        String shipmentId = request.getParameter(&quot;shipmentId&quot;);
        String shipmentRouteSegmentId = request.getParameter(&quot;shipmentRouteSegmentId&quot;);
        String shipmentPackageSeqId = request.getParameter(&quot;shipmentPackageSeqId&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="8746886689C027AAE15D77EB77D02D56">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method toJsonObjectList() in EbayStoreOptions.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>EbayStoreOptions.java</FileName>
<FilePath>specialpurpose/ebaystore/src/org/ofbiz/ebaystore/EbayStoreOptions.java</FilePath>
<LineStart>273</LineStart>
<Snippet>            try {
                out = response.getWriter();
                out.write(jsonStr);
                out.flush();
            } catch (IOException e) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>119</LineStart>
<Snippet>            contentRevisionMap.put(&quot;contentId&quot;, contentId);
            contentRevisionMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentRevisionAndItem&quot;, contentRevisionMap);
            keySet = result.keySet();
            iter = keySet.iterator();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF" iid="2278F0EB5ECD784D451433B09BDFC90A">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method run() in InputValue.java sends unvalidated data to a web browser on line 143, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>InputValue.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/pseudotag/InputValue.java</FilePath>
<LineStart>143</LineStart>
<Snippet>            inputValue = UtilFormatOut.replaceString(inputValue, &quot;\&quot;&quot;, &quot;&amp;quot;&quot;);
            pageContext.getOut().print(&quot;name=\&quot;&quot; + paramName + &quot;\&quot; value=\&quot;&quot; +
                inputValue + &quot;\&quot;&quot;);
        } else {
            pageContext.getOut().print(inputValue);</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>104</LineStart>
<Snippet>        persistMap.put(&quot;userLogin&quot;, userLogin);
        try {
            Map&lt;String, Object&gt; persistResult = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, persistMap);
            contentId = (String)persistResult.get(&quot;contentId&quot;);
            //request.setAttribute(&quot;contentId&quot;, contentId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="D027DAA9-A3BE-49E4-BDBF-3DFF657F84CA" iid="9E921EE9CA8FFA31E78FB2E8E835C1EE">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doFilter() in ContextFilter.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ContextFilter.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ContextFilter.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                    }
                    filterMessage = filterMessage + &quot; (&quot; + error + &quot;)&quot;;
                    httpResponse.sendError(error, contextUri);
                    request.setAttribute(&quot;filterRequestUriError&quot;, contextUri);
                } else {</Snippet>
                            </Primary>
                            <Source>
<FileName>ContextFilter.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ContextFilter.java</FilePath>
<LineStart>235</LineStart>
<Snippet>            }
            if (httpRequest.getPathInfo() != null) {
                contextUriBuffer.append(httpRequest.getPathInfo());
            }
            contextUri = contextUriBuffer.toString();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="702353369FE57400251B3B2F07A261BE">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>261</LineStart>
<Snippet>        ByteBuffer imageData = (ByteBuffer) tempFile.get(&quot;imageData&quot;);
        if (UtilValidate.isEmpty(imageName) || UtilValidate.isEmpty(imageData)) {
            session.setAttribute(&quot;frameContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
            session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;There is no frame image, please select the image type *.PNG  uploading.&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="DA016BCF2A39AB1FD9121AA0B7AFC1D8">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 130, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>130</LineStart>
<Snippet>        }
        checkAfterNewline();
        super.write(s, offset, i - offset);
    }
}</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1535</LineStart>
<Snippet>
        // TODO: re-factor and move this inside the ShoppingCart constructor
        String orderMode = request.getParameter(&quot;orderMode&quot;);
        if (orderMode != null) {
            cart.setOrderType(orderMode);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="8D78E3A954D6F0D2A3978A6C6C98063B">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method openEditWrap() in RenderSubContentAsText.java sends unvalidated data to a web browser on line 204, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>RenderSubContentAsText.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderSubContentAsText.java</FilePath>
<LineStart>204</LineStart>
<Snippet>
                String divStr = &quot;&lt;div class=\&quot;&quot; + editStyle + &quot;\&quot;&gt;&quot;;
                out.write(divStr);
            }
</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>119</LineStart>
<Snippet>            contentRevisionMap.put(&quot;contentId&quot;, contentId);
            contentRevisionMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentRevisionAndItem&quot;, contentRevisionMap);
            keySet = result.keySet();
            iter = keySet.iterator();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="5BA71006ABAC413CFFF4BE37062A9BE0">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>124</LineStart>
<Snippet>            if (s.charAt(i) == '\n') {
                checkAfterNewline();
                super.write(s, offset, i - offset + 1);
                offset = i + 1;
                lastWasNewline = true;</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>104</LineStart>
<Snippet>        persistMap.put(&quot;userLogin&quot;, userLogin);
        try {
            Map&lt;String, Object&gt; persistResult = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, persistMap);
            contentId = (String)persistResult.get(&quot;contentId&quot;);
            //request.setAttribute(&quot;contentId&quot;, contentId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="633E3A7E9D0DA9B62FC37826278B6ABA">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>312</LineStart>
<Snippet>            contentCtx.put(&quot;fromDate&quot;, UtilDateTime.nowTimestamp());
            contentCtx.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; contentResult = dispatcher.runSync(&quot;createContent&quot;, contentCtx);
            contentId = contentResult.get(&quot;contentId&quot;).toString();
        } catch (Exception e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="235064B0DA685A4C51A47691834C9229">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>CatalogUrlServlet.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/category/CatalogUrlServlet.java</FilePath>
<LineStart>80</LineStart>
<Snippet>        Delegator delegator = (Delegator) getServletContext().getAttribute(&quot;delegator&quot;);

        String pathInfo = request.getPathInfo();
        List&lt;String&gt; pathElements = StringUtil.split(pathInfo, &quot;/&quot;);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1C85B63C-0870-45B8-9909-86BA43F68B05" iid="F1A4D5DFD8DB26549D36ECCC7458D57F">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method closeEditWrap() in RenderContentAsText.java sends unvalidated data to a web browser on line 244, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>RenderContentAsText.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderContentAsText.java</FilePath>
<LineStart>244</LineStart>
<Snippet>                ServletContext servletContext = request.getSession().getServletContext();
                RequestHandler rh = (RequestHandler) servletContext.getAttribute(&quot;_REQUEST_HANDLER_&quot;);
                out.append(rh.makeLink(request, response, &quot;/&quot; + fullRequest, false, false, true));
                out.write(&quot;\&quot;&gt;Edit&lt;/a&gt;&quot;);
                out.write(&quot;&lt;/div&gt;&quot;);</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceEventHandler.java</FilePath>
<LineStart>337</LineStart>
<Snippet>                dispatcher.runAsync(serviceName, serviceContext);
            } else {
                result = dispatcher.runSync(serviceName, serviceContext);
            }
        } catch (ServiceAuthException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="BE6A6E6E782AB7212BBA61BF5079CBA8">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 115, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>115</LineStart>
<Snippet>    @Override
    public void write(String s) throws IOException {
        write(s, 0, s.length());
    }
</Snippet>
                            </Primary>
                            <Source>
<FileName>CoreEvents.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/CoreEvents.java</FilePath>
<LineStart>412</LineStart>
<Snippet>        try {
            if (null!=request.getParameter(&quot;_RUN_SYNC_&quot;) &amp;&amp; request.getParameter(&quot;_RUN_SYNC_&quot;).equals(&quot;Y&quot;)) {
                syncServiceResult = dispatcher.runSync(serviceName, serviceContext);
            } else {
                dispatcher.schedule(jobName, poolName, serviceName, serviceContext, startTime, frequency, interval, count, endTime, maxRetry);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="CE645559721E5610CE5D9AE806FAECDA">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>LayoutEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/layout/LayoutEvents.java</FilePath>
<LineStart>483</LineStart>
<Snippet>                Debug.logVerbose(&quot;in createSubContent, context:&quot; + context, module);
            }
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, context);
            boolean isError = ModelService.RESPOND_ERROR.equals(result.get(ModelService.RESPONSE_MESSAGE));
            if (isError) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="B0632BC1E9F87434296FB432E308B924">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method httpEngine() in HttpEngine.java sends unvalidated data to a web browser on line 187, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>HttpEngine.java</FileName>
<FilePath>framework/service/src/org/ofbiz/service/engine/HttpEngine.java</FilePath>
<LineStart>187</LineStart>
<Snippet>            if (errorMessage.length() &gt; 0) {
                response.setContentLength(errorMessage.length());
                out.write(errorMessage.toString());
            } else {
                response.setContentLength(resultString.length());</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>575</LineStart>
<Snippet>        while (e.hasMoreElements()) {
            String name = e.nextElement();
            request.setAttribute(name, request.getParameter(name));
        }
    }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="1A6CB044472BEF18EE525E9B1CAAF713">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>ContentManagementEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/ContentManagementEvents.java</FilePath>
<LineStart>288</LineStart>
<Snippet>                        serviceIn.put(&quot;targetOperationList&quot;, targetOperationList);
                        serviceIn.put(&quot;contentPurposeList&quot;, contentPurposeList);
                        results = dispatcher.runSync(&quot;createContentAssoc&quot;, serviceIn);
                        responseMessage = (String)results.get(ModelService.RESPONSE_MESSAGE);
                        if (UtilValidate.isNotEmpty(responseMessage)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="57B38FA6E6881EE54697ABBB748B491A">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>124</LineStart>
<Snippet>            if (s.charAt(i) == '\n') {
                checkAfterNewline();
                super.write(s, offset, i - offset + 1);
                offset = i + 1;
                lastWasNewline = true;</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceMultiEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceMultiEventHandler.java</FilePath>
<LineStart>308</LineStart>
<Snippet>                Map&lt;String, Object&gt; result = null;
                try {
                    result = dispatcher.runSync(serviceName, serviceContext);
                } catch (ServiceAuthException e) {
                    // not logging since the service engine already did</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="9FBD9CF6447EF81292B93AFADE118881">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>OrderEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/order/OrderEvents.java</FilePath>
<LineStart>58</LineStart>
<Snippet>        Delegator delegator = (Delegator) request.getAttribute(&quot;delegator&quot;);
        GenericValue userLogin = (GenericValue) session.getAttribute(&quot;userLogin&quot;);
        String dataResourceId = request.getParameter(&quot;dataResourceId&quot;);

        try {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="8186596519F85A65809D995B13CF8950">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>DataEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/data/DataEvents.java</FilePath>
<LineStart>136</LineStart>
<Snippet>            Map&lt;String, Object&gt; permSvcResp;
            try {
                permSvcResp = dispatcher.runSync(permissionService, permSvcCtx);
            } catch (GenericServiceException e) {
                Debug.logError(e, module);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="C9C7ED8E24E984CA2CD8E2B3441DEE49">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>LoginEvents.java</FileName>
<FilePath>applications/securityext/src/org/ofbiz/securityext/login/LoginEvents.java</FilePath>
<LineStart>76</LineStart>
<Snippet>        if (userLogin == null) {

            String username = request.getParameter(&quot;USERNAME&quot;);
            String password = request.getParameter(&quot;PASSWORD&quot;);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="669FC63ACE4D37D8FF0261E23B5CC7E1">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method openEditWrap() in RenderSubContentCacheTransform.java sends unvalidated data to a web browser on line 202, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>RenderSubContentCacheTransform.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderSubContentCacheTransform.java</FilePath>
<LineStart>202</LineStart>
<Snippet>            public void openEditWrap(Writer out, String editStyle) throws IOException {
                String divStr = &quot;&lt;div class=\&quot;&quot; + editStyle + &quot;\&quot;&gt;&quot;;
                out.write(divStr);
            }
</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>505</LineStart>
<Snippet>        Map&lt;String, Object&gt; ftlResults = null;
        try {
            ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
        } catch (ServiceAuthException e) {
            String msg = e.getMessage();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="A573A248F1DFD141896B72DB15A64C4C">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>115</LineStart>
<Snippet>    @Override
    public void write(String s) throws IOException {
        write(s, 0, s.length());
    }
</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>575</LineStart>
<Snippet>        while (e.hasMoreElements()) {
            String name = e.nextElement();
            request.setAttribute(name, request.getParameter(name));
        }
    }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="B3B70310AA52140E5CAE3535F506A711">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>TaskEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/task/TaskEvents.java</FilePath>
<LineStart>75</LineStart>
<Snippet>            Map&lt;String, ? extends Object&gt; context = UtilMisc.toMap(&quot;workEffortId&quot;, workEffortId, &quot;partyId&quot;, partyId, &quot;roleTypeId&quot;, roleTypeId,
                    &quot;fromDate&quot;, fromDate, &quot;result&quot;, parameterMap, &quot;userLogin&quot;, userLogin);
            result = dispatcher.runSync(&quot;wfCompleteAssignment&quot;, context);
            if (result.containsKey(ModelService.RESPOND_ERROR)) {
                request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, result.get(ModelService.ERROR_MESSAGE));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="D027DAA9-A3BE-49E4-BDBF-3DFF657F84CA" iid="AA62C686C511461A7ED20F59CD7180CF">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>LoginWorker.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/LoginWorker.java</FilePath>
<LineStart>264</LineStart>
<Snippet>
                // keep the previous request name in the session
                session.setAttribute(&quot;_PREVIOUS_REQUEST_&quot;, request.getPathInfo());

                // NOTE: not using the old _PREVIOUS_PARAMS_ attribute at all because it was a security hole as it was used to put data in the URL (never encrypted) that was originally in a form field that may have been encrypted</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="D88D60730F418498ED5584FC17E54CFA">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 130, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>130</LineStart>
<Snippet>        }
        checkAfterNewline();
        super.write(s, offset, i - offset);
    }
}</Snippet>
                            </Primary>
                            <Source>
<FileName>LoginEvents.java</FileName>
<FilePath>applications/securityext/src/org/ofbiz/securityext/login/LoginEvents.java</FilePath>
<LineStart>76</LineStart>
<Snippet>        if (userLogin == null) {

            String username = request.getParameter(&quot;USERNAME&quot;);
            String password = request.getParameter(&quot;PASSWORD&quot;);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="BAE3DDD93F42C1EC1652BB03A497F2A9">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>TrackingCodeEvents.java</FileName>
<FilePath>applications/marketing/src/org/ofbiz/marketing/tracking/TrackingCodeEvents.java</FilePath>
<LineStart>371</LineStart>
<Snippet>        java.sql.Timestamp nowStamp = UtilDateTime.nowTimestamp();

        String trackingCodeId = request.getParameter(&quot;autoTrackingCode&quot;);
        if (UtilValidate.isEmpty(trackingCodeId)) trackingCodeId = request.getParameter(&quot;atc&quot;);
        if (UtilValidate.isEmpty(trackingCodeId)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="6D2F2DF723A95B91D78B8E0E966CD8E4">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>WebPosEvents.java</FileName>
<FilePath>specialpurpose/webpos/src/org/ofbiz/webpos/WebPosEvents.java</FilePath>
<LineStart>58</LineStart>
<Snippet>        
        // get the posTerminalId
        String posTerminalId = (String) request.getParameter(&quot;posTerminalId&quot;);
        session.removeAttribute(&quot;shoppingCart&quot;);
        session.removeAttribute(&quot;webPosSession&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="EF86ED32735A2D7600A4DA6D901C9DA3">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 115, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>115</LineStart>
<Snippet>    @Override
    public void write(String s) throws IOException {
        write(s, 0, s.length());
    }
</Snippet>
                            </Primary>
                            <Source>
<FileName>LoginEvents.java</FileName>
<FilePath>applications/securityext/src/org/ofbiz/securityext/login/LoginEvents.java</FilePath>
<LineStart>77</LineStart>
<Snippet>
            String username = request.getParameter(&quot;USERNAME&quot;);
            String password = request.getParameter(&quot;PASSWORD&quot;);

            if ((username != null) &amp;&amp; (&quot;true&quot;.equalsIgnoreCase(UtilProperties.getPropertyValue(&quot;security.properties&quot;, &quot;username.lowercase&quot;)))) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="219FCF6F-A77C-4219-8506-F5A0A0D6BE4A" iid="92BF57D15EDB3012125B2E64442C3B4B">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method closeEditWrap() in RenderContentTransform.java sends unvalidated data to a web browser on line 144, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>RenderContentTransform.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderContentTransform.java</FilePath>
<LineStart>144</LineStart>
<Snippet>                ServletContext servletContext = request.getSession().getServletContext();
                RequestHandler rh = (RequestHandler) servletContext.getAttribute(&quot;_REQUEST_HANDLER_&quot;);
                out.append(rh.makeLink(request, response, &quot;/&quot; + fullRequest, false, false, true));
                out.write(&quot;\&quot;&gt;Edit&lt;/a&gt;&quot;);
                out.write(&quot;&lt;/div&gt;&quot;);</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>575</LineStart>
<Snippet>        while (e.hasMoreElements()) {
            String name = e.nextElement();
            request.setAttribute(name, request.getParameter(name));
        }
    }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="6F9571E66AEDB42E49DE23BD86FF8134">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1388</LineStart>
<Snippet>        ShoppingCart cart = null;
        try {
            Map&lt;String, Object&gt; outMap = dispatcher.runSync(&quot;loadCartFromOrder&quot;,
                                                UtilMisc.&lt;String, Object&gt;toMap(&quot;orderId&quot;, orderId,
                                                        &quot;skipProductChecks&quot;, Boolean.TRUE, // the products have already been checked in the order, no need to check their validity again</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="8D8CBC79EDF47B0A1706E72E5A1B60AB">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>672</LineStart>
<Snippet>        HttpSession session = request.getSession();
        Locale locale = UtilHttp.getLocale(request);
        String supplierPartyId = request.getParameter(&quot;supplierPartyId_o_0&quot;);
        
        // check the preferred currency of the supplier, if set, use that for the cart, otherwise use system defaults.</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="15F69E90292BEA0A3839DBCB790B70E7">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 115, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>115</LineStart>
<Snippet>    @Override
    public void write(String s) throws IOException {
        write(s, 0, s.length());
    }
</Snippet>
                            </Primary>
                            <Source>
<FileName>TrackingCodeEvents.java</FileName>
<FilePath>applications/marketing/src/org/ofbiz/marketing/tracking/TrackingCodeEvents.java</FilePath>
<LineStart>93</LineStart>
<Snippet>     */
    public static String checkPartnerTrackingCodeUrlParam(HttpServletRequest request, HttpServletResponse response) {
        String trackingCodeId = request.getParameter(&quot;ptc&quot;);

        if (UtilValidate.isNotEmpty(trackingCodeId)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="7D43B11FED70E5D8B6574B47AD046012">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method checkAfterNewline() in IndentingWriter.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>58</LineStart>
<Snippet>            if (doSpace) {
                if (doNewline) {
                    super.write(indent.toString(), 0, indent.length());
                } else {
                    super.write(' ');</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>575</LineStart>
<Snippet>        while (e.hasMoreElements()) {
            String name = e.nextElement();
            request.setAttribute(name, request.getParameter(name));
        }
    }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="AC78ED65BFDD5243A4F492B9D0DFDBDE">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method close() in OfbizUrlTransform.java sends unvalidated data to a web browser on line 205, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>OfbizUrlTransform.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/ftl/OfbizUrlTransform.java</FilePath>
<LineStart>205</LineStart>
<Snippet>                        String requestUrl = buf.toString();
                        newURL.append(requestUrl);
                        out.write(newURL.toString());
                    } else if (req != null) {
                        HttpServletRequest request = (HttpServletRequest) req.getWrappedObject();</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>261</LineStart>
<Snippet>        ByteBuffer imageData = (ByteBuffer) tempFile.get(&quot;imageData&quot;);
        if (UtilValidate.isEmpty(imageName) || UtilValidate.isEmpty(imageData)) {
            session.setAttribute(&quot;frameContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
            session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;There is no frame image, please select the image type *.PNG  uploading.&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="3B79B12FA33E598DBA9741841D8199F8">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 115, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>115</LineStart>
<Snippet>    @Override
    public void write(String s) throws IOException {
        write(s, 0, s.length());
    }
</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1535</LineStart>
<Snippet>
        // TODO: re-factor and move this inside the ShoppingCart constructor
        String orderMode = request.getParameter(&quot;orderMode&quot;);
        if (orderMode != null) {
            cart.setOrderType(orderMode);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="DEEDC5034A685073509EED1EB013F638">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>CmsEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/cms/CmsEvents.java</FilePath>
<LineStart>107</LineStart>
<Snippet>            pathInfo = overrideViewUri;
        } else {
            pathInfo = request.getPathInfo();
            if (targetRequest.equals(actualRequest) &amp;&amp; pathInfo != null) {
                // was called directly -- path info is everything after the request</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1C85B63C-0870-45B8-9909-86BA43F68B05" iid="66F0A085F529A7381FAC561BD1DB6384">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method closeEditWrap() in RenderContentTransform.java sends unvalidated data to a web browser on line 144, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>RenderContentTransform.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderContentTransform.java</FilePath>
<LineStart>144</LineStart>
<Snippet>                ServletContext servletContext = request.getSession().getServletContext();
                RequestHandler rh = (RequestHandler) servletContext.getAttribute(&quot;_REQUEST_HANDLER_&quot;);
                out.append(rh.makeLink(request, response, &quot;/&quot; + fullRequest, false, false, true));
                out.write(&quot;\&quot;&gt;Edit&lt;/a&gt;&quot;);
                out.write(&quot;&lt;/div&gt;&quot;);</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceMultiEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceMultiEventHandler.java</FilePath>
<LineStart>308</LineStart>
<Snippet>                Map&lt;String, Object&gt; result = null;
                try {
                    result = dispatcher.runSync(serviceName, serviceContext);
                } catch (ServiceAuthException e) {
                    // not logging since the service engine already did</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="A7B8E7D7E90072B4C520977BE15A4245">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>CheckOutEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/CheckOutEvents.java</FilePath>
<LineStart>384</LineStart>
<Snippet>        if (UtilValidate.isNotEmpty(taxAuthPartyGeoIds)) {
            try {
                Map&lt;String, Object&gt; createCustomerTaxAuthInfoResult = dispatcher.runSync(&quot;createCustomerTaxAuthInfo&quot;,
                        UtilMisc.toMap(&quot;partyId&quot;, cart.getPartyId(), &quot;taxAuthPartyGeoIds&quot;, taxAuthPartyGeoIds, &quot;partyTaxId&quot;, partyTaxId, &quot;isExempt&quot;, isExempt));
                ServiceUtil.getMessages(request, createCustomerTaxAuthInfoResult, null);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="12AF265A-8085-459E-A9C9-E0922DFFE1F5" iid="1F23FF99E69144019A4DD3B11663EA8B">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>OrderEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/order/OrderEvents.java</FilePath>
<LineStart>125</LineStart>
<Snippet>                        contextMap.put(&quot;userLogin&quot;, userLogin);
                        try {
                            resultMap = dispatcher.runSync(&quot;cancelOrderItem&quot;, contextMap);

                            if (ServiceUtil.isError(resultMap)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="47620C95-01F7-474F-9944-4C54A9A43679" iid="B8958C98C7AEF007EF8F3DC93C0F3B4F">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method closeEditWrap() in RenderContentAsText.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RenderContentAsText.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderContentAsText.java</FilePath>
<LineStart>244</LineStart>
<Snippet>                ServletContext servletContext = request.getSession().getServletContext();
                RequestHandler rh = (RequestHandler) servletContext.getAttribute(&quot;_REQUEST_HANDLER_&quot;);
                out.append(rh.makeLink(request, response, &quot;/&quot; + fullRequest, false, false, true));
                out.write(&quot;\&quot;&gt;Edit&lt;/a&gt;&quot;);
                out.write(&quot;&lt;/div&gt;&quot;);</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>119</LineStart>
<Snippet>            contentRevisionMap.put(&quot;contentId&quot;, contentId);
            contentRevisionMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentRevisionAndItem&quot;, contentRevisionMap);
            keySet = result.keySet();
            iter = keySet.iterator();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="2BF92741C6CE63BC34CF0580ABF3A4B4">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>561</LineStart>
<Snippet>        session.setAttribute(&quot;_CLIENT_REFERER_&quot;, request.getHeader(&quot;Referer&quot;) != null ? request.getHeader(&quot;Referer&quot;) : &quot;&quot;);

        session.setAttribute(&quot;_CLIENT_FORWARDED_FOR_&quot;, request.getHeader(&quot;X-Forwarded-For&quot;));
        session.setAttribute(&quot;_CLIENT_REMOTE_ADDR_&quot;, request.getRemoteAddr());
        session.setAttribute(&quot;_CLIENT_REMOTE_HOST_&quot;, request.getRemoteHost());</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="12AF265A-8085-459E-A9C9-E0922DFFE1F5" iid="A01DE2335AA15A222E06C051EC282621">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>182</LineStart>
<Snippet>                }
                if (UtilValidate.isNotEmpty(map.get(&quot;contentAssocTypeId&quot;))) {
                    ftlResults = dispatcher.runSync(&quot;createContentAssoc&quot;, map);
                    isError = ModelService.RESPOND_ERROR.equals(ftlResults.get(ModelService.RESPONSE_MESSAGE));
                    if (isError) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="EDF08C0A83A634A76A7156951B51929B">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method close() in OfbizUrlTransform.java sends unvalidated data to a web browser on line 205, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>OfbizUrlTransform.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/ftl/OfbizUrlTransform.java</FilePath>
<LineStart>205</LineStart>
<Snippet>                        String requestUrl = buf.toString();
                        newURL.append(requestUrl);
                        out.write(newURL.toString());
                    } else if (req != null) {
                        HttpServletRequest request = (HttpServletRequest) req.getWrappedObject();</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>945</LineStart>
<Snippet>            newCart = cartList.remove(cartIndex);
        } else {
            String productStoreId = request.getParameter(&quot;productStoreId&quot;);
            if (UtilValidate.isNotEmpty(productStoreId)) {
                session.setAttribute(&quot;productStoreId&quot;, productStoreId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1C85B63C-0870-45B8-9909-86BA43F68B05" iid="18975D5458FF0B321F242AA21BB29F89">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method closeEditWrap() in RenderSubContentCacheTransform.java sends unvalidated data to a web browser on line 275, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>RenderSubContentCacheTransform.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderSubContentCacheTransform.java</FilePath>
<LineStart>275</LineStart>
<Snippet>                ServletContext servletContext = request.getSession().getServletContext();
                RequestHandler rh = (RequestHandler) servletContext.getAttribute(&quot;_REQUEST_HANDLER_&quot;);
                out.append(rh.makeLink(request, response, &quot;/&quot; + fullRequest, false, false, true));
                out.write(&quot;\&quot;&gt;Edit&lt;/a&gt;&quot;);
                out.write(&quot;&lt;/div&gt;&quot;);</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceMultiEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceMultiEventHandler.java</FilePath>
<LineStart>308</LineStart>
<Snippet>                Map&lt;String, Object&gt; result = null;
                try {
                    result = dispatcher.runSync(serviceName, serviceContext);
                } catch (ServiceAuthException e) {
                    // not logging since the service engine already did</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="FAF2619346EAEDA5119D2CDBCFD90D0F">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>403</LineStart>
<Snippet>            if (UtilValidate.isNotEmpty(request.getParameter(&quot;frameExistContentId&quot;)) &amp;&amp; UtilValidate.isNotEmpty(request.getParameter(&quot;frameExistDataResourceId&quot;))) {
                session.setAttribute(&quot;frameExistContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
                session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            }
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;Required frame image content ID&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="57713D43C58ED08EB26C18712D956113">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method toJsonObjectList() in EbayStoreOptions.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>EbayStoreOptions.java</FileName>
<FilePath>specialpurpose/ebaystore/src/org/ofbiz/ebaystore/EbayStoreOptions.java</FilePath>
<LineStart>273</LineStart>
<Snippet>            try {
                out = response.getWriter();
                out.write(jsonStr);
                out.flush();
            } catch (IOException e) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceMultiEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceMultiEventHandler.java</FilePath>
<LineStart>308</LineStart>
<Snippet>                Map&lt;String, Object&gt; result = null;
                try {
                    result = dispatcher.runSync(serviceName, serviceContext);
                } catch (ServiceAuthException e) {
                    // not logging since the service engine already did</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="870D9B2F611C88058FBD7F1D6967701D">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingListEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppinglist/ShoppingListEvents.java</FilePath>
<LineStart>349</LineStart>
<Snippet>        Map&lt;String, Object&gt; result = null;
        try {
            result = dispatcher.runSync(&quot;updateShoppingListItem&quot;, serviceInMap);
        } catch (GenericServiceException e) {
            String errMsg = UtilProperties.getMessage(resource_error,&quot;shoppingListEvents.error_calling_update&quot;, locale) + &quot;: &quot;  + e.toString();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="8290D8D95F0FB8456B53CE43DE3EC055">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>348</LineStart>
<Snippet>        }
        String frameContentId = request.getParameter(&quot;frameContentId&quot;);
        String frameDataResourceId = request.getParameter(&quot;frameDataResourceId&quot;);
        
        if (UtilValidate.isEmpty(request.getParameter(&quot;imageWidth&quot;)) || UtilValidate.isEmpty(request.getParameter(&quot;imageHeight&quot;))) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="3FA76E8BA4B30082E2E4145D5D2CAAF4">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method close() in OfbizUrlTransform.java sends unvalidated data to a web browser on line 205, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>OfbizUrlTransform.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/ftl/OfbizUrlTransform.java</FilePath>
<LineStart>205</LineStart>
<Snippet>                        String requestUrl = buf.toString();
                        newURL.append(requestUrl);
                        out.write(newURL.toString());
                    } else if (req != null) {
                        HttpServletRequest request = (HttpServletRequest) req.getWrappedObject();</Snippet>
                            </Primary>
                            <Source>
<FileName>LoginEvents.java</FileName>
<FilePath>applications/securityext/src/org/ofbiz/securityext/login/LoginEvents.java</FilePath>
<LineStart>76</LineStart>
<Snippet>        if (userLogin == null) {

            String username = request.getParameter(&quot;USERNAME&quot;);
            String password = request.getParameter(&quot;PASSWORD&quot;);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="B22BFC02E82EC6A2D49CEE5B1FC13D22">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingListEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppinglist/ShoppingListEvents.java</FilePath>
<LineStart>349</LineStart>
<Snippet>        Map&lt;String, Object&gt; result = null;
        try {
            result = dispatcher.runSync(&quot;updateShoppingListItem&quot;, serviceInMap);
        } catch (GenericServiceException e) {
            String errMsg = UtilProperties.getMessage(resource_error,&quot;shoppingListEvents.error_calling_update&quot;, locale) + &quot;: &quot;  + e.toString();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="968CE2C6356A5E330C566DB6AD85C1A2">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>CommonEvents.java</FileName>
<FilePath>framework/common/src/org/ofbiz/common/CommonEvents.java</FilePath>
<LineStart>231</LineStart>
<Snippet>    /** Simple event to set the users per-session currency uom value */
    public static String setSessionCurrencyUom(HttpServletRequest request, HttpServletResponse response) {
        String currencyUom = request.getParameter(&quot;currencyUom&quot;);
        if (UtilValidate.isNotEmpty(currencyUom)) {
            // update the session</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792" iid="3B7E5734F09E49FAC3D85C235B468FA7">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doEndTag() in UrlTag.java sends unvalidated data to a web browser on line 57, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>UrlTag.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/taglib/UrlTag.java</FilePath>
<LineStart>57</LineStart>
<Snippet>
        try {
            getPreviousOut().print(newURL);
        } catch (IOException e) {
            if (UtilJ2eeCompat.useNestedJspException(pageContext.getServletContext())) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>575</LineStart>
<Snippet>        while (e.hasMoreElements()) {
            String name = e.nextElement();
            request.setAttribute(name, request.getParameter(name));
        }
    }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="D027DAA9-A3BE-49E4-BDBF-3DFF657F84CA" iid="8C18FC0F51B5EA66043D8E285741DAD6">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>ProductEvents.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/product/ProductEvents.java</FilePath>
<LineStart>804</LineStart>
<Snippet>        //Timestamp nowTimestamp = UtilDateTime.nowTimestamp();
        //GenericValue userLogin = (GenericValue) request.getSession().getAttribute(&quot;userLogin&quot;);
        String productId = request.getParameter(&quot;productId&quot;);
        String productFeatureId = request.getParameter(&quot;productFeatureId&quot;);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="D027DAA9-A3BE-49E4-BDBF-3DFF657F84CA" iid="141813980DAC7DB4833090035F5ECC61">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>CommonEvents.java</FileName>
<FilePath>framework/common/src/org/ofbiz/common/CommonEvents.java</FilePath>
<LineStart>179</LineStart>
<Snippet>     * setting should be passed as a &quot;newLocale&quot; request parameter. */
    public static String setSessionLocale(HttpServletRequest request, HttpServletResponse response) {
        String localeString = request.getParameter(&quot;newLocale&quot;);
        if (UtilValidate.isNotEmpty(localeString)) {
            UtilHttp.setLocale(request, localeString);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="DC071AAC49326FE53069033C89EA61A3">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method render() in Section.java sends unvalidated data to a web browser on line 100, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Section.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/region/Section.java</FilePath>
<LineStart>100</LineStart>
<Snippet>                    response.getOutputStream().print(content);
                } else {
                    response.getWriter().print(content);
                }
            } else if (&quot;default&quot;.equals(type) || &quot;region&quot;.equals(type) || &quot;resource&quot;.equals(type) || &quot;jpublish&quot;.equals(type)) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>119</LineStart>
<Snippet>            contentRevisionMap.put(&quot;contentId&quot;, contentId);
            contentRevisionMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentRevisionAndItem&quot;, contentRevisionMap);
            keySet = result.keySet();
            iter = keySet.iterator();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="DF45214F272B59AEBAB49344C58E3C54">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>ProductEvents.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/product/ProductEvents.java</FilePath>
<LineStart>804</LineStart>
<Snippet>        //Timestamp nowTimestamp = UtilDateTime.nowTimestamp();
        //GenericValue userLogin = (GenericValue) request.getSession().getAttribute(&quot;userLogin&quot;);
        String productId = request.getParameter(&quot;productId&quot;);
        String productFeatureId = request.getParameter(&quot;productFeatureId&quot;);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="4235A6BC6EAE81C7BE6A9EB92111EF1D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 115, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>115</LineStart>
<Snippet>    @Override
    public void write(String s) throws IOException {
        write(s, 0, s.length());
    }
</Snippet>
                            </Primary>
                            <Source>
<FileName>SOAPEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/SOAPEventHandler.java</FilePath>
<LineStart>328</LineStart>
<Snippet>        uri.append(request.getServletPath());

        String reqInfo = RequestHandler.getRequestUri(request.getPathInfo());
        if (!reqInfo.startsWith(&quot;/&quot;)) {
            reqInfo = &quot;/&quot; + reqInfo;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="12AF265A-8085-459E-A9C9-E0922DFFE1F5" iid="C7E21816BFB5FC7045795D581B1197A4">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>221</LineStart>
<Snippet>                sumContext.put(&quot;mapKey&quot;, &quot;SUMMARY&quot;);
                sumContext.put(&quot;dataTemplateTypeId&quot;, &quot;NONE&quot;);
                Map&lt;String, Object&gt; sumResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, sumContext);
                isError = ModelService.RESPOND_ERROR.equals(sumResults.get(ModelService.RESPONSE_MESSAGE));
                if (isError) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="B3664E8018386364928C1EC9DF1AD5BD">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method httpEngine() in HttpEngine.java sends unvalidated data to a web browser on line 187, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>HttpEngine.java</FileName>
<FilePath>framework/service/src/org/ofbiz/service/engine/HttpEngine.java</FilePath>
<LineStart>187</LineStart>
<Snippet>            if (errorMessage.length() &gt; 0) {
                response.setContentLength(errorMessage.length());
                out.write(errorMessage.toString());
            } else {
                response.setContentLength(resultString.length());</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceEventHandler.java</FilePath>
<LineStart>337</LineStart>
<Snippet>                dispatcher.runAsync(serviceName, serviceContext);
            } else {
                result = dispatcher.runSync(serviceName, serviceContext);
            }
        } catch (ServiceAuthException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="353A77B5391D918EF92B54271015935B">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>251</LineStart>
<Snippet>                txtContext.put(&quot;mapKey&quot;, &quot;ARTICLE&quot;);
                txtContext.put(&quot;dataTemplateTypeId&quot;, &quot;NONE&quot;);
                Map&lt;String, Object&gt; txtResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, txtContext);
                isError = ModelService.RESPOND_ERROR.equals(txtResults.get(ModelService.RESPONSE_MESSAGE));
                if (isError) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="D027DAA9-A3BE-49E4-BDBF-3DFF657F84CA" iid="771DEDC3C5BE906F116F313CBA4B6929">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>GenericWebEvent.java</FileName>
<FilePath>framework/webtools/src/org/ofbiz/webtools/GenericWebEvent.java</FilePath>
<LineStart>135</LineStart>
<Snippet>            }

            String fval = request.getParameter(field.getName());
            if (UtilValidate.isNotEmpty(fval)) {
                try {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="45CEC2C0622DDC95BE6F1E90F5DD81A9">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>CoreEvents.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/CoreEvents.java</FilePath>
<LineStart>412</LineStart>
<Snippet>        try {
            if (null!=request.getParameter(&quot;_RUN_SYNC_&quot;) &amp;&amp; request.getParameter(&quot;_RUN_SYNC_&quot;).equals(&quot;Y&quot;)) {
                syncServiceResult = dispatcher.runSync(serviceName, serviceContext);
            } else {
                dispatcher.schedule(jobName, poolName, serviceName, serviceContext, startTime, frequency, interval, count, endTime, maxRetry);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="BC009024E4D196E63370603EFF03B3C4">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>CommonEvents.java</FileName>
<FilePath>framework/common/src/org/ofbiz/common/CommonEvents.java</FilePath>
<LineStart>179</LineStart>
<Snippet>     * setting should be passed as a &quot;newLocale&quot; request parameter. */
    public static String setSessionLocale(HttpServletRequest request, HttpServletResponse response) {
        String localeString = request.getParameter(&quot;newLocale&quot;);
        if (UtilValidate.isNotEmpty(localeString)) {
            UtilHttp.setLocale(request, localeString);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1C85B63C-0870-45B8-9909-86BA43F68B05" iid="9BE88C311AB3F371CF2FD550DD3F0543">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method closeEditWrap() in RenderContentTransform.java sends unvalidated data to a web browser on line 144, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>RenderContentTransform.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderContentTransform.java</FilePath>
<LineStart>144</LineStart>
<Snippet>                ServletContext servletContext = request.getSession().getServletContext();
                RequestHandler rh = (RequestHandler) servletContext.getAttribute(&quot;_REQUEST_HANDLER_&quot;);
                out.append(rh.makeLink(request, response, &quot;/&quot; + fullRequest, false, false, true));
                out.write(&quot;\&quot;&gt;Edit&lt;/a&gt;&quot;);
                out.write(&quot;&lt;/div&gt;&quot;);</Snippet>
                            </Primary>
                            <Source>
<FileName>CoreEvents.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/CoreEvents.java</FilePath>
<LineStart>412</LineStart>
<Snippet>        try {
            if (null!=request.getParameter(&quot;_RUN_SYNC_&quot;) &amp;&amp; request.getParameter(&quot;_RUN_SYNC_&quot;).equals(&quot;Y&quot;)) {
                syncServiceResult = dispatcher.runSync(serviceName, serviceContext);
            } else {
                dispatcher.schedule(jobName, poolName, serviceName, serviceContext, startTime, frequency, interval, count, endTime, maxRetry);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="B9585A7645ECBF17DBDBAF2BCFB0C833">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method close() in OfbizUrlTransform.java sends unvalidated data to a web browser on line 205, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>OfbizUrlTransform.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/ftl/OfbizUrlTransform.java</FilePath>
<LineStart>205</LineStart>
<Snippet>                        String requestUrl = buf.toString();
                        newURL.append(requestUrl);
                        out.write(newURL.toString());
                    } else if (req != null) {
                        HttpServletRequest request = (HttpServletRequest) req.getWrappedObject();</Snippet>
                            </Primary>
                            <Source>
<FileName>CoreEvents.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/CoreEvents.java</FilePath>
<LineStart>412</LineStart>
<Snippet>        try {
            if (null!=request.getParameter(&quot;_RUN_SYNC_&quot;) &amp;&amp; request.getParameter(&quot;_RUN_SYNC_&quot;).equals(&quot;Y&quot;)) {
                syncServiceResult = dispatcher.runSync(serviceName, serviceContext);
            } else {
                dispatcher.schedule(jobName, poolName, serviceName, serviceContext, startTime, frequency, interval, count, endTime, maxRetry);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="12AF265A-8085-459E-A9C9-E0922DFFE1F5" iid="DF674AB2529EB559E36C54632431F6F0">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>DataEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/data/DataEvents.java</FilePath>
<LineStart>136</LineStart>
<Snippet>            Map&lt;String, Object&gt; permSvcResp;
            try {
                permSvcResp = dispatcher.runSync(permissionService, permSvcCtx);
            } catch (GenericServiceException e) {
                Debug.logError(e, module);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="7EF18FA6C9A077ED8D7387EF4F1E2B98">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>115</LineStart>
<Snippet>    @Override
    public void write(String s) throws IOException {
        write(s, 0, s.length());
    }
</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>104</LineStart>
<Snippet>        persistMap.put(&quot;userLogin&quot;, userLogin);
        try {
            Map&lt;String, Object&gt; persistResult = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, persistMap);
            contentId = (String)persistResult.get(&quot;contentId&quot;);
            //request.setAttribute(&quot;contentId&quot;, contentId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="A8472C4C534684D8465CA0E1EFD86240">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>CheckOutHelper.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/CheckOutHelper.java</FilePath>
<LineStart>519</LineStart>
<Snippet>                Map&lt;String, Object&gt; gcResult = null;
                try {
                    gcResult = dispatcher.runSync(&quot;createGiftCard&quot;, gcCtx);
                } catch (GenericServiceException e) {
                    Debug.logError(e, module);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="45BF957F-1A34-4E28-9B34-FEB83EC96792" iid="60958A740A27FCF43C096EA443D79CB9">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method run() in InputValue.java sends unvalidated data to a web browser on line 143, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>InputValue.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/pseudotag/InputValue.java</FilePath>
<LineStart>143</LineStart>
<Snippet>            inputValue = UtilFormatOut.replaceString(inputValue, &quot;\&quot;&quot;, &quot;&amp;quot;&quot;);
            pageContext.getOut().print(&quot;name=\&quot;&quot; + paramName + &quot;\&quot; value=\&quot;&quot; +
                inputValue + &quot;\&quot;&quot;);
        } else {
            pageContext.getOut().print(inputValue);</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>575</LineStart>
<Snippet>        while (e.hasMoreElements()) {
            String name = e.nextElement();
            request.setAttribute(name, request.getParameter(name));
        }
    }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="F773D8FD17DEEEB9446DD34E7F8C8B4B">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method toJsonObjectList() in ImageManagementServices.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ImageManagementServices.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/ImageManagementServices.java</FilePath>
<LineStart>779</LineStart>
<Snippet>            try {
                out = response.getWriter();
                out.write(jsonStr);
                out.flush();
            } catch (IOException e) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>104</LineStart>
<Snippet>        persistMap.put(&quot;userLogin&quot;, userLogin);
        try {
            Map&lt;String, Object&gt; persistResult = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, persistMap);
            contentId = (String)persistResult.get(&quot;contentId&quot;);
            //request.setAttribute(&quot;contentId&quot;, contentId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5B9CE105-7C9E-402F-A6B5-3BB9EACDEE95" iid="71734531516A0C984E6A5A6A88D0C66C">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method streamContent() in UtilHttp.java sends unvalidated data to a web browser on line 1033, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>1033</LineStart>
<Snippet>        try {
            while ((read = bis.read(buffer, 0, buffer.length)) != -1) {
                bos.write(buffer, 0, read);
            }
        } catch (IOException e) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceMultiEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceMultiEventHandler.java</FilePath>
<LineStart>308</LineStart>
<Snippet>                Map&lt;String, Object&gt; result = null;
                try {
                    result = dispatcher.runSync(serviceName, serviceContext);
                } catch (ServiceAuthException e) {
                    // not logging since the service engine already did</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="BB46981FBA04BB1DD072354A4D8CA614">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method close() in OfbizUrlTransform.java sends unvalidated data to a web browser on line 205, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>OfbizUrlTransform.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/ftl/OfbizUrlTransform.java</FilePath>
<LineStart>205</LineStart>
<Snippet>                        String requestUrl = buf.toString();
                        newURL.append(requestUrl);
                        out.write(newURL.toString());
                    } else if (req != null) {
                        HttpServletRequest request = (HttpServletRequest) req.getWrappedObject();</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1535</LineStart>
<Snippet>
        // TODO: re-factor and move this inside the ShoppingCart constructor
        String orderMode = request.getParameter(&quot;orderMode&quot;);
        if (orderMode != null) {
            cart.setOrderType(orderMode);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="529E2822991E645DF25D492D0E5E1AE3">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1469</LineStart>
<Snippet>        String quoteId = null;
        try {
            result = dispatcher.runSync(&quot;createQuoteFromCart&quot;,
                    UtilMisc.toMap(&quot;cart&quot;, cart,
                            &quot;userLogin&quot;, userLogin));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1C85B63C-0870-45B8-9909-86BA43F68B05" iid="53129E62E5151735CC00EACFD8D0C49A">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method closeEditWrap() in RenderContentAsText.java sends unvalidated data to a web browser on line 244, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>RenderContentAsText.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderContentAsText.java</FilePath>
<LineStart>244</LineStart>
<Snippet>                ServletContext servletContext = request.getSession().getServletContext();
                RequestHandler rh = (RequestHandler) servletContext.getAttribute(&quot;_REQUEST_HANDLER_&quot;);
                out.append(rh.makeLink(request, response, &quot;/&quot; + fullRequest, false, false, true));
                out.write(&quot;\&quot;&gt;Edit&lt;/a&gt;&quot;);
                out.write(&quot;&lt;/div&gt;&quot;);</Snippet>
                            </Primary>
                            <Source>
<FileName>CoreEvents.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/CoreEvents.java</FilePath>
<LineStart>412</LineStart>
<Snippet>        try {
            if (null!=request.getParameter(&quot;_RUN_SYNC_&quot;) &amp;&amp; request.getParameter(&quot;_RUN_SYNC_&quot;).equals(&quot;Y&quot;)) {
                syncServiceResult = dispatcher.runSync(serviceName, serviceContext);
            } else {
                dispatcher.schedule(jobName, poolName, serviceName, serviceContext, startTime, frequency, interval, count, endTime, maxRetry);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="D027DAA9-A3BE-49E4-BDBF-3DFF657F84CA" iid="C76B1E68DE3A3BCD12E36A8AA08EBCA8">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>564</LineStart>
<Snippet>        session.setAttribute(&quot;_CLIENT_REMOTE_ADDR_&quot;, request.getRemoteAddr());
        session.setAttribute(&quot;_CLIENT_REMOTE_HOST_&quot;, request.getRemoteHost());
        session.setAttribute(&quot;_CLIENT_REMOTE_USER_&quot;, request.getRemoteUser());
    }
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="2E070AB8FEF8115B85B919306B85D25A">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>WebShoppingCart.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/WebShoppingCart.java</FilePath>
<LineStart>49</LineStart>
<Snippet>                (currencyUom != null ? currencyUom : ProductStoreWorker.getStoreCurrencyUomId(request)),
                request.getParameter(&quot;billToCustomerPartyId&quot;),
                (request.getParameter(&quot;supplierPartyId&quot;) != null ? request.getParameter(&quot;supplierPartyId&quot;) : request.getParameter(&quot;billFromVendorPartyId&quot;)));

        HttpSession session = request.getSession(true);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="F3ED6C925D5A2B0DE619722311CD759C">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 115, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>115</LineStart>
<Snippet>    @Override
    public void write(String s) throws IOException {
        write(s, 0, s.length());
    }
</Snippet>
                            </Primary>
                            <Source>
<FileName>ICalConverter.java</FileName>
<FilePath>applications/workeffort/src/org/ofbiz/workeffort/workeffort/ICalConverter.java</FilePath>
<LineStart>491</LineStart>
<Snippet>        localMap.put(&quot;locale&quot;, context.get(&quot;locale&quot;));
        try {
            return dispatcher.runSync(serviceName, localMap);
        } catch (GenericServiceException e) {
            String errMsg = &quot;Error while invoking service &quot; + serviceName + &quot;: &quot;;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="8835FA954A52F8E65F48F32CB6458DC6">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>402</LineStart>
<Snippet>        if(UtilValidate.isEmpty(request.getParameter(&quot;frameContentId&quot;))) {
            if (UtilValidate.isNotEmpty(request.getParameter(&quot;frameExistContentId&quot;)) &amp;&amp; UtilValidate.isNotEmpty(request.getParameter(&quot;frameExistDataResourceId&quot;))) {
                session.setAttribute(&quot;frameExistContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
                session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5B9CE105-7C9E-402F-A6B5-3BB9EACDEE95" iid="DB27CDC169B36168F98012EB9BD42C28">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method streamContent() in UtilHttp.java sends unvalidated data to a web browser on line 1033, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>1033</LineStart>
<Snippet>        try {
            while ((read = bis.read(buffer, 0, buffer.length)) != -1) {
                bos.write(buffer, 0, read);
            }
        } catch (IOException e) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>505</LineStart>
<Snippet>        Map&lt;String, Object&gt; ftlResults = null;
        try {
            ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
        } catch (ServiceAuthException e) {
            String msg = e.getMessage();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="9C99D3AC7666DD1D7AB816329F358CEE">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>561</LineStart>
<Snippet>        session.setAttribute(&quot;_CLIENT_REFERER_&quot;, request.getHeader(&quot;Referer&quot;) != null ? request.getHeader(&quot;Referer&quot;) : &quot;&quot;);

        session.setAttribute(&quot;_CLIENT_FORWARDED_FOR_&quot;, request.getHeader(&quot;X-Forwarded-For&quot;));
        session.setAttribute(&quot;_CLIENT_REMOTE_ADDR_&quot;, request.getRemoteAddr());
        session.setAttribute(&quot;_CLIENT_REMOTE_HOST_&quot;, request.getRemoteHost());</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="970D000AC3632B594A3A3717F1144870">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>409</LineStart>
<Snippet>        }
        
        String frameContentId = request.getParameter(&quot;frameContentId&quot;);
        Delegator delegator = (Delegator) request.getAttribute(&quot;delegator&quot;);
        </Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="2D1547E4A668FB7DBD687641458593CE">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method toJsonObjectList() in ImageManagementServices.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>ImageManagementServices.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/ImageManagementServices.java</FilePath>
<LineStart>779</LineStart>
<Snippet>            try {
                out = response.getWriter();
                out.write(jsonStr);
                out.flush();
            } catch (IOException e) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceEventHandler.java</FilePath>
<LineStart>337</LineStart>
<Snippet>                dispatcher.runAsync(serviceName, serviceContext);
            } else {
                result = dispatcher.runSync(serviceName, serviceContext);
            }
        } catch (ServiceAuthException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="CE0A6391E7FD444D889F144856961828">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method toJsonObjectList() in ImageManagementServices.java sends unvalidated data to a web browser on line 779, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ImageManagementServices.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/ImageManagementServices.java</FilePath>
<LineStart>779</LineStart>
<Snippet>            try {
                out = response.getWriter();
                out.write(jsonStr);
                out.flush();
            } catch (IOException e) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CoreEvents.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/CoreEvents.java</FilePath>
<LineStart>412</LineStart>
<Snippet>        try {
            if (null!=request.getParameter(&quot;_RUN_SYNC_&quot;) &amp;&amp; request.getParameter(&quot;_RUN_SYNC_&quot;).equals(&quot;Y&quot;)) {
                syncServiceResult = dispatcher.runSync(serviceName, serviceContext);
            } else {
                dispatcher.schedule(jobName, poolName, serviceName, serviceContext, startTime, frequency, interval, count, endTime, maxRetry);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="B0A69E5CC7B6B288C17CBBB9615CF107">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>150</LineStart>
<Snippet>            String contentAssocTypeId = (String)passedParams.get(&quot;contentAssocTypeId&quot;);
            ftlContext.put(&quot;contentAssocTypeId&quot;, null); // Don't post assoc at this time
            Map&lt;String, Object&gt; ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
            boolean isError = ModelService.RESPOND_ERROR.equals(ftlResults.get(ModelService.RESPONSE_MESSAGE));
            if (isError) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="B8B49ADC709044CEA810D9780A39B0AA">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>LayoutEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/layout/LayoutEvents.java</FilePath>
<LineStart>483</LineStart>
<Snippet>                Debug.logVerbose(&quot;in createSubContent, context:&quot; + context, module);
            }
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, context);
            boolean isError = ModelService.RESPOND_ERROR.equals(result.get(ModelService.RESPONSE_MESSAGE));
            if (isError) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="E4957B080FDF2D297D16CC75F856335C">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method outputError() in ServiceStreamHandler.java sends unvalidated data to a web browser on line 110, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ServiceStreamHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceStreamHandler.java</FilePath>
<LineStart>110</LineStart>
<Snippet>        PrintStream out = new PrintStream(stream);
        if (message != null)
            out.println(&quot;Error message: &quot; + message);
        if (error != null)
            out.println(&quot;Exception occured: &quot; + error.toString());</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>119</LineStart>
<Snippet>            contentRevisionMap.put(&quot;contentId&quot;, contentId);
            contentRevisionMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentRevisionAndItem&quot;, contentRevisionMap);
            keySet = result.keySet();
            iter = keySet.iterator();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="51A1FEACF7C94A60C08C6BAA5F657FDA">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>TrackingCodeEvents.java</FileName>
<FilePath>applications/marketing/src/org/ofbiz/marketing/tracking/TrackingCodeEvents.java</FilePath>
<LineStart>374</LineStart>
<Snippet>        if (UtilValidate.isEmpty(trackingCodeId)) trackingCodeId = request.getParameter(&quot;atc&quot;);
        if (UtilValidate.isEmpty(trackingCodeId)) {
            Cookie[] cookies = request.getCookies();
            if (cookies != null) {
                for (Cookie cookie : cookies) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="EAADA5035E8745D1894F6888EB086785">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method close() in OfbizUrlTransform.java sends unvalidated data to a web browser on line 205, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>OfbizUrlTransform.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/ftl/OfbizUrlTransform.java</FilePath>
<LineStart>205</LineStart>
<Snippet>                        String requestUrl = buf.toString();
                        newURL.append(requestUrl);
                        out.write(newURL.toString());
                    } else if (req != null) {
                        HttpServletRequest request = (HttpServletRequest) req.getWrappedObject();</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1327</LineStart>
<Snippet>        ShoppingCart cart = null;
        try {
            Map&lt;String, Object&gt; outMap = dispatcher.runSync(&quot;loadCartFromShoppingList&quot;,
                    UtilMisc.&lt;String, Object&gt;toMap(&quot;shoppingListId&quot;, shoppingListId,
                    &quot;userLogin&quot;, userLogin));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="1B0D96BB5186C2B2CEBB17CB7EF188F9">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method close() in OfbizUrlTransform.java sends unvalidated data to a web browser on line 205, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>OfbizUrlTransform.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/ftl/OfbizUrlTransform.java</FilePath>
<LineStart>205</LineStart>
<Snippet>                        String requestUrl = buf.toString();
                        newURL.append(requestUrl);
                        out.write(newURL.toString());
                    } else if (req != null) {
                        HttpServletRequest request = (HttpServletRequest) req.getWrappedObject();</Snippet>
                            </Primary>
                            <Source>
<FileName>CatalogUrlServlet.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/category/CatalogUrlServlet.java</FilePath>
<LineStart>80</LineStart>
<Snippet>        Delegator delegator = (Delegator) getServletContext().getAttribute(&quot;delegator&quot;);

        String pathInfo = request.getPathInfo();
        List&lt;String&gt; pathElements = StringUtil.split(pathInfo, &quot;/&quot;);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="FB947104A838833967358D53B3882DF3">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method close() in OfbizUrlTransform.java sends unvalidated data to a web browser on line 205, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>OfbizUrlTransform.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/ftl/OfbizUrlTransform.java</FilePath>
<LineStart>205</LineStart>
<Snippet>                        String requestUrl = buf.toString();
                        newURL.append(requestUrl);
                        out.write(newURL.toString());
                    } else if (req != null) {
                        HttpServletRequest request = (HttpServletRequest) req.getWrappedObject();</Snippet>
                            </Primary>
                            <Source>
<FileName>RequestHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/RequestHandler.java</FilePath>
<LineStart>128</LineStart>
<Snippet>        }

        String overrideViewUri = RequestHandler.getOverrideViewUri(request.getPathInfo());

        String requestMissingErrorMessage = &quot;Unknown request [&quot; + defaultRequestUri + &quot;]; this request does not exist or cannot be called directly.&quot;;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="75CA7134-B6BE-444A-9815-E739432FCA47" iid="FE56D3F7E816A3A4107885DF5DECA1A1">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method run() in InputValue.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>InputValue.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/pseudotag/InputValue.java</FilePath>
<LineStart>143</LineStart>
<Snippet>            inputValue = UtilFormatOut.replaceString(inputValue, &quot;\&quot;&quot;, &quot;&amp;quot;&quot;);
            pageContext.getOut().print(&quot;name=\&quot;&quot; + paramName + &quot;\&quot; value=\&quot;&quot; +
                inputValue + &quot;\&quot;&quot;);
        } else {
            pageContext.getOut().print(inputValue);</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>119</LineStart>
<Snippet>            contentRevisionMap.put(&quot;contentId&quot;, contentId);
            contentRevisionMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentRevisionAndItem&quot;, contentRevisionMap);
            keySet = result.keySet();
            iter = keySet.iterator();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="12AF265A-8085-459E-A9C9-E0922DFFE1F5" iid="14844B4C339C11B6E1C6220E04D932E3">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>312</LineStart>
<Snippet>            contentCtx.put(&quot;fromDate&quot;, UtilDateTime.nowTimestamp());
            contentCtx.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; contentResult = dispatcher.runSync(&quot;createContent&quot;, contentCtx);
            contentId = contentResult.get(&quot;contentId&quot;).toString();
        } catch (Exception e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="88ADE85B0D885AADBCC3760A9A00C495">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>945</LineStart>
<Snippet>            newCart = cartList.remove(cartIndex);
        } else {
            String productStoreId = request.getParameter(&quot;productStoreId&quot;);
            if (UtilValidate.isNotEmpty(productStoreId)) {
                session.setAttribute(&quot;productStoreId&quot;, productStoreId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="E8A6D25B7B4ADBC924160BE157D2CF43">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>GoogleBaseSearchEvents.java</FileName>
<FilePath>specialpurpose/googlebase/src/org/ofbiz/googlebase/GoogleBaseSearchEvents.java</FilePath>
<LineStart>122</LineStart>
<Snippet>                    inMap.put(&quot;productStoreId&quot;, productStoreId);
                    inMap.put(&quot;allowRecommended&quot;, allowRecommended);
                    Map&lt;String, Object&gt; exportResult = dispatcher.runSync(&quot;exportToGoogle&quot;, inMap);
                    if (ServiceUtil.isError(exportResult)) {
                        List&lt;String&gt; errorMessages = UtilGenerics.checkList(exportResult.get(ModelService.ERROR_MESSAGE_LIST), String.class);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="5BC179F632898FAFF9F51776BE0B7F29">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>221</LineStart>
<Snippet>                sumContext.put(&quot;mapKey&quot;, &quot;SUMMARY&quot;);
                sumContext.put(&quot;dataTemplateTypeId&quot;, &quot;NONE&quot;);
                Map&lt;String, Object&gt; sumResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, sumContext);
                isError = ModelService.RESPOND_ERROR.equals(sumResults.get(ModelService.RESPONSE_MESSAGE));
                if (isError) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="34D545FBF7A7C9331C493FCC575A581D">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 115, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>115</LineStart>
<Snippet>    @Override
    public void write(String s) throws IOException {
        write(s, 0, s.length());
    }
</Snippet>
                            </Primary>
                            <Source>
<FileName>AbstractOFBizAuthenticationHandler.java</FileName>
<FilePath>specialpurpose/ldap/src/org/ofbiz/ldap/commons/AbstractOFBizAuthenticationHandler.java</FilePath>
<LineStart>129</LineStart>
<Snippet>
        try {
            loginResult = dispatcher.runSync(&quot;userLogin&quot;, UtilMisc.toMap(&quot;login.username&quot;, username, &quot;login.password&quot;, password, &quot;visitId&quot;, visitId, &quot;locale&quot;, UtilHttp.getLocale(request)));
        } catch (GenericServiceException e) {
            throw new GenericServiceException(e.getLocalizedMessage());</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="45DA8632B5E3A846BB1BBD7359CEF677">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 115, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>115</LineStart>
<Snippet>    @Override
    public void write(String s) throws IOException {
        write(s, 0, s.length());
    }
</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceMultiEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceMultiEventHandler.java</FilePath>
<LineStart>308</LineStart>
<Snippet>                Map&lt;String, Object&gt; result = null;
                try {
                    result = dispatcher.runSync(serviceName, serviceContext);
                } catch (ServiceAuthException e) {
                    // not logging since the service engine already did</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="D027DAA9-A3BE-49E4-BDBF-3DFF657F84CA" iid="1E3610C5BA93B9E7E9646B43DE3744B4">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ImageUrlServlet.java sends unvalidated data to a web browser on line 113, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ImageUrlServlet.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/ImageUrlServlet.java</FilePath>
<LineStart>113</LineStart>
<Snippet>            rd.forward(request, response);
        } else {
            response.sendError(HttpServletResponse.SC_NOT_FOUND, &quot;Image not found with ID [&quot; + contentId + &quot;]&quot;);
        }
    }</Snippet>
                            </Primary>
                            <Source>
<FileName>ImageUrlServlet.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/ImageUrlServlet.java</FilePath>
<LineStart>75</LineStart>
<Snippet>        Delegator delegator = (Delegator) getServletContext().getAttribute(&quot;delegator&quot;);

        String pathInfo = request.getPathInfo();
        List&lt;String&gt; pathElements = StringUtil.split(pathInfo, &quot;/&quot;);
        </Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="D815F45CF87FFB43FD1261FE99BB2602">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 130, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>130</LineStart>
<Snippet>        }
        checkAfterNewline();
        super.write(s, offset, i - offset);
    }
}</Snippet>
                            </Primary>
                            <Source>
<FileName>RequestHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/RequestHandler.java</FilePath>
<LineStart>128</LineStart>
<Snippet>        }

        String overrideViewUri = RequestHandler.getOverrideViewUri(request.getPathInfo());

        String requestMissingErrorMessage = &quot;Unknown request [&quot; + defaultRequestUri + &quot;]; this request does not exist or cannot be called directly.&quot;;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="C0845DEF21D64647C7CECA664CEB9B50">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 124, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>124</LineStart>
<Snippet>            if (s.charAt(i) == '\n') {
                checkAfterNewline();
                super.write(s, offset, i - offset + 1);
                offset = i + 1;
                lastWasNewline = true;</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1354</LineStart>
<Snippet>        ShoppingCart cart = null;
        try {
            Map&lt;String, Object&gt; outMap = dispatcher.runSync(&quot;loadCartFromQuote&quot;,
                    UtilMisc.&lt;String, Object&gt;toMap(&quot;quoteId&quot;, quoteId,
                            &quot;applyQuoteAdjustments&quot;, &quot;true&quot;,</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="A1AB44F1E5D7388C76C475BCC6BEEFB4">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>SearchEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/search/SearchEvents.java</FilePath>
<LineStart>60</LineStart>
<Snippet>        serviceInMap.put(&quot;contentId&quot;, siteId);
        try {
            result = dispatcher.runSync(&quot;indexTree&quot;, serviceInMap);
        } catch (GenericServiceException e) {
            String errorMsg = &quot;Error calling the indexTree service.&quot; + e.toString();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="7919D8C545154A1A8AC0B33F0E0BEBB9">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 124, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>124</LineStart>
<Snippet>            if (s.charAt(i) == '\n') {
                checkAfterNewline();
                super.write(s, offset, i - offset + 1);
                offset = i + 1;
                lastWasNewline = true;</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>403</LineStart>
<Snippet>            if (UtilValidate.isNotEmpty(request.getParameter(&quot;frameExistContentId&quot;)) &amp;&amp; UtilValidate.isNotEmpty(request.getParameter(&quot;frameExistDataResourceId&quot;))) {
                session.setAttribute(&quot;frameExistContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
                session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            }
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;Required frame image content ID&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="9DD0E232B3443E5BEC885AFEDA51A8DB">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>ShipmentEvents.java</FileName>
<FilePath>applications/product/src/org/ofbiz/shipment/shipment/ShipmentEvents.java</FilePath>
<LineStart>49</LineStart>
<Snippet>
        String shipmentId = request.getParameter(&quot;shipmentId&quot;);
        String shipmentRouteSegmentId = request.getParameter(&quot;shipmentRouteSegmentId&quot;);
        String shipmentPackageSeqId = request.getParameter(&quot;shipmentPackageSeqId&quot;);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="505BA1442C40EF7ABBDCC40701F01C63">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method toJsonObjectList() in EbayStoreOptions.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>EbayStoreOptions.java</FileName>
<FilePath>specialpurpose/ebaystore/src/org/ofbiz/ebaystore/EbayStoreOptions.java</FilePath>
<LineStart>273</LineStart>
<Snippet>            try {
                out = response.getWriter();
                out.write(jsonStr);
                out.flush();
            } catch (IOException e) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>505</LineStart>
<Snippet>        Map&lt;String, Object&gt; ftlResults = null;
        try {
            ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
        } catch (ServiceAuthException e) {
            String msg = e.getMessage();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="ACC41FD6270E5182C427EC7C487BA9A8">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>183</LineStart>
<Snippet>        Map&lt;String, Object&gt; results = null;
        try {
            results = dispatcher.runSync(&quot;renderCompDocPdf&quot;, mapIn);
        } catch (ServiceAuthException e) {
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, e.toString());</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="322BA952C629A179772E1FC716294F68">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>ShipmentEvents.java</FileName>
<FilePath>applications/product/src/org/ofbiz/shipment/shipment/ShipmentEvents.java</FilePath>
<LineStart>49</LineStart>
<Snippet>
        String shipmentId = request.getParameter(&quot;shipmentId&quot;);
        String shipmentRouteSegmentId = request.getParameter(&quot;shipmentRouteSegmentId&quot;);
        String shipmentPackageSeqId = request.getParameter(&quot;shipmentPackageSeqId&quot;);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="CA8D1EDF4DEFAE61AED35684E65639DF">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>WebShoppingCart.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/WebShoppingCart.java</FilePath>
<LineStart>48</LineStart>
<Snippet>                WebSiteWorker.getWebSiteId(request), (locale != null ? locale : ProductStoreWorker.getStoreLocale(request)),
                (currencyUom != null ? currencyUom : ProductStoreWorker.getStoreCurrencyUomId(request)),
                request.getParameter(&quot;billToCustomerPartyId&quot;),
                (request.getParameter(&quot;supplierPartyId&quot;) != null ? request.getParameter(&quot;supplierPartyId&quot;) : request.getParameter(&quot;billFromVendorPartyId&quot;)));
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="D027DAA9-A3BE-49E4-BDBF-3DFF657F84CA" iid="B1EBA59DBE4310B0B21B24404FB1DEF6">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>268</LineStart>
<Snippet>        if (!&quot;image/png&quot;.equals(mimType)) {
            session.setAttribute(&quot;frameContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
            session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;The selected image type is incorrect, please select the image type *.PNG to upload.&quot;);
            return &quot;error&quot;;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="D027DAA9-A3BE-49E4-BDBF-3DFF657F84CA" iid="4D9E89D696BF297F42A700339DD406A5">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>558</LineStart>
<Snippet>        session.setAttribute(&quot;_CLIENT_LOCALE_&quot;, request.getLocale());
        session.setAttribute(&quot;_CLIENT_REQUEST_&quot;, fullRequestUrl.toString());
        session.setAttribute(&quot;_CLIENT_USER_AGENT_&quot;, request.getHeader(&quot;User-Agent&quot;) != null ? request.getHeader(&quot;User-Agent&quot;) : &quot;&quot;);
        session.setAttribute(&quot;_CLIENT_REFERER_&quot;, request.getHeader(&quot;Referer&quot;) != null ? request.getHeader(&quot;Referer&quot;) : &quot;&quot;);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="374E3D66804F7F8EBE114B9271A0DF50">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method openEditWrap() in RenderSubContentCacheTransform.java sends unvalidated data to a web browser on line 202, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>RenderSubContentCacheTransform.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderSubContentCacheTransform.java</FilePath>
<LineStart>202</LineStart>
<Snippet>            public void openEditWrap(Writer out, String editStyle) throws IOException {
                String divStr = &quot;&lt;div class=\&quot;&quot; + editStyle + &quot;\&quot;&gt;&quot;;
                out.write(divStr);
            }
</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceEventHandler.java</FilePath>
<LineStart>337</LineStart>
<Snippet>                dispatcher.runAsync(serviceName, serviceContext);
            } else {
                result = dispatcher.runSync(serviceName, serviceContext);
            }
        } catch (ServiceAuthException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="8D8CBC79EDF47B0A1706E72E5A1B60AC">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>672</LineStart>
<Snippet>        HttpSession session = request.getSession();
        Locale locale = UtilHttp.getLocale(request);
        String supplierPartyId = request.getParameter(&quot;supplierPartyId_o_0&quot;);
        
        // check the preferred currency of the supplier, if set, use that for the cart, otherwise use system defaults.</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="6337877CDBF467D52DFFBCE2B430745D">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method render() in Section.java sends unvalidated data to a web browser on line 98, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Section.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/region/Section.java</FilePath>
<LineStart>98</LineStart>
<Snippet>            if (&quot;direct&quot;.equals(type)) {
                if (UtilJ2eeCompat.useOutputStreamNotWriter(context)) {
                    response.getOutputStream().print(content);
                } else {
                    response.getWriter().print(content);</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceMultiEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceMultiEventHandler.java</FilePath>
<LineStart>308</LineStart>
<Snippet>                Map&lt;String, Object&gt; result = null;
                try {
                    result = dispatcher.runSync(serviceName, serviceContext);
                } catch (ServiceAuthException e) {
                    // not logging since the service engine already did</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF" iid="DD158EC2C8D9187CCCE69A95357A6927">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method run() in InputValue.java sends unvalidated data to a web browser on line 143, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>InputValue.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/pseudotag/InputValue.java</FilePath>
<LineStart>143</LineStart>
<Snippet>            inputValue = UtilFormatOut.replaceString(inputValue, &quot;\&quot;&quot;, &quot;&amp;quot;&quot;);
            pageContext.getOut().print(&quot;name=\&quot;&quot; + paramName + &quot;\&quot; value=\&quot;&quot; +
                inputValue + &quot;\&quot;&quot;);
        } else {
            pageContext.getOut().print(inputValue);</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>505</LineStart>
<Snippet>        Map&lt;String, Object&gt; ftlResults = null;
        try {
            ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
        } catch (ServiceAuthException e) {
            String msg = e.getMessage();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="DEB5E9AA4E2968E97E15CE0DE0E91BE3">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method close() in OfbizUrlTransform.java sends unvalidated data to a web browser on line 205, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>OfbizUrlTransform.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/ftl/OfbizUrlTransform.java</FilePath>
<LineStart>205</LineStart>
<Snippet>                        String requestUrl = buf.toString();
                        newURL.append(requestUrl);
                        out.write(newURL.toString());
                    } else if (req != null) {
                        HttpServletRequest request = (HttpServletRequest) req.getWrappedObject();</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1388</LineStart>
<Snippet>        ShoppingCart cart = null;
        try {
            Map&lt;String, Object&gt; outMap = dispatcher.runSync(&quot;loadCartFromOrder&quot;,
                                                UtilMisc.&lt;String, Object&gt;toMap(&quot;orderId&quot;, orderId,
                                                        &quot;skipProductChecks&quot;, Boolean.TRUE, // the products have already been checked in the order, no need to check their validity again</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="D027DAA9-A3BE-49E4-BDBF-3DFF657F84CA" iid="89EB9D33621E2D8390E6CBDEEFD5AD18">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>LoginEvents.java</FileName>
<FilePath>applications/securityext/src/org/ofbiz/securityext/login/LoginEvents.java</FilePath>
<LineStart>76</LineStart>
<Snippet>        if (userLogin == null) {

            String username = request.getParameter(&quot;USERNAME&quot;);
            String password = request.getParameter(&quot;PASSWORD&quot;);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="0B5B68FD7973F25965327D9AA0B3F6E8">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 124, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>124</LineStart>
<Snippet>            if (s.charAt(i) == '\n') {
                checkAfterNewline();
                super.write(s, offset, i - offset + 1);
                offset = i + 1;
                lastWasNewline = true;</Snippet>
                            </Primary>
                            <Source>
<FileName>ICalConverter.java</FileName>
<FilePath>applications/workeffort/src/org/ofbiz/workeffort/workeffort/ICalConverter.java</FilePath>
<LineStart>491</LineStart>
<Snippet>        localMap.put(&quot;locale&quot;, context.get(&quot;locale&quot;));
        try {
            return dispatcher.runSync(serviceName, localMap);
        } catch (GenericServiceException e) {
            String errMsg = &quot;Error while invoking service &quot; + serviceName + &quot;: &quot;;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="CA8D1EDF4DEFAE61AED35684E65639DE">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>WebShoppingCart.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/WebShoppingCart.java</FilePath>
<LineStart>48</LineStart>
<Snippet>                WebSiteWorker.getWebSiteId(request), (locale != null ? locale : ProductStoreWorker.getStoreLocale(request)),
                (currencyUom != null ? currencyUom : ProductStoreWorker.getStoreCurrencyUomId(request)),
                request.getParameter(&quot;billToCustomerPartyId&quot;),
                (request.getParameter(&quot;supplierPartyId&quot;) != null ? request.getParameter(&quot;supplierPartyId&quot;) : request.getParameter(&quot;billFromVendorPartyId&quot;)));
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="ED7DC8423B8C7D59507180A8F3874C54">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceMultiEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceMultiEventHandler.java</FilePath>
<LineStart>308</LineStart>
<Snippet>                Map&lt;String, Object&gt; result = null;
                try {
                    result = dispatcher.runSync(serviceName, serviceContext);
                } catch (ServiceAuthException e) {
                    // not logging since the service engine already did</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="75CA7134-B6BE-444A-9815-E739432FCA47" iid="E8A56D9E1DD2FEE7DCA2A732E636A17F">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method run() in InputValue.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>InputValue.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/pseudotag/InputValue.java</FilePath>
<LineStart>143</LineStart>
<Snippet>            inputValue = UtilFormatOut.replaceString(inputValue, &quot;\&quot;&quot;, &quot;&amp;quot;&quot;);
            pageContext.getOut().print(&quot;name=\&quot;&quot; + paramName + &quot;\&quot; value=\&quot;&quot; +
                inputValue + &quot;\&quot;&quot;);
        } else {
            pageContext.getOut().print(inputValue);</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceEventHandler.java</FilePath>
<LineStart>337</LineStart>
<Snippet>                dispatcher.runAsync(serviceName, serviceContext);
            } else {
                result = dispatcher.runSync(serviceName, serviceContext);
            }
        } catch (ServiceAuthException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="47620C95-01F7-474F-9944-4C54A9A43679" iid="C1636643D9629CE24A99D2F514880B59">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method closeEditWrap() in RenderContentAsText.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RenderContentAsText.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderContentAsText.java</FilePath>
<LineStart>244</LineStart>
<Snippet>                ServletContext servletContext = request.getSession().getServletContext();
                RequestHandler rh = (RequestHandler) servletContext.getAttribute(&quot;_REQUEST_HANDLER_&quot;);
                out.append(rh.makeLink(request, response, &quot;/&quot; + fullRequest, false, false, true));
                out.write(&quot;\&quot;&gt;Edit&lt;/a&gt;&quot;);
                out.write(&quot;&lt;/div&gt;&quot;);</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>505</LineStart>
<Snippet>        Map&lt;String, Object&gt; ftlResults = null;
        try {
            ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
        } catch (ServiceAuthException e) {
            String msg = e.getMessage();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1C85B63C-0870-45B8-9909-86BA43F68B05" iid="FB11EC5272E91338F1A8C108A27F1D58">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method closeEditWrap() in RenderContentAsText.java sends unvalidated data to a web browser on line 244, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>RenderContentAsText.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderContentAsText.java</FilePath>
<LineStart>244</LineStart>
<Snippet>                ServletContext servletContext = request.getSession().getServletContext();
                RequestHandler rh = (RequestHandler) servletContext.getAttribute(&quot;_REQUEST_HANDLER_&quot;);
                out.append(rh.makeLink(request, response, &quot;/&quot; + fullRequest, false, false, true));
                out.write(&quot;\&quot;&gt;Edit&lt;/a&gt;&quot;);
                out.write(&quot;&lt;/div&gt;&quot;);</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>104</LineStart>
<Snippet>        persistMap.put(&quot;userLogin&quot;, userLogin);
        try {
            Map&lt;String, Object&gt; persistResult = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, persistMap);
            contentId = (String)persistResult.get(&quot;contentId&quot;);
            //request.setAttribute(&quot;contentId&quot;, contentId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="47620C95-01F7-474F-9944-4C54A9A43679" iid="EC1EFA5C9D551BEC2A328EA5AADE20D8">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method closeEditWrap() in RenderContentAsText.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RenderContentAsText.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderContentAsText.java</FilePath>
<LineStart>244</LineStart>
<Snippet>                ServletContext servletContext = request.getSession().getServletContext();
                RequestHandler rh = (RequestHandler) servletContext.getAttribute(&quot;_REQUEST_HANDLER_&quot;);
                out.append(rh.makeLink(request, response, &quot;/&quot; + fullRequest, false, false, true));
                out.write(&quot;\&quot;&gt;Edit&lt;/a&gt;&quot;);
                out.write(&quot;&lt;/div&gt;&quot;);</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>575</LineStart>
<Snippet>        while (e.hasMoreElements()) {
            String name = e.nextElement();
            request.setAttribute(name, request.getParameter(name));
        }
    }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="DAA0522D36278FE1288FB641375A9308">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>303</LineStart>
<Snippet>            dataResourceCtx.put(&quot;mimeTypeId&quot;, &quot;image/png&quot;);
            dataResourceCtx.put(&quot;isPublic&quot;, &quot;Y&quot;);
            Map&lt;String, Object&gt; dataResourceResult = dispatcher.runSync(&quot;createDataResource&quot;, dataResourceCtx);
            dataResourceId = dataResourceResult.get(&quot;dataResourceId&quot;).toString();
            //create content</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="220F752FAB0A2BDAD75559233A0D0573">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 124, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>124</LineStart>
<Snippet>            if (s.charAt(i) == '\n') {
                checkAfterNewline();
                super.write(s, offset, i - offset + 1);
                offset = i + 1;
                lastWasNewline = true;</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>558</LineStart>
<Snippet>        session.setAttribute(&quot;_CLIENT_LOCALE_&quot;, request.getLocale());
        session.setAttribute(&quot;_CLIENT_REQUEST_&quot;, fullRequestUrl.toString());
        session.setAttribute(&quot;_CLIENT_USER_AGENT_&quot;, request.getHeader(&quot;User-Agent&quot;) != null ? request.getHeader(&quot;User-Agent&quot;) : &quot;&quot;);
        session.setAttribute(&quot;_CLIENT_REFERER_&quot;, request.getHeader(&quot;Referer&quot;) != null ? request.getHeader(&quot;Referer&quot;) : &quot;&quot;);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="1678ED8ABAB9B5E82233CB0E0371B103">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>688</LineStart>
<Snippet>        
        // TODO: the code below here needs some cleanups
        String billToCustomerPartyId = request.getParameter(&quot;billToCustomerPartyId_o_0&quot;);
        if (UtilValidate.isEmpty(billToCustomerPartyId) &amp;&amp; UtilValidate.isEmpty(supplierPartyId)) {
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, UtilProperties.getMessage(resource_error, &quot;OrderCouldNotInitPurchaseOrder&quot;, locale));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="A6B79CBCE4E77AF974367251172A5329">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method outputError() in ServiceStreamHandler.java sends unvalidated data to a web browser on line 110, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ServiceStreamHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceStreamHandler.java</FilePath>
<LineStart>110</LineStart>
<Snippet>        PrintStream out = new PrintStream(stream);
        if (message != null)
            out.println(&quot;Error message: &quot; + message);
        if (error != null)
            out.println(&quot;Exception occured: &quot; + error.toString());</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>104</LineStart>
<Snippet>        persistMap.put(&quot;userLogin&quot;, userLogin);
        try {
            Map&lt;String, Object&gt; persistResult = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, persistMap);
            contentId = (String)persistResult.get(&quot;contentId&quot;);
            //request.setAttribute(&quot;contentId&quot;, contentId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="12A7F499B50522DA45F6E15694C24701">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 130, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>130</LineStart>
<Snippet>        }
        checkAfterNewline();
        super.write(s, offset, i - offset);
    }
}</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceEventHandler.java</FilePath>
<LineStart>337</LineStart>
<Snippet>                dispatcher.runAsync(serviceName, serviceContext);
            } else {
                result = dispatcher.runSync(serviceName, serviceContext);
            }
        } catch (ServiceAuthException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="D8F4BC918F865BFEB77AB94B3A9D3FEE">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>312</LineStart>
<Snippet>            contentCtx.put(&quot;fromDate&quot;, UtilDateTime.nowTimestamp());
            contentCtx.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; contentResult = dispatcher.runSync(&quot;createContent&quot;, contentCtx);
            contentId = contentResult.get(&quot;contentId&quot;).toString();
        } catch (Exception e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="C20D2B1023B1DA1D968CFB30F1CA602F">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1388</LineStart>
<Snippet>        ShoppingCart cart = null;
        try {
            Map&lt;String, Object&gt; outMap = dispatcher.runSync(&quot;loadCartFromOrder&quot;,
                                                UtilMisc.&lt;String, Object&gt;toMap(&quot;orderId&quot;, orderId,
                                                        &quot;skipProductChecks&quot;, Boolean.TRUE, // the products have already been checked in the order, no need to check their validity again</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="C758E4ED02B6C7E9107DB4B1F4C84DE9">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 124, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>124</LineStart>
<Snippet>            if (s.charAt(i) == '\n') {
                checkAfterNewline();
                super.write(s, offset, i - offset + 1);
                offset = i + 1;
                lastWasNewline = true;</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>561</LineStart>
<Snippet>        session.setAttribute(&quot;_CLIENT_REFERER_&quot;, request.getHeader(&quot;Referer&quot;) != null ? request.getHeader(&quot;Referer&quot;) : &quot;&quot;);

        session.setAttribute(&quot;_CLIENT_FORWARDED_FOR_&quot;, request.getHeader(&quot;X-Forwarded-For&quot;));
        session.setAttribute(&quot;_CLIENT_REMOTE_ADDR_&quot;, request.getRemoteAddr());
        session.setAttribute(&quot;_CLIENT_REMOTE_HOST_&quot;, request.getRemoteHost());</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="75CA7134-B6BE-444A-9815-E739432FCA47" iid="B26D31D2578C0ECF4466CC83E60BEE6F">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method run() in InputValue.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>InputValue.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/pseudotag/InputValue.java</FilePath>
<LineStart>143</LineStart>
<Snippet>            inputValue = UtilFormatOut.replaceString(inputValue, &quot;\&quot;&quot;, &quot;&amp;quot;&quot;);
            pageContext.getOut().print(&quot;name=\&quot;&quot; + paramName + &quot;\&quot; value=\&quot;&quot; +
                inputValue + &quot;\&quot;&quot;);
        } else {
            pageContext.getOut().print(inputValue);</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>104</LineStart>
<Snippet>        persistMap.put(&quot;userLogin&quot;, userLogin);
        try {
            Map&lt;String, Object&gt; persistResult = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, persistMap);
            contentId = (String)persistResult.get(&quot;contentId&quot;);
            //request.setAttribute(&quot;contentId&quot;, contentId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="CF50FE29EF8BA96E1AD947C9759AD08E">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method openEditWrap() in RenderContentAsText.java sends unvalidated data to a web browser on line 224, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>RenderContentAsText.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderContentAsText.java</FilePath>
<LineStart>224</LineStart>
<Snippet>            public void openEditWrap(Writer out, String editStyle) throws IOException {
                String divStr = &quot;&lt;div class=\&quot;&quot; + editStyle + &quot;\&quot;&gt;&quot;;
                out.write(divStr);
            }
</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceEventHandler.java</FilePath>
<LineStart>337</LineStart>
<Snippet>                dispatcher.runAsync(serviceName, serviceContext);
            } else {
                result = dispatcher.runSync(serviceName, serviceContext);
            }
        } catch (ServiceAuthException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="6E08F7674531B29FA9A4BE4757380B36">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method checkAfterNewline() in IndentingWriter.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>58</LineStart>
<Snippet>            if (doSpace) {
                if (doNewline) {
                    super.write(indent.toString(), 0, indent.length());
                } else {
                    super.write(' ');</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>119</LineStart>
<Snippet>            contentRevisionMap.put(&quot;contentId&quot;, contentId);
            contentRevisionMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentRevisionAndItem&quot;, contentRevisionMap);
            keySet = result.keySet();
            iter = keySet.iterator();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="49C1DD28C510AECA5B59241F64DD751B">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>OrderManagerEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/OrderManagerEvents.java</FilePath>
<LineStart>222</LineStart>
<Snippet>                    Map&lt;String, Object&gt; results = null;
                    try {
                        results = dispatcher.runSync(&quot;createPaymentFromPreference&quot;, UtilMisc.toMap(&quot;userLogin&quot;, userLogin,
                                &quot;orderPaymentPreferenceId&quot;, paymentPreference.get(&quot;orderPaymentPreferenceId&quot;), &quot;paymentRefNum&quot;, paymentReference,
                                &quot;paymentFromId&quot;, placingCustomer.getString(&quot;partyId&quot;), &quot;comments&quot;, &quot;Payment received offline and manually entered.&quot;));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="D027DAA9-A3BE-49E4-BDBF-3DFF657F84CA" iid="42EB1DED84CD2E2DD9620E2E8ADAA1FD">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1527</LineStart>
<Snippet>        Locale locale = UtilHttp.getLocale(request);

        String productStoreId = request.getParameter(&quot;productStoreId&quot;);

        if (UtilValidate.isNotEmpty(productStoreId)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="75CA7134-B6BE-444A-9815-E739432FCA47" iid="FABFDBEA14CBE49D336706580AB0D8EE">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method run() in InputValue.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>InputValue.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/pseudotag/InputValue.java</FilePath>
<LineStart>143</LineStart>
<Snippet>            inputValue = UtilFormatOut.replaceString(inputValue, &quot;\&quot;&quot;, &quot;&amp;quot;&quot;);
            pageContext.getOut().print(&quot;name=\&quot;&quot; + paramName + &quot;\&quot; value=\&quot;&quot; +
                inputValue + &quot;\&quot;&quot;);
        } else {
            pageContext.getOut().print(inputValue);</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceMultiEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceMultiEventHandler.java</FilePath>
<LineStart>308</LineStart>
<Snippet>                Map&lt;String, Object&gt; result = null;
                try {
                    result = dispatcher.runSync(serviceName, serviceContext);
                } catch (ServiceAuthException e) {
                    // not logging since the service engine already did</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="3A6C11E917DB4970A273888A1DF8D467">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>OrderManagerEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/OrderManagerEvents.java</FilePath>
<LineStart>98</LineStart>
<Snippet>                    Map&lt;String, Object&gt; results = null;
                    try {
                        results = dispatcher.runSync(&quot;createPaymentFromPreference&quot;, UtilMisc.toMap(&quot;orderPaymentPreferenceId&quot;, ppref.get(&quot;orderPaymentPreferenceId&quot;),
                                &quot;paymentFromId&quot;, placingCustomer.getString(&quot;partyId&quot;), &quot;comments&quot;, &quot;Payment received offline and manually entered.&quot;));
                    } catch (GenericServiceException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="8835FA954A52F8E65F48F32CB6458DC5">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>402</LineStart>
<Snippet>        if(UtilValidate.isEmpty(request.getParameter(&quot;frameContentId&quot;))) {
            if (UtilValidate.isNotEmpty(request.getParameter(&quot;frameExistContentId&quot;)) &amp;&amp; UtilValidate.isNotEmpty(request.getParameter(&quot;frameExistDataResourceId&quot;))) {
                session.setAttribute(&quot;frameExistContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
                session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="12AF265A-8085-459E-A9C9-E0922DFFE1F5" iid="F5DD779D5BDDBBD2130598E3B713CFDF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1354</LineStart>
<Snippet>        ShoppingCart cart = null;
        try {
            Map&lt;String, Object&gt; outMap = dispatcher.runSync(&quot;loadCartFromQuote&quot;,
                    UtilMisc.&lt;String, Object&gt;toMap(&quot;quoteId&quot;, quoteId,
                            &quot;applyQuoteAdjustments&quot;, &quot;true&quot;,</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="6A50DAF3479BCFB9D552149B9C336AD6">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>130</LineStart>
<Snippet>        }
        checkAfterNewline();
        super.write(s, offset, i - offset);
    }
}</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>119</LineStart>
<Snippet>            contentRevisionMap.put(&quot;contentId&quot;, contentId);
            contentRevisionMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentRevisionAndItem&quot;, contentRevisionMap);
            keySet = result.keySet();
            iter = keySet.iterator();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="59029BCCC85ACE52F30B265D3DD91B18">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>LoginEvents.java</FileName>
<FilePath>applications/securityext/src/org/ofbiz/securityext/login/LoginEvents.java</FilePath>
<LineStart>76</LineStart>
<Snippet>        if (userLogin == null) {

            String username = request.getParameter(&quot;USERNAME&quot;);
            String password = request.getParameter(&quot;PASSWORD&quot;);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="FBA502C2C601F593984614F8195D68E2">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method toJsonObjectList() in ImageManagementServices.java sends unvalidated data to a web browser on line 779, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ImageManagementServices.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/ImageManagementServices.java</FilePath>
<LineStart>779</LineStart>
<Snippet>            try {
                out = response.getWriter();
                out.write(jsonStr);
                out.flush();
            } catch (IOException e) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>505</LineStart>
<Snippet>        Map&lt;String, Object&gt; ftlResults = null;
        try {
            ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
        } catch (ServiceAuthException e) {
            String msg = e.getMessage();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="008F5FA75608CA3C8F9774843EF4441D">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method checkAfterNewline() in IndentingWriter.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>58</LineStart>
<Snippet>            if (doSpace) {
                if (doNewline) {
                    super.write(indent.toString(), 0, indent.length());
                } else {
                    super.write(' ');</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>505</LineStart>
<Snippet>        Map&lt;String, Object&gt; ftlResults = null;
        try {
            ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
        } catch (ServiceAuthException e) {
            String msg = e.getMessage();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="77131BD9B1D9C1CAB3BF78DFD26327D4">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method checkAfterNewline() in IndentingWriter.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>58</LineStart>
<Snippet>            if (doSpace) {
                if (doNewline) {
                    super.write(indent.toString(), 0, indent.length());
                } else {
                    super.write(' ');</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>104</LineStart>
<Snippet>        persistMap.put(&quot;userLogin&quot;, userLogin);
        try {
            Map&lt;String, Object&gt; persistResult = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, persistMap);
            contentId = (String)persistResult.get(&quot;contentId&quot;);
            //request.setAttribute(&quot;contentId&quot;, contentId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="235064B0DA685A4C51A47691834C9228">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>CatalogUrlServlet.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/category/CatalogUrlServlet.java</FilePath>
<LineStart>80</LineStart>
<Snippet>        Delegator delegator = (Delegator) getServletContext().getAttribute(&quot;delegator&quot;);

        String pathInfo = request.getPathInfo();
        List&lt;String&gt; pathElements = StringUtil.split(pathInfo, &quot;/&quot;);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="C91F94B22245770695EB7C3DCE287F4E">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method httpEngine() in HttpEngine.java sends unvalidated data to a web browser on line 187, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>HttpEngine.java</FileName>
<FilePath>framework/service/src/org/ofbiz/service/engine/HttpEngine.java</FilePath>
<LineStart>187</LineStart>
<Snippet>            if (errorMessage.length() &gt; 0) {
                response.setContentLength(errorMessage.length());
                out.write(errorMessage.toString());
            } else {
                response.setContentLength(resultString.length());</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceMultiEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceMultiEventHandler.java</FilePath>
<LineStart>308</LineStart>
<Snippet>                Map&lt;String, Object&gt; result = null;
                try {
                    result = dispatcher.runSync(serviceName, serviceContext);
                } catch (ServiceAuthException e) {
                    // not logging since the service engine already did</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="EE87EDA5B5528837A2E5C646A5B22BB4">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>267</LineStart>
<Snippet>        }
        if (!&quot;image/png&quot;.equals(mimType)) {
            session.setAttribute(&quot;frameContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
            session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;The selected image type is incorrect, please select the image type *.PNG to upload.&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="8B4EBAEE27BC853026C4AC526A13B62F">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method openEditWrap() in RenderContentAsText.java sends unvalidated data to a web browser on line 224, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>RenderContentAsText.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderContentAsText.java</FilePath>
<LineStart>224</LineStart>
<Snippet>            public void openEditWrap(Writer out, String editStyle) throws IOException {
                String divStr = &quot;&lt;div class=\&quot;&quot; + editStyle + &quot;\&quot;&gt;&quot;;
                out.write(divStr);
            }
</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>104</LineStart>
<Snippet>        persistMap.put(&quot;userLogin&quot;, userLogin);
        try {
            Map&lt;String, Object&gt; persistResult = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, persistMap);
            contentId = (String)persistResult.get(&quot;contentId&quot;);
            //request.setAttribute(&quot;contentId&quot;, contentId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="8F623E9FA003B7F7B1D25869A4F613A2">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 115, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>115</LineStart>
<Snippet>    @Override
    public void write(String s) throws IOException {
        write(s, 0, s.length());
    }
</Snippet>
                            </Primary>
                            <Source>
<FileName>CommonEvents.java</FileName>
<FilePath>framework/common/src/org/ofbiz/common/CommonEvents.java</FilePath>
<LineStart>179</LineStart>
<Snippet>     * setting should be passed as a &quot;newLocale&quot; request parameter. */
    public static String setSessionLocale(HttpServletRequest request, HttpServletResponse response) {
        String localeString = request.getParameter(&quot;newLocale&quot;);
        if (UtilValidate.isNotEmpty(localeString)) {
            UtilHttp.setLocale(request, localeString);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="3396643ECDEE967A9DC20E04B300629D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 124, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>124</LineStart>
<Snippet>            if (s.charAt(i) == '\n') {
                checkAfterNewline();
                super.write(s, offset, i - offset + 1);
                offset = i + 1;
                lastWasNewline = true;</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>559</LineStart>
<Snippet>        session.setAttribute(&quot;_CLIENT_REQUEST_&quot;, fullRequestUrl.toString());
        session.setAttribute(&quot;_CLIENT_USER_AGENT_&quot;, request.getHeader(&quot;User-Agent&quot;) != null ? request.getHeader(&quot;User-Agent&quot;) : &quot;&quot;);
        session.setAttribute(&quot;_CLIENT_REFERER_&quot;, request.getHeader(&quot;Referer&quot;) != null ? request.getHeader(&quot;Referer&quot;) : &quot;&quot;);

        session.setAttribute(&quot;_CLIENT_FORWARDED_FOR_&quot;, request.getHeader(&quot;X-Forwarded-For&quot;));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="AAE08AD99A9C069AD69CB2C922FF6D52">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method close() in OfbizUrlTransform.java sends unvalidated data to a web browser on line 205, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>OfbizUrlTransform.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/ftl/OfbizUrlTransform.java</FilePath>
<LineStart>205</LineStart>
<Snippet>                        String requestUrl = buf.toString();
                        newURL.append(requestUrl);
                        out.write(newURL.toString());
                    } else if (req != null) {
                        HttpServletRequest request = (HttpServletRequest) req.getWrappedObject();</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>559</LineStart>
<Snippet>        session.setAttribute(&quot;_CLIENT_REQUEST_&quot;, fullRequestUrl.toString());
        session.setAttribute(&quot;_CLIENT_USER_AGENT_&quot;, request.getHeader(&quot;User-Agent&quot;) != null ? request.getHeader(&quot;User-Agent&quot;) : &quot;&quot;);
        session.setAttribute(&quot;_CLIENT_REFERER_&quot;, request.getHeader(&quot;Referer&quot;) != null ? request.getHeader(&quot;Referer&quot;) : &quot;&quot;);

        session.setAttribute(&quot;_CLIENT_FORWARDED_FOR_&quot;, request.getHeader(&quot;X-Forwarded-For&quot;));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="5D892E002AE4E05F2F8C665E33806D78">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method close() in OfbizUrlTransform.java sends unvalidated data to a web browser on line 205, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>OfbizUrlTransform.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/ftl/OfbizUrlTransform.java</FilePath>
<LineStart>205</LineStart>
<Snippet>                        String requestUrl = buf.toString();
                        newURL.append(requestUrl);
                        out.write(newURL.toString());
                    } else if (req != null) {
                        HttpServletRequest request = (HttpServletRequest) req.getWrappedObject();</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>561</LineStart>
<Snippet>        session.setAttribute(&quot;_CLIENT_REFERER_&quot;, request.getHeader(&quot;Referer&quot;) != null ? request.getHeader(&quot;Referer&quot;) : &quot;&quot;);

        session.setAttribute(&quot;_CLIENT_FORWARDED_FOR_&quot;, request.getHeader(&quot;X-Forwarded-For&quot;));
        session.setAttribute(&quot;_CLIENT_REMOTE_ADDR_&quot;, request.getRemoteAddr());
        session.setAttribute(&quot;_CLIENT_REMOTE_HOST_&quot;, request.getRemoteHost());</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="EAEBD04D9046874DA7BF98616A84C040">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>ShipmentEvents.java</FileName>
<FilePath>applications/product/src/org/ofbiz/shipment/shipment/ShipmentEvents.java</FilePath>
<LineStart>50</LineStart>
<Snippet>        String shipmentId = request.getParameter(&quot;shipmentId&quot;);
        String shipmentRouteSegmentId = request.getParameter(&quot;shipmentRouteSegmentId&quot;);
        String shipmentPackageSeqId = request.getParameter(&quot;shipmentPackageSeqId&quot;);

        GenericValue shipmentPackageRouteSeg = null;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="74E42ACEFD52E823089FF48574CA3D66">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 124, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>124</LineStart>
<Snippet>            if (s.charAt(i) == '\n') {
                checkAfterNewline();
                super.write(s, offset, i - offset + 1);
                offset = i + 1;
                lastWasNewline = true;</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1527</LineStart>
<Snippet>        Locale locale = UtilHttp.getLocale(request);

        String productStoreId = request.getParameter(&quot;productStoreId&quot;);

        if (UtilValidate.isNotEmpty(productStoreId)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="39109B0B686EEDC7F61A50233C3FD720">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 130, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>130</LineStart>
<Snippet>        }
        checkAfterNewline();
        super.write(s, offset, i - offset);
    }
}</Snippet>
                            </Primary>
                            <Source>
<FileName>LoginWorker.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/LoginWorker.java</FilePath>
<LineStart>397</LineStart>
<Snippet>            // get the visit id to pass to the userLogin for history
            String visitId = VisitHandler.getVisitId(session);
            result = dispatcher.runSync(&quot;userLogin&quot;, UtilMisc.toMap(&quot;login.username&quot;, username, &quot;login.password&quot;, password, &quot;visitId&quot;, visitId, &quot;locale&quot;, UtilHttp.getLocale(request)));
        } catch (GenericServiceException e) {
            Debug.logError(e, &quot;Error calling userLogin service&quot;, module);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="9FBD9CF6447EF81292B93AFADE118880">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>OrderEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/order/OrderEvents.java</FilePath>
<LineStart>58</LineStart>
<Snippet>        Delegator delegator = (Delegator) request.getAttribute(&quot;delegator&quot;);
        GenericValue userLogin = (GenericValue) session.getAttribute(&quot;userLogin&quot;);
        String dataResourceId = request.getParameter(&quot;dataResourceId&quot;);

        try {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="C3C50EC4CFC275EA26159ADFF222CFD9">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 284, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>284</LineStart>
<Snippet>                String errorMessage = &quot;&lt;html&gt;&lt;body&gt;ERROR in error page, (infinite loop or error page not found with name [&quot; + errorPage + &quot;]), but here is the text just in case it helps you: &quot; + request.getAttribute(&quot;_ERROR_MESSAGE_&quot;) + &quot;&lt;/body&gt;&lt;/html&gt;&quot;;
                if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>ContentManagementEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/ContentManagementEvents.java</FilePath>
<LineStart>288</LineStart>
<Snippet>                        serviceIn.put(&quot;targetOperationList&quot;, targetOperationList);
                        serviceIn.put(&quot;contentPurposeList&quot;, contentPurposeList);
                        results = dispatcher.runSync(&quot;createContentAssoc&quot;, serviceIn);
                        responseMessage = (String)results.get(ModelService.RESPONSE_MESSAGE);
                        if (UtilValidate.isNotEmpty(responseMessage)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="AC78ED65BFDD5243A4F492B9D0DFDBDF">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method close() in OfbizUrlTransform.java sends unvalidated data to a web browser on line 205, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>OfbizUrlTransform.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/ftl/OfbizUrlTransform.java</FilePath>
<LineStart>205</LineStart>
<Snippet>                        String requestUrl = buf.toString();
                        newURL.append(requestUrl);
                        out.write(newURL.toString());
                    } else if (req != null) {
                        HttpServletRequest request = (HttpServletRequest) req.getWrappedObject();</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>267</LineStart>
<Snippet>        }
        if (!&quot;image/png&quot;.equals(mimType)) {
            session.setAttribute(&quot;frameContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
            session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;The selected image type is incorrect, please select the image type *.PNG to upload.&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="0EA6B8724E3423B23EFC22722C0BD958">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method render() in Section.java sends unvalidated data to a web browser on line 100, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Section.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/region/Section.java</FilePath>
<LineStart>100</LineStart>
<Snippet>                    response.getOutputStream().print(content);
                } else {
                    response.getWriter().print(content);
                }
            } else if (&quot;default&quot;.equals(type) || &quot;region&quot;.equals(type) || &quot;resource&quot;.equals(type) || &quot;jpublish&quot;.equals(type)) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>505</LineStart>
<Snippet>        Map&lt;String, Object&gt; ftlResults = null;
        try {
            ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
        } catch (ServiceAuthException e) {
            String msg = e.getMessage();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="91969C5D3AF4DF5221C58FFFC31A02B4">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 130, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>130</LineStart>
<Snippet>        }
        checkAfterNewline();
        super.write(s, offset, i - offset);
    }
}</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>558</LineStart>
<Snippet>        session.setAttribute(&quot;_CLIENT_LOCALE_&quot;, request.getLocale());
        session.setAttribute(&quot;_CLIENT_REQUEST_&quot;, fullRequestUrl.toString());
        session.setAttribute(&quot;_CLIENT_USER_AGENT_&quot;, request.getHeader(&quot;User-Agent&quot;) != null ? request.getHeader(&quot;User-Agent&quot;) : &quot;&quot;);
        session.setAttribute(&quot;_CLIENT_REFERER_&quot;, request.getHeader(&quot;Referer&quot;) != null ? request.getHeader(&quot;Referer&quot;) : &quot;&quot;);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="D51BB258302D8C3B97E36C401504BA08">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 130, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>130</LineStart>
<Snippet>        }
        checkAfterNewline();
        super.write(s, offset, i - offset);
    }
}</Snippet>
                            </Primary>
                            <Source>
<FileName>CatalogUrlServlet.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/category/CatalogUrlServlet.java</FilePath>
<LineStart>80</LineStart>
<Snippet>        Delegator delegator = (Delegator) getServletContext().getAttribute(&quot;delegator&quot;);

        String pathInfo = request.getPathInfo();
        List&lt;String&gt; pathElements = StringUtil.split(pathInfo, &quot;/&quot;);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="8BB12BBFA42ED709727C5F1EC7E3C02D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 124, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>124</LineStart>
<Snippet>            if (s.charAt(i) == '\n') {
                checkAfterNewline();
                super.write(s, offset, i - offset + 1);
                offset = i + 1;
                lastWasNewline = true;</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>564</LineStart>
<Snippet>        session.setAttribute(&quot;_CLIENT_REMOTE_ADDR_&quot;, request.getRemoteAddr());
        session.setAttribute(&quot;_CLIENT_REMOTE_HOST_&quot;, request.getRemoteHost());
        session.setAttribute(&quot;_CLIENT_REMOTE_USER_&quot;, request.getRemoteUser());
    }
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="C106454BA48845EAC98D42C7C10F0422">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>CheckOutEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/CheckOutEvents.java</FilePath>
<LineStart>131</LineStart>
<Snippet>            if (UtilValidate.isNotEmpty(taxAuthPartyGeoIds)) {
                try {
                    Map&lt;String, ? extends Object&gt; createCustomerTaxAuthInfoResult = dispatcher.runSync(&quot;createCustomerTaxAuthInfo&quot;,
                            UtilMisc.&lt;String, Object&gt;toMap(&quot;partyId&quot;, cart.getPartyId(), &quot;taxAuthPartyGeoIds&quot;, taxAuthPartyGeoIds, &quot;partyTaxId&quot;, partyTaxId, &quot;isExempt&quot;, isExempt, &quot;userLogin&quot;, userLogin));
                    ServiceUtil.getMessages(request, createCustomerTaxAuthInfoResult, null);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF" iid="8E8335EFEE9E2DF428FF08BBE57E3726">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method run() in InputValue.java sends unvalidated data to a web browser on line 145, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>InputValue.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/pseudotag/InputValue.java</FilePath>
<LineStart>145</LineStart>
<Snippet>                inputValue + &quot;\&quot;&quot;);
        } else {
            pageContext.getOut().print(inputValue);
        }
    }</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceMultiEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceMultiEventHandler.java</FilePath>
<LineStart>308</LineStart>
<Snippet>                Map&lt;String, Object&gt; result = null;
                try {
                    result = dispatcher.runSync(serviceName, serviceContext);
                } catch (ServiceAuthException e) {
                    // not logging since the service engine already did</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="63C09CC481A9687C885F6363ED197234">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method httpEngine() in HttpEngine.java sends unvalidated data to a web browser on line 187, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>HttpEngine.java</FileName>
<FilePath>framework/service/src/org/ofbiz/service/engine/HttpEngine.java</FilePath>
<LineStart>187</LineStart>
<Snippet>            if (errorMessage.length() &gt; 0) {
                response.setContentLength(errorMessage.length());
                out.write(errorMessage.toString());
            } else {
                response.setContentLength(resultString.length());</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>505</LineStart>
<Snippet>        Map&lt;String, Object&gt; ftlResults = null;
        try {
            ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
        } catch (ServiceAuthException e) {
            String msg = e.getMessage();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="8AE35199C5A69DF2F93145C2C645239D">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>GenericWebEvent.java</FileName>
<FilePath>framework/webtools/src/org/ofbiz/webtools/GenericWebEvent.java</FilePath>
<LineStart>183</LineStart>
<Snippet>            }

            String fval = request.getParameter(field.getName());
            if (UtilValidate.isNotEmpty(fval)) {
                try {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="D6FA91D70E65E038B5DD1823560835F4">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method openEditWrap() in RenderSubContentAsText.java sends unvalidated data to a web browser on line 204, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>RenderSubContentAsText.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderSubContentAsText.java</FilePath>
<LineStart>204</LineStart>
<Snippet>
                String divStr = &quot;&lt;div class=\&quot;&quot; + editStyle + &quot;\&quot;&gt;&quot;;
                out.write(divStr);
            }
</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>505</LineStart>
<Snippet>        Map&lt;String, Object&gt; ftlResults = null;
        try {
            ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
        } catch (ServiceAuthException e) {
            String msg = e.getMessage();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="F1AC52A4-AE94-417F-9D62-29A4C25106AB" iid="A416486A98E5090480769F47EBBDA92E">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method render() in Section.java sends unvalidated data to a web browser on line 98, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>Section.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/region/Section.java</FilePath>
<LineStart>98</LineStart>
<Snippet>            if (&quot;direct&quot;.equals(type)) {
                if (UtilJ2eeCompat.useOutputStreamNotWriter(context)) {
                    response.getOutputStream().print(content);
                } else {
                    response.getWriter().print(content);</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>104</LineStart>
<Snippet>        persistMap.put(&quot;userLogin&quot;, userLogin);
        try {
            Map&lt;String, Object&gt; persistResult = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, persistMap);
            contentId = (String)persistResult.get(&quot;contentId&quot;);
            //request.setAttribute(&quot;contentId&quot;, contentId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="47620C95-01F7-474F-9944-4C54A9A43679" iid="2A4C3649E8A7DC122254C3EA1C85F338">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method closeEditWrap() in RenderContentTransform.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RenderContentTransform.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderContentTransform.java</FilePath>
<LineStart>144</LineStart>
<Snippet>                ServletContext servletContext = request.getSession().getServletContext();
                RequestHandler rh = (RequestHandler) servletContext.getAttribute(&quot;_REQUEST_HANDLER_&quot;);
                out.append(rh.makeLink(request, response, &quot;/&quot; + fullRequest, false, false, true));
                out.write(&quot;\&quot;&gt;Edit&lt;/a&gt;&quot;);
                out.write(&quot;&lt;/div&gt;&quot;);</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>104</LineStart>
<Snippet>        persistMap.put(&quot;userLogin&quot;, userLogin);
        try {
            Map&lt;String, Object&gt; persistResult = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, persistMap);
            contentId = (String)persistResult.get(&quot;contentId&quot;);
            //request.setAttribute(&quot;contentId&quot;, contentId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF" iid="C55E60E557812CBF11A3E399EBC09C8E">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method run() in InputValue.java sends unvalidated data to a web browser on line 143, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>InputValue.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/pseudotag/InputValue.java</FilePath>
<LineStart>143</LineStart>
<Snippet>            inputValue = UtilFormatOut.replaceString(inputValue, &quot;\&quot;&quot;, &quot;&amp;quot;&quot;);
            pageContext.getOut().print(&quot;name=\&quot;&quot; + paramName + &quot;\&quot; value=\&quot;&quot; +
                inputValue + &quot;\&quot;&quot;);
        } else {
            pageContext.getOut().print(inputValue);</Snippet>
                            </Primary>
                            <Source>
<FileName>CoreEvents.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/CoreEvents.java</FilePath>
<LineStart>412</LineStart>
<Snippet>        try {
            if (null!=request.getParameter(&quot;_RUN_SYNC_&quot;) &amp;&amp; request.getParameter(&quot;_RUN_SYNC_&quot;).equals(&quot;Y&quot;)) {
                syncServiceResult = dispatcher.runSync(serviceName, serviceContext);
            } else {
                dispatcher.schedule(jobName, poolName, serviceName, serviceContext, startTime, frequency, interval, count, endTime, maxRetry);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="1D93F50CC6156103B49B87FEA6E972A6">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method openEditWrap() in RenderContentTransform.java sends unvalidated data to a web browser on line 129, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>RenderContentTransform.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderContentTransform.java</FilePath>
<LineStart>129</LineStart>
<Snippet>            public void openEditWrap(Writer out, String editStyle) throws IOException {
                String divStr = &quot;&lt;div class=\&quot;&quot; + editStyle + &quot;\&quot;&gt;&quot;;
                out.write(divStr);
            }
</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>104</LineStart>
<Snippet>        persistMap.put(&quot;userLogin&quot;, userLogin);
        try {
            Map&lt;String, Object&gt; persistResult = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, persistMap);
            contentId = (String)persistResult.get(&quot;contentId&quot;);
            //request.setAttribute(&quot;contentId&quot;, contentId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="E1BFD5BF9DF5C921B8670BC5BEB81F55">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>CommonEvents.java</FileName>
<FilePath>framework/common/src/org/ofbiz/common/CommonEvents.java</FilePath>
<LineStart>179</LineStart>
<Snippet>     * setting should be passed as a &quot;newLocale&quot; request parameter. */
    public static String setSessionLocale(HttpServletRequest request, HttpServletResponse response) {
        String localeString = request.getParameter(&quot;newLocale&quot;);
        if (UtilValidate.isNotEmpty(localeString)) {
            UtilHttp.setLocale(request, localeString);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="4D69E4E2-959C-4EF8-84F4-A6489B288ABF" iid="06BF6BB12DC07F210671C8022AE48E1D">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method run() in EntityField.java sends unvalidated data to a web browser on line 249, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EntityField.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/pseudotag/EntityField.java</FilePath>
<LineStart>249</LineStart>
<Snippet>            if (prefix != null)
                out.print(prefix);
            out.print(fieldString);
            if (suffix != null)
                out.print(suffix);</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>104</LineStart>
<Snippet>        persistMap.put(&quot;userLogin&quot;, userLogin);
        try {
            Map&lt;String, Object&gt; persistResult = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, persistMap);
            contentId = (String)persistResult.get(&quot;contentId&quot;);
            //request.setAttribute(&quot;contentId&quot;, contentId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="03B6E99CE3DE73B57E30676FC132A352">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method httpEngine() in HttpEngine.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>HttpEngine.java</FileName>
<FilePath>framework/service/src/org/ofbiz/service/engine/HttpEngine.java</FilePath>
<LineStart>187</LineStart>
<Snippet>            if (errorMessage.length() &gt; 0) {
                response.setContentLength(errorMessage.length());
                out.write(errorMessage.toString());
            } else {
                response.setContentLength(resultString.length());</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>119</LineStart>
<Snippet>            contentRevisionMap.put(&quot;contentId&quot;, contentId);
            contentRevisionMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentRevisionAndItem&quot;, contentRevisionMap);
            keySet = result.keySet();
            iter = keySet.iterator();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="9CB4389A31B8D1D894052A63604BC824">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method toJsonObjectList() in EbayStoreOptions.java sends unvalidated data to a web browser on line 273, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>EbayStoreOptions.java</FileName>
<FilePath>specialpurpose/ebaystore/src/org/ofbiz/ebaystore/EbayStoreOptions.java</FilePath>
<LineStart>273</LineStart>
<Snippet>            try {
                out = response.getWriter();
                out.write(jsonStr);
                out.flush();
            } catch (IOException e) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceMultiEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceMultiEventHandler.java</FilePath>
<LineStart>308</LineStart>
<Snippet>                Map&lt;String, Object&gt; result = null;
                try {
                    result = dispatcher.runSync(serviceName, serviceContext);
                } catch (ServiceAuthException e) {
                    // not logging since the service engine already did</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="47620C95-01F7-474F-9944-4C54A9A43679" iid="4A739C864791534D9669A966CE42BB56">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method closeEditWrap() in RenderContentTransform.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>RenderContentTransform.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderContentTransform.java</FilePath>
<LineStart>144</LineStart>
<Snippet>                ServletContext servletContext = request.getSession().getServletContext();
                RequestHandler rh = (RequestHandler) servletContext.getAttribute(&quot;_REQUEST_HANDLER_&quot;);
                out.append(rh.makeLink(request, response, &quot;/&quot; + fullRequest, false, false, true));
                out.write(&quot;\&quot;&gt;Edit&lt;/a&gt;&quot;);
                out.write(&quot;&lt;/div&gt;&quot;);</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceEventHandler.java</FilePath>
<LineStart>337</LineStart>
<Snippet>                dispatcher.runAsync(serviceName, serviceContext);
            } else {
                result = dispatcher.runSync(serviceName, serviceContext);
            }
        } catch (ServiceAuthException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="CB99D8E84EC6CF4D9FE3820387EAC510">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1354</LineStart>
<Snippet>        ShoppingCart cart = null;
        try {
            Map&lt;String, Object&gt; outMap = dispatcher.runSync(&quot;loadCartFromQuote&quot;,
                    UtilMisc.&lt;String, Object&gt;toMap(&quot;quoteId&quot;, quoteId,
                            &quot;applyQuoteAdjustments&quot;, &quot;true&quot;,</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="7B75FEC6835F72FF9B184D196AB299B5">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>OrderManagerEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/OrderManagerEvents.java</FilePath>
<LineStart>98</LineStart>
<Snippet>                    Map&lt;String, Object&gt; results = null;
                    try {
                        results = dispatcher.runSync(&quot;createPaymentFromPreference&quot;, UtilMisc.toMap(&quot;orderPaymentPreferenceId&quot;, ppref.get(&quot;orderPaymentPreferenceId&quot;),
                                &quot;paymentFromId&quot;, placingCustomer.getString(&quot;partyId&quot;), &quot;comments&quot;, &quot;Payment received offline and manually entered.&quot;));
                    } catch (GenericServiceException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0E836836-C5D0-4977-9EC1-0CE2AFF9F083" iid="D066C651C9E342F1242C0A2F1B928AFC">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>124</LineStart>
<Snippet>            if (s.charAt(i) == '\n') {
                checkAfterNewline();
                super.write(s, offset, i - offset + 1);
                offset = i + 1;
                lastWasNewline = true;</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>119</LineStart>
<Snippet>            contentRevisionMap.put(&quot;contentId&quot;, contentId);
            contentRevisionMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentRevisionAndItem&quot;, contentRevisionMap);
            keySet = result.keySet();
            iter = keySet.iterator();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="A8BA3277CA586BA927A2F1087C8C90EA">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>575</LineStart>
<Snippet>        while (e.hasMoreElements()) {
            String name = e.nextElement();
            request.setAttribute(name, request.getParameter(name));
        }
    }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="12AF265A-8085-459E-A9C9-E0922DFFE1F5" iid="184AA5A1204CAADD84FDF4A473E4C7A3">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1469</LineStart>
<Snippet>        String quoteId = null;
        try {
            result = dispatcher.runSync(&quot;createQuoteFromCart&quot;,
                    UtilMisc.toMap(&quot;cart&quot;, cart,
                            &quot;userLogin&quot;, userLogin));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="E8E78258DA670BEE323457C523F309C9">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1327</LineStart>
<Snippet>        ShoppingCart cart = null;
        try {
            Map&lt;String, Object&gt; outMap = dispatcher.runSync(&quot;loadCartFromShoppingList&quot;,
                    UtilMisc.&lt;String, Object&gt;toMap(&quot;shoppingListId&quot;, shoppingListId,
                    &quot;userLogin&quot;, userLogin));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="A02A799AB08AABD62A18FE66501F324E">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>TrackingCodeEvents.java</FileName>
<FilePath>applications/marketing/src/org/ofbiz/marketing/tracking/TrackingCodeEvents.java</FilePath>
<LineStart>371</LineStart>
<Snippet>        java.sql.Timestamp nowStamp = UtilDateTime.nowTimestamp();

        String trackingCodeId = request.getParameter(&quot;autoTrackingCode&quot;);
        if (UtilValidate.isEmpty(trackingCodeId)) trackingCodeId = request.getParameter(&quot;atc&quot;);
        if (UtilValidate.isEmpty(trackingCodeId)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="4E6B28140DAA687FCF0E309E7F679934">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>505</LineStart>
<Snippet>        Map&lt;String, Object&gt; ftlResults = null;
        try {
            ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
        } catch (ServiceAuthException e) {
            String msg = e.getMessage();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1C85B63C-0870-45B8-9909-86BA43F68B05" iid="949F5C3C522CFD08177BB66FCCDE1664">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method closeEditWrap() in RenderSubContentCacheTransform.java sends unvalidated data to a web browser on line 275, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>RenderSubContentCacheTransform.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderSubContentCacheTransform.java</FilePath>
<LineStart>275</LineStart>
<Snippet>                ServletContext servletContext = request.getSession().getServletContext();
                RequestHandler rh = (RequestHandler) servletContext.getAttribute(&quot;_REQUEST_HANDLER_&quot;);
                out.append(rh.makeLink(request, response, &quot;/&quot; + fullRequest, false, false, true));
                out.write(&quot;\&quot;&gt;Edit&lt;/a&gt;&quot;);
                out.write(&quot;&lt;/div&gt;&quot;);</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>505</LineStart>
<Snippet>        Map&lt;String, Object&gt; ftlResults = null;
        try {
            ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
        } catch (ServiceAuthException e) {
            String msg = e.getMessage();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="D027DAA9-A3BE-49E4-BDBF-3DFF657F84CA" iid="9EA60336E34E3DE4CCF0701F73F1A877">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>OrderEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/order/OrderEvents.java</FilePath>
<LineStart>58</LineStart>
<Snippet>        Delegator delegator = (Delegator) request.getAttribute(&quot;delegator&quot;);
        GenericValue userLogin = (GenericValue) session.getAttribute(&quot;userLogin&quot;);
        String dataResourceId = request.getParameter(&quot;dataResourceId&quot;);

        try {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="CE028DFCCEB5BF328680DCEC308131FE">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 124, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>124</LineStart>
<Snippet>            if (s.charAt(i) == '\n') {
                checkAfterNewline();
                super.write(s, offset, i - offset + 1);
                offset = i + 1;
                lastWasNewline = true;</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>575</LineStart>
<Snippet>        while (e.hasMoreElements()) {
            String name = e.nextElement();
            request.setAttribute(name, request.getParameter(name));
        }
    }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="75CA7134-B6BE-444A-9815-E739432FCA47" iid="33BD3CDB830E659F1B8904C5EA35E592">
                            <Category>Cross-Site Scripting: Poor Validation</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method run() in InputValue.java uses HTML, XML or other type of encoding that is not always enough to prevent malicious code from reaching the web browser.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>InputValue.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/pseudotag/InputValue.java</FilePath>
<LineStart>145</LineStart>
<Snippet>                inputValue + &quot;\&quot;&quot;);
        } else {
            pageContext.getOut().print(inputValue);
        }
    }</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>505</LineStart>
<Snippet>        Map&lt;String, Object&gt; ftlResults = null;
        try {
            ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
        } catch (ServiceAuthException e) {
            String msg = e.getMessage();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="12AF265A-8085-459E-A9C9-E0922DFFE1F5" iid="0B6B32DA1FB20C4D1A398FC1C791CA68">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>251</LineStart>
<Snippet>                txtContext.put(&quot;mapKey&quot;, &quot;ARTICLE&quot;);
                txtContext.put(&quot;dataTemplateTypeId&quot;, &quot;NONE&quot;);
                Map&lt;String, Object&gt; txtResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, txtContext);
                isError = ModelService.RESPOND_ERROR.equals(txtResults.get(ModelService.RESPONSE_MESSAGE));
                if (isError) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="D027DAA9-A3BE-49E4-BDBF-3DFF657F84CA" iid="AC732AF9E59A65A60786B67CC107A648">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>ShipmentEvents.java</FileName>
<FilePath>applications/product/src/org/ofbiz/shipment/shipment/ShipmentEvents.java</FilePath>
<LineStart>49</LineStart>
<Snippet>
        String shipmentId = request.getParameter(&quot;shipmentId&quot;);
        String shipmentRouteSegmentId = request.getParameter(&quot;shipmentRouteSegmentId&quot;);
        String shipmentPackageSeqId = request.getParameter(&quot;shipmentPackageSeqId&quot;);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="2429A7C441586936C2053CB5BBE7EE20">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>CoreEvents.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/CoreEvents.java</FilePath>
<LineStart>412</LineStart>
<Snippet>        try {
            if (null!=request.getParameter(&quot;_RUN_SYNC_&quot;) &amp;&amp; request.getParameter(&quot;_RUN_SYNC_&quot;).equals(&quot;Y&quot;)) {
                syncServiceResult = dispatcher.runSync(serviceName, serviceContext);
            } else {
                dispatcher.schedule(jobName, poolName, serviceName, serviceContext, startTime, frequency, interval, count, endTime, maxRetry);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1C85B63C-0870-45B8-9909-86BA43F68B05" iid="8F1B254B3E88877CA44EE0D9DEBABA0E">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method closeEditWrap() in RenderContentAsText.java sends unvalidated data to a web browser on line 244, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>RenderContentAsText.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderContentAsText.java</FilePath>
<LineStart>244</LineStart>
<Snippet>                ServletContext servletContext = request.getSession().getServletContext();
                RequestHandler rh = (RequestHandler) servletContext.getAttribute(&quot;_REQUEST_HANDLER_&quot;);
                out.append(rh.makeLink(request, response, &quot;/&quot; + fullRequest, false, false, true));
                out.write(&quot;\&quot;&gt;Edit&lt;/a&gt;&quot;);
                out.write(&quot;&lt;/div&gt;&quot;);</Snippet>
                            </Primary>
                            <Source>
<FileName>ContentWorker.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/ContentWorker.java</FilePath>
<LineStart>194</LineStart>
<Snippet>                Map&lt;String,Object&gt; serviceRes;
                try {
                    serviceRes = dispatcher.runSync(serviceName, serviceCtx);
                } catch (GenericServiceException e) {
                    Debug.logError(e, module);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="B4CD9AEF07E929874DCE3B9EF902D3DE">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method write() in IndentingWriter.java sends unvalidated data to a web browser on line 124, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>IndentingWriter.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/IndentingWriter.java</FilePath>
<LineStart>124</LineStart>
<Snippet>            if (s.charAt(i) == '\n') {
                checkAfterNewline();
                super.write(s, offset, i - offset + 1);
                offset = i + 1;
                lastWasNewline = true;</Snippet>
                            </Primary>
                            <Source>
<FileName>CommonEvents.java</FileName>
<FilePath>framework/common/src/org/ofbiz/common/CommonEvents.java</FilePath>
<LineStart>231</LineStart>
<Snippet>    /** Simple event to set the users per-session currency uom value */
    public static String setSessionCurrencyUom(HttpServletRequest request, HttpServletResponse response) {
        String currencyUom = request.getParameter(&quot;currencyUom&quot;);
        if (UtilValidate.isNotEmpty(currencyUom)) {
            // update the session</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="CE645559721E5610CE5D9AE806FAECD9">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 263, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>263</LineStart>
<Snippet>                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);
                        }
                    } catch (Throwable t2) {</Snippet>
                            </Primary>
                            <Source>
<FileName>LayoutEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/layout/LayoutEvents.java</FilePath>
<LineStart>483</LineStart>
<Snippet>                Debug.logVerbose(&quot;in createSubContent, context:&quot; + context, module);
            }
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, context);
            boolean isError = ModelService.RESPOND_ERROR.equals(result.get(ModelService.RESPONSE_MESSAGE));
            if (isError) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="F052A87D3AF42EDD75F1EBCDAD07FD18">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>RequestHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/RequestHandler.java</FilePath>
<LineStart>128</LineStart>
<Snippet>        }

        String overrideViewUri = RequestHandler.getOverrideViewUri(request.getPathInfo());

        String requestMissingErrorMessage = &quot;Unknown request [&quot; + defaultRequestUri + &quot;]; this request does not exist or cannot be called directly.&quot;;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="59029BCCC85ACE52F30B265D3DD91B19">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>LoginEvents.java</FileName>
<FilePath>applications/securityext/src/org/ofbiz/securityext/login/LoginEvents.java</FilePath>
<LineStart>76</LineStart>
<Snippet>        if (userLogin == null) {

            String username = request.getParameter(&quot;USERNAME&quot;);
            String password = request.getParameter(&quot;PASSWORD&quot;);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="0BCF2BFC-1A1D-4156-8A58-FEFB307724AA" iid="49C1DD28C510AECA5B59241F64DD751C">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>OrderManagerEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/OrderManagerEvents.java</FilePath>
<LineStart>222</LineStart>
<Snippet>                    Map&lt;String, Object&gt; results = null;
                    try {
                        results = dispatcher.runSync(&quot;createPaymentFromPreference&quot;, UtilMisc.toMap(&quot;userLogin&quot;, userLogin,
                                &quot;orderPaymentPreferenceId&quot;, paymentPreference.get(&quot;orderPaymentPreferenceId&quot;), &quot;paymentRefNum&quot;, paymentReference,
                                &quot;paymentFromId&quot;, placingCustomer.getString(&quot;partyId&quot;), &quot;comments&quot;, &quot;Payment received offline and manually entered.&quot;));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="798E4513-03B3-4252-A644-FBA596AEFB2B" iid="F4C8608FA087EA91B791BDA4A5725C33">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 286, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>286</LineStart>
<Snippet>                    response.getOutputStream().print(errorMessage);
                } else {
                    response.getWriter().print(errorMessage);
                }
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>WebPosEvents.java</FileName>
<FilePath>specialpurpose/webpos/src/org/ofbiz/webpos/WebPosEvents.java</FilePath>
<LineStart>94</LineStart>
<Snippet>            GenericValue productStore = ProductStoreWorker.getProductStore(productStoreId, delegator);
            String facilityId = null;
            String currencyUomId = request.getParameter(&quot;currencyUomId&quot;);

            if (UtilValidate.isNotEmpty(productStore)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1C85B63C-0870-45B8-9909-86BA43F68B05" iid="01CC32033D377DB5E5F197ABADD884DF">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method closeEditWrap() in RenderSubContentCacheTransform.java sends unvalidated data to a web browser on line 275, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>RenderSubContentCacheTransform.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/webapp/ftl/RenderSubContentCacheTransform.java</FilePath>
<LineStart>275</LineStart>
<Snippet>                ServletContext servletContext = request.getSession().getServletContext();
                RequestHandler rh = (RequestHandler) servletContext.getAttribute(&quot;_REQUEST_HANDLER_&quot;);
                out.append(rh.makeLink(request, response, &quot;/&quot; + fullRequest, false, false, true));
                out.write(&quot;\&quot;&gt;Edit&lt;/a&gt;&quot;);
                out.write(&quot;&lt;/div&gt;&quot;);</Snippet>
                            </Primary>
                            <Source>
<FileName>CoreEvents.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/CoreEvents.java</FilePath>
<LineStart>412</LineStart>
<Snippet>        try {
            if (null!=request.getParameter(&quot;_RUN_SYNC_&quot;) &amp;&amp; request.getParameter(&quot;_RUN_SYNC_&quot;).equals(&quot;Y&quot;)) {
                syncServiceResult = dispatcher.runSync(serviceName, serviceContext);
            } else {
                dispatcher.schedule(jobName, poolName, serviceName, serviceContext, startTime, frequency, interval, count, endTime, maxRetry);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="1CC0AEA1-DC5B-407F-A926-6316FD9C6DEE" iid="A5224BA71A9E820EEE9DA2534BD03F3B">
                            <Category>Cross-Site Scripting: Reflected</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 261, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>261</LineStart>
<Snippet>                    try {
                        if (UtilJ2eeCompat.useOutputStreamNotWriter(getServletContext())) {
                            response.getOutputStream().print(errorMessage);
                        } else {
                            response.getWriter().print(errorMessage);</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>693</LineStart>
<Snippet>            return &quot;error&quot;;
        }
        String orderId = request.getParameter(&quot;orderId_o_0&quot;);
        // set the order id if supplied
        if (UtilValidate.isNotEmpty(orderId)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="12AF265A-8085-459E-A9C9-E0922DFFE1F5" iid="E17FE016DC656C47BDF086908BF82B01">
                            <Category>Cross-Site Scripting: Persistent</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>The method doGet() in ControlServlet.java sends unvalidated data to a web browser on line 269, which can result in the browser executing malicious code.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>ControlServlet.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ControlServlet.java</FilePath>
<LineStart>269</LineStart>
<Snippet>                            int errorToSend = HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
                            Debug.logWarning(&quot;Error while trying to write error message using response.getOutputStream or response.getWriter: &quot; + t.toString() + &quot;; sending error code [&quot; + errorToSend + &quot;], and message [&quot; + errorMessage + &quot;]&quot;, module);
                            response.sendError(errorToSend, errorMessage);
                        } catch (Throwable t3) {
                            // wow, still bad... just throw an IllegalStateException with the message and let the servlet container handle it</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1499</LineStart>
<Snippet>        String custRequestId = null;
        try {
            result = dispatcher.runSync(&quot;createCustRequestFromCart&quot;,
                    UtilMisc.toMap(&quot;cart&quot;, cart,
                            &quot;userLogin&quot;, userLogin));</Snippet>
                            </Source>
                        </Issue>
                    </GroupingSection>
                    <GroupingSection count="737">
                        <groupTitle>A1 Injection</groupTitle>
                        <MajorAttributeSummary>
                            <MetaInfo>
<Name>Abstract</Name>
<Value>Constructing a dynamic SQL statement with user input could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands. </Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Explanation</Name>
<Value>SQL injection errors occur when:

1. Data enters a program from an untrusted source.

In this case HP Fortify Static Code Analyzer could not determine that the source of the data is trusted.

2. The data is used to dynamically construct a SQL query. 



Example 1: The following code dynamically constructs and executes a SQL query that searches for items matching a specified name. The query restricts the items displayed to those where the owner matches the user name of the currently-authenticated user. 


...
	String userName = ctx.getAuthenticatedUserName();
	String itemName = request.getParameter(&quot;itemName&quot;);
	String query = &quot;SELECT * FROM items WHERE owner = '&quot; 
				+ userName + &quot;' AND itemname = '&quot;  
				+ itemName + &quot;'&quot;;
	ResultSet rs = stmt.execute(query);
	...


The query that this code intends to execute follows:


	SELECT * FROM items
	WHERE owner = &lt;userName&gt;
	AND itemname = &lt;itemName&gt;;


However, because the query is constructed dynamically by concatenating a constant base query string and a user input string, the query only behaves correctly if itemName does not contain a single-quote character. If an attacker with the user name wiley enters the string &quot;name' OR 'a'='a&quot; for itemName, then the query becomes the following:


	SELECT * FROM items
	WHERE owner = 'wiley'
	AND itemname = 'name' OR 'a'='a';


The addition of the OR 'a'='a' condition causes the where clause to always evaluate to true, so the query becomes logically equivalent to the much simpler query:


	SELECT * FROM items;


This simplification of the query allows the attacker to bypass the requirement that the query only return items owned by the authenticated user; the query now returns all entries stored in the items table, regardless of their specified owner.

Example 2: This example examines the effects of a different malicious value passed to the query constructed and executed in Example 1. If an attacker with the user name wiley enters the string &quot;name'; DELETE FROM items; --&quot; for itemName, then the query becomes the following two queries:


	SELECT * FROM items 
	WHERE owner = 'wiley'
	AND itemname = 'name';

	DELETE FROM items;

	--'


Many database servers, including Microsoft(R) SQL Server 2000, allow multiple SQL statements separated by semicolons to be executed at once. While this attack string results in an error on Oracle and other database servers that do not allow the batch-execution of statements separated by semicolons, on databases that do allow batch execution, this type of attack allows the attacker to execute arbitrary commands against the database. 

Notice the trailing pair of hyphens (--), which specifies to most database servers that the remainder of the statement is to be treated as a comment and not executed [4]. In this case the comment character serves to remove the trailing single-quote left over from the modified query. On a database where comments are not allowed to be used in this way, the general attack could still be made effective using a trick similar to the one used in Example 1. If an attacker enters the string &quot;name'); DELETE FROM items; SELECT * FROM items WHERE 'a'='a&quot;, the following three valid statements will be created: 


	SELECT * FROM items 
	WHERE owner = 'wiley'
	AND itemname = 'name';

	DELETE FROM items;

	SELECT * FROM items WHERE 'a'='a';


One traditional approach to preventing SQL injection attacks is to handle them as an input validation problem and either accept only characters from a whitelist of safe values or identify and escape a blacklist of potentially malicious values. Whitelisting can be a very effective means of enforcing strict input validation rules, but parameterized SQL statements require less maintenance and can offer more guarantees with respect to security. As is almost always the case, blacklisting is riddled with loopholes that make it ineffective at preventing SQL injection attacks. For example, attackers can: 

- Target fields that are not quoted

- Find ways to bypass the need for certain escaped meta-characters

- Use stored procedures to hide the injected meta-characters

Manually escaping characters in input to SQL queries can help, but it will not make your application secure from SQL injection attacks. 

Another solution commonly proposed for dealing with SQL injection attacks is to use stored procedures. Although stored procedures prevent some types of SQL injection attacks, they fail to protect against many others. Stored procedures typically help prevent SQL injection attacks by limiting the types of statements that can be passed to their parameters. However, there are many ways around the limitations and many interesting statements that can still be passed to stored procedures. Again, stored procedures can prevent some exploits, but they will not make your application secure against SQL injection attacks. 
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Recommendations</Name>
<Value>The root cause of a SQL injection vulnerability is the ability of an attacker to change context in the SQL query, causing a value that the programmer intended to be interpreted as data to be interpreted as a command instead. When a SQL query is constructed, the programmer knows what should be interpreted as part of the command and what should be interpreted as data. Parameterized SQL statements can enforce this behavior by disallowing data-directed context changes and preventing nearly all SQL injection attacks. Parameterized SQL statements are constructed using strings of regular SQL, but when user-supplied data needs to be included, they create bind parameters, which are placeholders for data that is subsequently inserted. Bind parameters allow the program to explicitly specify to the database what should be treated as a command and what should be treated as data. When the program is ready to execute a statement, it specifies to the database the runtime values to use for the value of each of the bind parameters, without the risk of the data being interpreted as commands. 

The previous example can be rewritten to use parameterized SQL statements (instead of concatenating user supplied strings) as follows:


...
String userName = ctx.getAuthenticatedUserName();
String itemName = request.getParameter(&quot;itemName&quot;);
String query =
        &quot;SELECT * FROM items WHERE itemname=? AND owner=?&quot;; 
PreparedStatement stmt = conn.prepareStatement(query);
stmt.setString(1, itemName);
stmt.setString(2, userName);
ResultSet results = stmt.execute();
...


More complicated scenarios, often found in report generation code, require that user input affect the command structure of the SQL statement, such as the addition of dynamic constraints in the WHERE clause. Do not use this requirement to justify concatenating user input into query strings. Prevent SQL injection attacks where user input must affect statement command structure with a level of indirection: create a set of legitimate strings that correspond to different elements you might include in a SQL statement. When constructing a statement, use input from the user to select from this set of application-controlled values. 
</Value>
                            </MetaInfo>
                            <MetaInfo>
<Name>Tips</Name>
<Value>1. A common mistake is to use parameterized SQL statements that are constructed by concatenating user-controlled strings. Of course, this defeats the purpose of using parameterized SQL statements. If you are not certain that the strings used to form statements are constants controlled by the application, do not assume that they are safe because they are not being executed directly as SQL strings. Thoroughly investigate all uses of user-controlled strings in SQL statements and verify that none can be used to modify the meaning of the query. 

2. Data is untrustworthy if it originates from public non-final string fields of a class. These types of fields may be modified by an unknown source.

3. Fortify RTA adds protection against this category.</Value>
                            </MetaInfo>
                            <AttributeValue>
<Name>&lt;Unaudited&gt;</Name>
<Count>737</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Not an Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Reliability Issue</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Bad Practice</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Suspicious</Name>
<Count>0</Count>
                            </AttributeValue>
                            <AttributeValue>
<Name>Exploitable</Name>
<Count>0</Count>
                            </AttributeValue>
                        </MajorAttributeSummary>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="273F266447E1A3C079EE83370056468D">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 363 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>363</LineStart>
<Snippet>            _ind = 1;
            if (specifyTypeAndConcur) {
                _ps = _connection.prepareStatement(sql, resultSetType, resultSetConcurrency);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {</Snippet>
                            </Primary>
                            <Source>
<FileName>WebPosEvents.java</FileName>
<FilePath>specialpurpose/webpos/src/org/ofbiz/webpos/WebPosEvents.java</FilePath>
<LineStart>108</LineStart>
<Snippet>
            if (UtilValidate.isEmpty(cart)) {
                cart = new ShoppingCart(delegator, productStoreId, request.getLocale(), currencyUomId);
                session.setAttribute(&quot;shoppingCart&quot;, cart);
            }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="E65FE26BE91A20286E5D8781896C23D6">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>TrackingCodeEvents.java</FileName>
<FilePath>applications/marketing/src/org/ofbiz/marketing/tracking/TrackingCodeEvents.java</FilePath>
<LineStart>372</LineStart>
<Snippet>
        String trackingCodeId = request.getParameter(&quot;autoTrackingCode&quot;);
        if (UtilValidate.isEmpty(trackingCodeId)) trackingCodeId = request.getParameter(&quot;atc&quot;);
        if (UtilValidate.isEmpty(trackingCodeId)) {
            Cookie[] cookies = request.getCookies();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="00E5692AD31FC9B3E0D0DAAA9FE0E484">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 366 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>366</LineStart>
<Snippet>                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {
                _ps = _connection.prepareStatement(sql);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] (def) _ps=&quot; + _ps, module);
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>CommonEvents.java</FileName>
<FilePath>framework/common/src/org/ofbiz/common/CommonEvents.java</FilePath>
<LineStart>179</LineStart>
<Snippet>     * setting should be passed as a &quot;newLocale&quot; request parameter. */
    public static String setSessionLocale(HttpServletRequest request, HttpServletResponse response) {
        String localeString = request.getParameter(&quot;newLocale&quot;);
        if (UtilValidate.isNotEmpty(localeString)) {
            UtilHttp.setLocale(request, localeString);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="95EE709FAAF952B573DDA665162916AF">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceEventHandler.java</FilePath>
<LineStart>337</LineStart>
<Snippet>                dispatcher.runAsync(serviceName, serviceContext);
            } else {
                result = dispatcher.runSync(serviceName, serviceContext);
            }
        } catch (ServiceAuthException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="F2362B19B78E2BC09A798DF377546742">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>OrderManagerEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/OrderManagerEvents.java</FilePath>
<LineStart>98</LineStart>
<Snippet>                    Map&lt;String, Object&gt; results = null;
                    try {
                        results = dispatcher.runSync(&quot;createPaymentFromPreference&quot;, UtilMisc.toMap(&quot;orderPaymentPreferenceId&quot;, ppref.get(&quot;orderPaymentPreferenceId&quot;),
                                &quot;paymentFromId&quot;, placingCustomer.getString(&quot;partyId&quot;), &quot;comments&quot;, &quot;Payment received offline and manually entered.&quot;));
                    } catch (GenericServiceException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="44AC38A583ACF69397B44C59E89BBFC4">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>CommonEvents.java</FileName>
<FilePath>framework/common/src/org/ofbiz/common/CommonEvents.java</FilePath>
<LineStart>141</LineStart>
<Snippet>        Security security = (Security) request.getAttribute(&quot;security&quot;);
        GenericValue userLogin = (GenericValue) request.getSession().getAttribute(&quot;userLogin&quot;);
        String visitId = request.getParameter(&quot;visitId&quot;);
        if (visitId != null) request.setAttribute(&quot;visitId&quot;, visitId);
        if (security.hasPermission(&quot;SEND_CONTROL_APPLET&quot;, userLogin)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="2186203FB06FC78C7F71509C0AB0D2B8">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1994</LineStart>
<Snippet>                    appendOrderItemMap.put(&quot;shipGroupSeqId&quot;, shipGroupSeqId);
                    try {
                        Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;appendOrderItem&quot;, appendOrderItemMap);
                        request.setAttribute(&quot;shoppingCart&quot;, (ShoppingCart) result.get(&quot;shoppingCart&quot;));
                        ShoppingCartEvents.destroyCart(request, response);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="56749B651E0EA16C16F030F9B72DA98C">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CoreEvents.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/CoreEvents.java</FilePath>
<LineStart>412</LineStart>
<Snippet>        try {
            if (null!=request.getParameter(&quot;_RUN_SYNC_&quot;) &amp;&amp; request.getParameter(&quot;_RUN_SYNC_&quot;).equals(&quot;Y&quot;)) {
                syncServiceResult = dispatcher.runSync(serviceName, serviceContext);
            } else {
                dispatcher.schedule(jobName, poolName, serviceName, serviceContext, startTime, frequency, interval, count, endTime, maxRetry);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="A3B0C2F72C238FBF5EA647C5AF3CFACA">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 3048 of DatabaseUtil.java, the method deleteForeignKeyIndex() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>3048</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(deleteIndexSql);
        } catch (SQLException e) {
            return &quot;SQL Exception while executing the following:\n&quot; + deleteIndexSql + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>575</LineStart>
<Snippet>        while (e.hasMoreElements()) {
            String name = e.nextElement();
            request.setAttribute(name, request.getParameter(name));
        }
    }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="2A0F2C1E51DEE5719536FB3C17795255">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 363 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>363</LineStart>
<Snippet>            _ind = 1;
            if (specifyTypeAndConcur) {
                _ps = _connection.prepareStatement(sql, resultSetType, resultSetConcurrency);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {</Snippet>
                            </Primary>
                            <Source>
<FileName>LoginWorker.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/LoginWorker.java</FilePath>
<LineStart>264</LineStart>
<Snippet>
                // keep the previous request name in the session
                session.setAttribute(&quot;_PREVIOUS_REQUEST_&quot;, request.getPathInfo());

                // NOTE: not using the old _PREVIOUS_PARAMS_ attribute at all because it was a security hole as it was used to put data in the URL (never encrypted) that was originally in a form field that may have been encrypted</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="5D5742DA9A389F4FAC267261A3F0EA46">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2522 of DatabaseUtil.java, the method createPrimaryKey() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2522</LineStart>
<Snippet>            try {
                stmt = connection.createStatement();
                stmt.executeUpdate(sqlBuf.toString());
            } catch (SQLException e) {
                return &quot;SQL Exception while executing the following:\n&quot; + sqlBuf.toString() + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>505</LineStart>
<Snippet>        Map&lt;String, Object&gt; ftlResults = null;
        try {
            ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
        } catch (ServiceAuthException e) {
            String msg = e.getMessage();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="AEBBF1A30EEDFBCA3C883596B0CB1423">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>ICalWorker.java</FileName>
<FilePath>applications/workeffort/src/org/ofbiz/workeffort/workeffort/ICalWorker.java</FilePath>
<LineStart>285</LineStart>
<Snippet>        HttpSession session = request.getSession();
        LocalDispatcher dispatcher = (LocalDispatcher) request.getAttribute(&quot;dispatcher&quot;);
        Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;userLogin&quot;, serviceMap);
        if (ServiceUtil.isError(result) || ServiceUtil.isFailure(result)) {
            return;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="899B6211F1114CE5547994FCC1108F6E">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2826 of DatabaseUtil.java, the method deleteDeclaredIndex() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2826</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(deleteIndexSql);
        } catch (SQLException e) {
            return &quot;SQL Exception while executing the following:\n&quot; + deleteIndexSql + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceMultiEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceMultiEventHandler.java</FilePath>
<LineStart>308</LineStart>
<Snippet>                Map&lt;String, Object&gt; result = null;
                try {
                    result = dispatcher.runSync(serviceName, serviceContext);
                } catch (ServiceAuthException e) {
                    // not logging since the service engine already did</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="50A21450F4E8D029D486B67D6C3455B7">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 1922 of DatabaseUtil.java, the method addColumn() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>1922</LineStart>
<Snippet>            try {
                stmt = connection.createStatement();
                stmt.executeUpdate(sql2);
            } catch (SQLException e2) {
                // if this also fails report original error, not this error...</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilObject.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilObject.java</FilePath>
<LineStart>137</LineStart>
<Snippet>                ObjectInputStream ois = new ObjectInputStream(bis, Thread.currentThread().getContextClassLoader());
                try {
                    obj = ois.readObject();
                } catch (ClassNotFoundException e) {
                    Debug.logError(e, module);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="C2A67C600EC084553524B8E0F1EF8D76">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>234</LineStart>
<Snippet>
    public static Map&lt;String, Object&gt; getUrlOnlyParameterMap(HttpServletRequest request) {
        return getUrlOnlyParameterMap(request.getQueryString(), request.getPathInfo());
    }
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="D5FDC2E1A51471580B19482794293B25">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CommonEvents.java</FileName>
<FilePath>framework/common/src/org/ofbiz/common/CommonEvents.java</FilePath>
<LineStart>163</LineStart>
<Snippet>        Security security = (Security) request.getAttribute(&quot;security&quot;);
        GenericValue userLogin = (GenericValue) request.getSession().getAttribute(&quot;userLogin&quot;);
        String visitId = request.getParameter(&quot;visitId&quot;);
        if (visitId != null) request.setAttribute(&quot;visitId&quot;, visitId);
        if (security.hasPermission(&quot;SEND_CONTROL_APPLET&quot;, userLogin)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="75D8006FFF0AEA152A852A9B0A6D93B9">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>221</LineStart>
<Snippet>                sumContext.put(&quot;mapKey&quot;, &quot;SUMMARY&quot;);
                sumContext.put(&quot;dataTemplateTypeId&quot;, &quot;NONE&quot;);
                Map&lt;String, Object&gt; sumResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, sumContext);
                isError = ModelService.RESPOND_ERROR.equals(sumResults.get(ModelService.RESPONSE_MESSAGE));
                if (isError) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="4863B487CE537324FC855C2AD411169C">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>WebPosEvents.java</FileName>
<FilePath>specialpurpose/webpos/src/org/ofbiz/webpos/WebPosEvents.java</FilePath>
<LineStart>94</LineStart>
<Snippet>            GenericValue productStore = ProductStoreWorker.getProductStore(productStoreId, delegator);
            String facilityId = null;
            String currencyUomId = request.getParameter(&quot;currencyUomId&quot;);

            if (UtilValidate.isNotEmpty(productStore)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="0EB95C8F0900E45ACC0067E9691E6B3B">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>268</LineStart>
<Snippet>        if (!&quot;image/png&quot;.equals(mimType)) {
            session.setAttribute(&quot;frameContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
            session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;The selected image type is incorrect, please select the image type *.PNG to upload.&quot;);
            return &quot;error&quot;;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="834B58C60141ED921EE3DA26DFF6A4DD">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>184</LineStart>
<Snippet>
    public static Map&lt;String, Object&gt; getPathInfoOnlyParameterMap(HttpServletRequest request, Set&lt;? extends String&gt; nameSet, Boolean onlyIncludeOrSkip) {
        return getPathInfoOnlyParameterMap(request.getPathInfo(), nameSet, onlyIncludeOrSkip);
    }
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="37F799EE410B4309A2A0DED66FE4BCF9">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>LoginWorker.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/LoginWorker.java</FilePath>
<LineStart>264</LineStart>
<Snippet>
                // keep the previous request name in the session
                session.setAttribute(&quot;_PREVIOUS_REQUEST_&quot;, request.getPathInfo());

                // NOTE: not using the old _PREVIOUS_PARAMS_ attribute at all because it was a security hole as it was used to put data in the URL (never encrypted) that was originally in a form field that may have been encrypted</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="508A1232D31AE211C262828A9E1EEBCC">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>119</LineStart>
<Snippet>            contentRevisionMap.put(&quot;contentId&quot;, contentId);
            contentRevisionMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentRevisionAndItem&quot;, contentRevisionMap);
            keySet = result.keySet();
            iter = keySet.iterator();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="79D1F3C7DA7D0C0D2CDC4A4C31C41821">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>WebPosEvents.java</FileName>
<FilePath>specialpurpose/webpos/src/org/ofbiz/webpos/WebPosEvents.java</FilePath>
<LineStart>94</LineStart>
<Snippet>            GenericValue productStore = ProductStoreWorker.getProductStore(productStoreId, delegator);
            String facilityId = null;
            String currencyUomId = request.getParameter(&quot;currencyUomId&quot;);

            if (UtilValidate.isNotEmpty(productStore)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="827199470A84EF8BE41E5FE07C2170DE">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 363 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>363</LineStart>
<Snippet>            _ind = 1;
            if (specifyTypeAndConcur) {
                _ps = _connection.prepareStatement(sql, resultSetType, resultSetConcurrency);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {</Snippet>
                            </Primary>
                            <Source>
<FileName>ICalWorker.java</FileName>
<FilePath>applications/workeffort/src/org/ofbiz/workeffort/workeffort/ICalWorker.java</FilePath>
<LineStart>285</LineStart>
<Snippet>        HttpSession session = request.getSession();
        LocalDispatcher dispatcher = (LocalDispatcher) request.getAttribute(&quot;dispatcher&quot;);
        Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;userLogin&quot;, serviceMap);
        if (ServiceUtil.isError(result) || ServiceUtil.isFailure(result)) {
            return;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="1B8343AE2B0352DB3D72F1A01A837067">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2044 of DatabaseUtil.java, the method repairColumnSize() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2044</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            int changed = stmt.executeUpdate(sql1);
            if (Debug.infoOn()) Debug.logInfo(&quot;[moveData] &quot; + changed + &quot; records updated&quot;, module);
        } catch (SQLException e) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceMultiEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceMultiEventHandler.java</FilePath>
<LineStart>308</LineStart>
<Snippet>                Map&lt;String, Object&gt; result = null;
                try {
                    result = dispatcher.runSync(serviceName, serviceContext);
                } catch (ServiceAuthException e) {
                    // not logging since the service engine already did</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="EDB7FD4CB773D1DC58C452FD797BBE36">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 363 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>363</LineStart>
<Snippet>            _ind = 1;
            if (specifyTypeAndConcur) {
                _ps = _connection.prepareStatement(sql, resultSetType, resultSetConcurrency);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>267</LineStart>
<Snippet>        }
        if (!&quot;image/png&quot;.equals(mimType)) {
            session.setAttribute(&quot;frameContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
            session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;The selected image type is incorrect, please select the image type *.PNG to upload.&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="743F5D587411CC9F9DDA8A6125CD04D3">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>WebShoppingCart.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/WebShoppingCart.java</FilePath>
<LineStart>49</LineStart>
<Snippet>                (currencyUom != null ? currencyUom : ProductStoreWorker.getStoreCurrencyUomId(request)),
                request.getParameter(&quot;billToCustomerPartyId&quot;),
                (request.getParameter(&quot;supplierPartyId&quot;) != null ? request.getParameter(&quot;supplierPartyId&quot;) : request.getParameter(&quot;billFromVendorPartyId&quot;)));

        HttpSession session = request.getSession(true);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="48D9ED66C55AE0813B58A5D8A4A4486C">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>590</LineStart>
<Snippet>    public static StringBuffer getFullRequestUrl(HttpServletRequest request) {
        StringBuffer requestUrl = UtilHttp.getServerRootUrl(request);
        requestUrl.append(request.getRequestURI());
        if (request.getQueryString() != null) {
            requestUrl.append(&quot;?&quot; + request.getQueryString());</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="58EABEE5A006FFD8D9C12CBA0797BEE5">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1327</LineStart>
<Snippet>        ShoppingCart cart = null;
        try {
            Map&lt;String, Object&gt; outMap = dispatcher.runSync(&quot;loadCartFromShoppingList&quot;,
                    UtilMisc.&lt;String, Object&gt;toMap(&quot;shoppingListId&quot;, shoppingListId,
                    &quot;userLogin&quot;, userLogin));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="558CA861BE4AEF104AF1626CFAE19036">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>183</LineStart>
<Snippet>        Map&lt;String, Object&gt; results = null;
        try {
            results = dispatcher.runSync(&quot;renderCompDocPdf&quot;, mapIn);
        } catch (ServiceAuthException e) {
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, e.toString());</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="AE50FFCA57601AB4502A38254441EBB5">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2264 of DatabaseUtil.java, the method createForeignKey() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2264</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(sqlBuf.toString());
        } catch (SQLException e) {
            return &quot;SQL Exception while executing the following:\n&quot; + sqlBuf.toString() + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>CoreEvents.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/CoreEvents.java</FilePath>
<LineStart>412</LineStart>
<Snippet>        try {
            if (null!=request.getParameter(&quot;_RUN_SYNC_&quot;) &amp;&amp; request.getParameter(&quot;_RUN_SYNC_&quot;).equals(&quot;Y&quot;)) {
                syncServiceResult = dispatcher.runSync(serviceName, serviceContext);
            } else {
                dispatcher.schedule(jobName, poolName, serviceName, serviceContext, startTime, frequency, interval, count, endTime, maxRetry);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="2727B1B3D2E46F65560A7AF43B2C4D0F">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>DataEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/data/DataEvents.java</FilePath>
<LineStart>136</LineStart>
<Snippet>            Map&lt;String, Object&gt; permSvcResp;
            try {
                permSvcResp = dispatcher.runSync(permissionService, permSvcCtx);
            } catch (GenericServiceException e) {
                Debug.logError(e, module);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="E29FC5592A5519ED4E911EA8A11D4CC3">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>LayoutEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/layout/LayoutEvents.java</FilePath>
<LineStart>483</LineStart>
<Snippet>                Debug.logVerbose(&quot;in createSubContent, context:&quot; + context, module);
            }
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, context);
            boolean isError = ModelService.RESPOND_ERROR.equals(result.get(ModelService.RESPONSE_MESSAGE));
            if (isError) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="B116A41100BF18B6EBD972A5922F6339">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CommonEvents.java</FileName>
<FilePath>framework/common/src/org/ofbiz/common/CommonEvents.java</FilePath>
<LineStart>179</LineStart>
<Snippet>     * setting should be passed as a &quot;newLocale&quot; request parameter. */
    public static String setSessionLocale(HttpServletRequest request, HttpServletResponse response) {
        String localeString = request.getParameter(&quot;newLocale&quot;);
        if (UtilValidate.isNotEmpty(localeString)) {
            UtilHttp.setLocale(request, localeString);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="9B6133180B4DED2774A285DA2A6AE259">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>945</LineStart>
<Snippet>            newCart = cartList.remove(cartIndex);
        } else {
            String productStoreId = request.getParameter(&quot;productStoreId&quot;);
            if (UtilValidate.isNotEmpty(productStoreId)) {
                session.setAttribute(&quot;productStoreId&quot;, productStoreId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="B721F92129E00EC545DDC318DE70A80B">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ShipmentEvents.java</FileName>
<FilePath>applications/product/src/org/ofbiz/shipment/shipment/ShipmentEvents.java</FilePath>
<LineStart>49</LineStart>
<Snippet>
        String shipmentId = request.getParameter(&quot;shipmentId&quot;);
        String shipmentRouteSegmentId = request.getParameter(&quot;shipmentRouteSegmentId&quot;);
        String shipmentPackageSeqId = request.getParameter(&quot;shipmentPackageSeqId&quot;);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="63274B65E581D622F5393A56A223ECD8">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>LayoutEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/layout/LayoutEvents.java</FilePath>
<LineStart>114</LineStart>
<Snippet>            }

            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, context);
            //Debug.logVerbose(&quot;in createLayoutImage, result:&quot; + result, module);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="7228951FBABEB7B2AB57DEBDA6041462">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>556</LineStart>
<Snippet>
        session.setAttribute(&quot;_WEBAPP_NAME_&quot;, UtilHttp.getApplicationName(request));
        session.setAttribute(&quot;_CLIENT_LOCALE_&quot;, request.getLocale());
        session.setAttribute(&quot;_CLIENT_REQUEST_&quot;, fullRequestUrl.toString());
        session.setAttribute(&quot;_CLIENT_USER_AGENT_&quot;, request.getHeader(&quot;User-Agent&quot;) != null ? request.getHeader(&quot;User-Agent&quot;) : &quot;&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="7AB58321841EE54B4010A4433BCF5AC2">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>LayoutEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/layout/LayoutEvents.java</FilePath>
<LineStart>552</LineStart>
<Snippet>            context.put(&quot;textData&quot;, paramMap.get(&quot;textData&quot;));
            context.put(&quot;contentAssocTypeId&quot;, null);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, context);
            boolean isError = ModelService.RESPOND_ERROR.equals(result.get(ModelService.RESPONSE_MESSAGE));
            if (isError) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="58EABEE5A006FFD8D9C12CBA0797BEE4">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1327</LineStart>
<Snippet>        ShoppingCart cart = null;
        try {
            Map&lt;String, Object&gt; outMap = dispatcher.runSync(&quot;loadCartFromShoppingList&quot;,
                    UtilMisc.&lt;String, Object&gt;toMap(&quot;shoppingListId&quot;, shoppingListId,
                    &quot;userLogin&quot;, userLogin));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="F50E7D373DA31DB86B792AA010A4DD47">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ExpressCheckoutEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/thirdparty/paypal/ExpressCheckoutEvents.java</FilePath>
<LineStart>158</LineStart>
<Snippet>            Map&lt;String, Object&gt; result = null;
            try {
                result = dispatcher.runSync(serviceName, inMap);
            } catch (GenericServiceException e) {
                request.setAttribute(&quot;_EVENT_MESSAGE_&quot;, UtilProperties.getMessage(resourceErr, &quot;AccountingPayPalCommunicationError&quot;, locale));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="4DEB8B64F4735FABF522D654DCD9E1DF">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ShipmentEvents.java</FileName>
<FilePath>applications/product/src/org/ofbiz/shipment/shipment/ShipmentEvents.java</FilePath>
<LineStart>95</LineStart>
<Snippet>        GenericValue userLogin = (GenericValue)request.getSession().getAttribute(&quot;userLogin&quot;);

        String shipmentId = request.getParameter(&quot;shipmentIdReceived&quot;);
        String forceShipmentReceived = request.getParameter(&quot;forceShipmentReceived&quot;);
        if (UtilValidate.isNotEmpty(shipmentId) &amp;&amp; &quot;Y&quot;.equals(forceShipmentReceived)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="DC586610461CB0AFF075A7FFD6485C37">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>688</LineStart>
<Snippet>        
        // TODO: the code below here needs some cleanups
        String billToCustomerPartyId = request.getParameter(&quot;billToCustomerPartyId_o_0&quot;);
        if (UtilValidate.isEmpty(billToCustomerPartyId) &amp;&amp; UtilValidate.isEmpty(supplierPartyId)) {
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, UtilProperties.getMessage(resource_error, &quot;OrderCouldNotInitPurchaseOrder&quot;, locale));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="80DE8500ABF765D84A9044EA1C4F3BB0">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 366 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>366</LineStart>
<Snippet>                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {
                _ps = _connection.prepareStatement(sql);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] (def) _ps=&quot; + _ps, module);
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>WebPosEvents.java</FileName>
<FilePath>specialpurpose/webpos/src/org/ofbiz/webpos/WebPosEvents.java</FilePath>
<LineStart>94</LineStart>
<Snippet>            GenericValue productStore = ProductStoreWorker.getProductStore(productStoreId, delegator);
            String facilityId = null;
            String currencyUomId = request.getParameter(&quot;currencyUomId&quot;);

            if (UtilValidate.isNotEmpty(productStore)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="B01D5302D58EF24576EAB132FE2EB176">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>402</LineStart>
<Snippet>        if(UtilValidate.isEmpty(request.getParameter(&quot;frameContentId&quot;))) {
            if (UtilValidate.isNotEmpty(request.getParameter(&quot;frameExistContentId&quot;)) &amp;&amp; UtilValidate.isNotEmpty(request.getParameter(&quot;frameExistDataResourceId&quot;))) {
                session.setAttribute(&quot;frameExistContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
                session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="B61C39BA734D0E5EDA12D980EB42E1DF">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 363 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>363</LineStart>
<Snippet>            _ind = 1;
            if (specifyTypeAndConcur) {
                _ps = _connection.prepareStatement(sql, resultSetType, resultSetConcurrency);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {</Snippet>
                            </Primary>
                            <Source>
<FileName>CoreEvents.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/CoreEvents.java</FilePath>
<LineStart>412</LineStart>
<Snippet>        try {
            if (null!=request.getParameter(&quot;_RUN_SYNC_&quot;) &amp;&amp; request.getParameter(&quot;_RUN_SYNC_&quot;).equals(&quot;Y&quot;)) {
                syncServiceResult = dispatcher.runSync(serviceName, serviceContext);
            } else {
                dispatcher.schedule(jobName, poolName, serviceName, serviceContext, startTime, frequency, interval, count, endTime, maxRetry);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="E4AC511287706CD55BDDC1A044893623">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>257</LineStart>
<Snippet>        Map&lt;String, Object&gt; results = null;
        try {
            results = dispatcher.runSync(&quot;renderContentPdf&quot;, mapIn);
        } catch (ServiceAuthException e) {
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, e.toString());</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="764719D6BE718CB99A0F5C68EF7EA089">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilObject.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilObject.java</FilePath>
<LineStart>137</LineStart>
<Snippet>                ObjectInputStream ois = new ObjectInputStream(bis, Thread.currentThread().getContextClassLoader());
                try {
                    obj = ois.readObject();
                } catch (ClassNotFoundException e) {
                    Debug.logError(e, module);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="1DBEC9413D2499C5730403222160E976">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 1922 of DatabaseUtil.java, the method addColumn() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>1922</LineStart>
<Snippet>            try {
                stmt = connection.createStatement();
                stmt.executeUpdate(sql2);
            } catch (SQLException e2) {
                // if this also fails report original error, not this error...</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>505</LineStart>
<Snippet>        Map&lt;String, Object&gt; ftlResults = null;
        try {
            ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
        } catch (ServiceAuthException e) {
            String msg = e.getMessage();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="6879A1E9839A2332B348C1B6A64A4B18">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>303</LineStart>
<Snippet>            dataResourceCtx.put(&quot;mimeTypeId&quot;, &quot;image/png&quot;);
            dataResourceCtx.put(&quot;isPublic&quot;, &quot;Y&quot;);
            Map&lt;String, Object&gt; dataResourceResult = dispatcher.runSync(&quot;createDataResource&quot;, dataResourceCtx);
            dataResourceId = dataResourceResult.get(&quot;dataResourceId&quot;).toString();
            //create content</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="5DE0626989C502FFDF82DD02322F68A2">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>CheckOutEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/CheckOutEvents.java</FilePath>
<LineStart>300</LineStart>
<Snippet>
        if (UtilValidate.isNotEmpty(request.getParameter(&quot;issuerId&quot;))) {
            request.setAttribute(&quot;issuerId&quot;, request.getParameter(&quot;issuerId&quot;));
        }
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="AAD832FD9CC6C91716432C39650EAFD3">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>127</LineStart>
<Snippet>
            Object value = null;
            String[] paramArr = request.getParameterValues(name);
            if (paramArr != null) {
                if (paramArr.length &gt; 1) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="CC8DF1A83750F0C6129BCD7FA5AD1981">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2917 of DatabaseUtil.java, the method createForeignKeyIndex() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2917</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(createIndexSql);
        } catch (SQLException e) {
            return &quot;SQL Exception while executing the following:\n&quot; + createIndexSql + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>119</LineStart>
<Snippet>            contentRevisionMap.put(&quot;contentId&quot;, contentId);
            contentRevisionMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentRevisionAndItem&quot;, contentRevisionMap);
            keySet = result.keySet();
            iter = keySet.iterator();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="EE2D630D8AB69B973B6BE07CE1F70D01">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 366 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>366</LineStart>
<Snippet>                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {
                _ps = _connection.prepareStatement(sql);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] (def) _ps=&quot; + _ps, module);
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>104</LineStart>
<Snippet>        persistMap.put(&quot;userLogin&quot;, userLogin);
        try {
            Map&lt;String, Object&gt; persistResult = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, persistMap);
            contentId = (String)persistResult.get(&quot;contentId&quot;);
            //request.setAttribute(&quot;contentId&quot;, contentId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="4504144FF6AE6AA81E27F73ED01771D8">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>LoginWorker.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/LoginWorker.java</FilePath>
<LineStart>417</LineStart>
<Snippet>                Map&lt;String, Object&gt; resultPasswordChange = null;
                try {
                    resultPasswordChange = dispatcher.runSync(&quot;updatePassword&quot;, inMap);
                } catch (GenericServiceException e) {
                    Debug.logError(e, &quot;Error calling updatePassword service&quot;, module);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="9380464BAF16EBEE5687B7862D4A808D">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>564</LineStart>
<Snippet>        session.setAttribute(&quot;_CLIENT_REMOTE_ADDR_&quot;, request.getRemoteAddr());
        session.setAttribute(&quot;_CLIENT_REMOTE_HOST_&quot;, request.getRemoteHost());
        session.setAttribute(&quot;_CLIENT_REMOTE_USER_&quot;, request.getRemoteUser());
    }
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="0ABB1A803B35FC4F202BBB4EE7222B19">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ShipmentEvents.java</FileName>
<FilePath>applications/product/src/org/ofbiz/shipment/shipment/ShipmentEvents.java</FilePath>
<LineStart>50</LineStart>
<Snippet>        String shipmentId = request.getParameter(&quot;shipmentId&quot;);
        String shipmentRouteSegmentId = request.getParameter(&quot;shipmentRouteSegmentId&quot;);
        String shipmentPackageSeqId = request.getParameter(&quot;shipmentPackageSeqId&quot;);

        GenericValue shipmentPackageRouteSeg = null;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="83088A5A572EEAF4680C2CEB0E2CD011">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>UrlServletHelper.java</FileName>
<FilePath>framework/common/src/org/ofbiz/common/UrlServletHelper.java</FilePath>
<LineStart>128</LineStart>
<Snippet>        }
        if (UtilValidate.isNotEmpty(httpRequest.getParameter(&quot;viewSort&quot;))) {
            viewSort = httpRequest.getParameter(&quot;viewSort&quot;);
        }
        if (UtilValidate.isNotEmpty(httpRequest.getParameter(&quot;searchString&quot;))) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="F762619CFF80A8354101CBBCD90334CF">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2044 of DatabaseUtil.java, the method repairColumnSize() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2044</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            int changed = stmt.executeUpdate(sql1);
            if (Debug.infoOn()) Debug.logInfo(&quot;[moveData] &quot; + changed + &quot; records updated&quot;, module);
        } catch (SQLException e) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>575</LineStart>
<Snippet>        while (e.hasMoreElements()) {
            String name = e.nextElement();
            request.setAttribute(name, request.getParameter(name));
        }
    }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="63274B65E581D622F5393A56A223ECD9">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>LayoutEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/layout/LayoutEvents.java</FilePath>
<LineStart>114</LineStart>
<Snippet>            }

            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, context);
            //Debug.logVerbose(&quot;in createLayoutImage, result:&quot; + result, module);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="C5087F69F04A0A28666D596221A28CB6">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>CommonEvents.java</FileName>
<FilePath>framework/common/src/org/ofbiz/common/CommonEvents.java</FilePath>
<LineStart>163</LineStart>
<Snippet>        Security security = (Security) request.getAttribute(&quot;security&quot;);
        GenericValue userLogin = (GenericValue) request.getSession().getAttribute(&quot;userLogin&quot;);
        String visitId = request.getParameter(&quot;visitId&quot;);
        if (visitId != null) request.setAttribute(&quot;visitId&quot;, visitId);
        if (security.hasPermission(&quot;SEND_CONTROL_APPLET&quot;, userLogin)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="AD53CBB6E926653EC8E96DBD7069A866">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CmsEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/cms/CmsEvents.java</FilePath>
<LineStart>107</LineStart>
<Snippet>            pathInfo = overrideViewUri;
        } else {
            pathInfo = request.getPathInfo();
            if (targetRequest.equals(actualRequest) &amp;&amp; pathInfo != null) {
                // was called directly -- path info is everything after the request</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="4CD63B8CFE9BDFC5EFF9F61EF5583C7E">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>LoginWorker.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/LoginWorker.java</FilePath>
<LineStart>397</LineStart>
<Snippet>            // get the visit id to pass to the userLogin for history
            String visitId = VisitHandler.getVisitId(session);
            result = dispatcher.runSync(&quot;userLogin&quot;, UtilMisc.toMap(&quot;login.username&quot;, username, &quot;login.password&quot;, password, &quot;visitId&quot;, visitId, &quot;locale&quot;, UtilHttp.getLocale(request)));
        } catch (GenericServiceException e) {
            Debug.logError(e, &quot;Error calling userLogin service&quot;, module);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="61EE5CA97A5118E8751DF2C74D092B0C">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1469</LineStart>
<Snippet>        String quoteId = null;
        try {
            result = dispatcher.runSync(&quot;createQuoteFromCart&quot;,
                    UtilMisc.toMap(&quot;cart&quot;, cart,
                            &quot;userLogin&quot;, userLogin));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="128C3DD3B16DFB826BEB6908A546DECA">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>234</LineStart>
<Snippet>
    public static Map&lt;String, Object&gt; getUrlOnlyParameterMap(HttpServletRequest request) {
        return getUrlOnlyParameterMap(request.getQueryString(), request.getPathInfo());
    }
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="2C520CCEE0545FE31691122CEC8558F9">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>559</LineStart>
<Snippet>        session.setAttribute(&quot;_CLIENT_REQUEST_&quot;, fullRequestUrl.toString());
        session.setAttribute(&quot;_CLIENT_USER_AGENT_&quot;, request.getHeader(&quot;User-Agent&quot;) != null ? request.getHeader(&quot;User-Agent&quot;) : &quot;&quot;);
        session.setAttribute(&quot;_CLIENT_REFERER_&quot;, request.getHeader(&quot;Referer&quot;) != null ? request.getHeader(&quot;Referer&quot;) : &quot;&quot;);

        session.setAttribute(&quot;_CLIENT_FORWARDED_FOR_&quot;, request.getHeader(&quot;X-Forwarded-For&quot;));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="9380464BAF16EBEE5687B7862D4A808E">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>564</LineStart>
<Snippet>        session.setAttribute(&quot;_CLIENT_REMOTE_ADDR_&quot;, request.getRemoteAddr());
        session.setAttribute(&quot;_CLIENT_REMOTE_HOST_&quot;, request.getRemoteHost());
        session.setAttribute(&quot;_CLIENT_REMOTE_USER_&quot;, request.getRemoteUser());
    }
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="56749B651E0EA16C16F030F9B72DA98D">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CoreEvents.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/CoreEvents.java</FilePath>
<LineStart>412</LineStart>
<Snippet>        try {
            if (null!=request.getParameter(&quot;_RUN_SYNC_&quot;) &amp;&amp; request.getParameter(&quot;_RUN_SYNC_&quot;).equals(&quot;Y&quot;)) {
                syncServiceResult = dispatcher.runSync(serviceName, serviceContext);
            } else {
                dispatcher.schedule(jobName, poolName, serviceName, serviceContext, startTime, frequency, interval, count, endTime, maxRetry);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="E8D84D5DB2E7CF216DC7296BC0D79200">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>GenericWebEvent.java</FileName>
<FilePath>framework/webtools/src/org/ofbiz/webtools/GenericWebEvent.java</FilePath>
<LineStart>135</LineStart>
<Snippet>            }

            String fval = request.getParameter(field.getName());
            if (UtilValidate.isNotEmpty(fval)) {
                try {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="6078E43F31130B274B523BED60272603">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2826 of DatabaseUtil.java, the method deleteDeclaredIndex() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2826</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(deleteIndexSql);
        } catch (SQLException e) {
            return &quot;SQL Exception while executing the following:\n&quot; + deleteIndexSql + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceEventHandler.java</FilePath>
<LineStart>337</LineStart>
<Snippet>                dispatcher.runAsync(serviceName, serviceContext);
            } else {
                result = dispatcher.runSync(serviceName, serviceContext);
            }
        } catch (ServiceAuthException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="E8D5A652E7C2F3D39FB256063D9AC8DA">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 363 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>363</LineStart>
<Snippet>            _ind = 1;
            if (specifyTypeAndConcur) {
                _ps = _connection.prepareStatement(sql, resultSetType, resultSetConcurrency);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {</Snippet>
                            </Primary>
                            <Source>
<FileName>TrackingCodeEvents.java</FileName>
<FilePath>applications/marketing/src/org/ofbiz/marketing/tracking/TrackingCodeEvents.java</FilePath>
<LineStart>93</LineStart>
<Snippet>     */
    public static String checkPartnerTrackingCodeUrlParam(HttpServletRequest request, HttpServletResponse response) {
        String trackingCodeId = request.getParameter(&quot;ptc&quot;);

        if (UtilValidate.isNotEmpty(trackingCodeId)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="CB8921EB6C4CF5F48E72534CA7657E80">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>OrderManagerEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/OrderManagerEvents.java</FilePath>
<LineStart>222</LineStart>
<Snippet>                    Map&lt;String, Object&gt; results = null;
                    try {
                        results = dispatcher.runSync(&quot;createPaymentFromPreference&quot;, UtilMisc.toMap(&quot;userLogin&quot;, userLogin,
                                &quot;orderPaymentPreferenceId&quot;, paymentPreference.get(&quot;orderPaymentPreferenceId&quot;), &quot;paymentRefNum&quot;, paymentReference,
                                &quot;paymentFromId&quot;, placingCustomer.getString(&quot;partyId&quot;), &quot;comments&quot;, &quot;Payment received offline and manually entered.&quot;));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="6C237EFE0CE6E3EF5BDB3B674B8CFE2F">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 363 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>363</LineStart>
<Snippet>            _ind = 1;
            if (specifyTypeAndConcur) {
                _ps = _connection.prepareStatement(sql, resultSetType, resultSetConcurrency);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>184</LineStart>
<Snippet>
    public static Map&lt;String, Object&gt; getPathInfoOnlyParameterMap(HttpServletRequest request, Set&lt;? extends String&gt; nameSet, Boolean onlyIncludeOrSkip) {
        return getPathInfoOnlyParameterMap(request.getPathInfo(), nameSet, onlyIncludeOrSkip);
    }
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="0ABB1A803B35FC4F202BBB4EE7222B1A">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ShipmentEvents.java</FileName>
<FilePath>applications/product/src/org/ofbiz/shipment/shipment/ShipmentEvents.java</FilePath>
<LineStart>50</LineStart>
<Snippet>        String shipmentId = request.getParameter(&quot;shipmentId&quot;);
        String shipmentRouteSegmentId = request.getParameter(&quot;shipmentRouteSegmentId&quot;);
        String shipmentPackageSeqId = request.getParameter(&quot;shipmentPackageSeqId&quot;);

        GenericValue shipmentPackageRouteSeg = null;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="63A0E305567F5F69A6016A07D362F632">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingListEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppinglist/ShoppingListEvents.java</FilePath>
<LineStart>349</LineStart>
<Snippet>        Map&lt;String, Object&gt; result = null;
        try {
            result = dispatcher.runSync(&quot;updateShoppingListItem&quot;, serviceInMap);
        } catch (GenericServiceException e) {
            String errMsg = UtilProperties.getMessage(resource_error,&quot;shoppingListEvents.error_calling_update&quot;, locale) + &quot;: &quot;  + e.toString();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="489B28A645A98061A525533370B22815">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2699 of DatabaseUtil.java, the method createDeclaredIndex() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2699</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(createIndexSql);
        } catch (SQLException e) {
            return &quot;SQL Exception while executing the following:\n&quot; + createIndexSql + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>119</LineStart>
<Snippet>            contentRevisionMap.put(&quot;contentId&quot;, contentId);
            contentRevisionMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentRevisionAndItem&quot;, contentRevisionMap);
            keySet = result.keySet();
            iter = keySet.iterator();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="9BBA8E81999464B50FF3C8BAEFA332BE">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UrlServletHelper.java</FileName>
<FilePath>framework/common/src/org/ofbiz/common/UrlServletHelper.java</FilePath>
<LineStart>128</LineStart>
<Snippet>        }
        if (UtilValidate.isNotEmpty(httpRequest.getParameter(&quot;viewSort&quot;))) {
            viewSort = httpRequest.getParameter(&quot;viewSort&quot;);
        }
        if (UtilValidate.isNotEmpty(httpRequest.getParameter(&quot;searchString&quot;))) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="6F1E83A9BB4934E8C497695D5B5E7E23">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilObject.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilObject.java</FilePath>
<LineStart>137</LineStart>
<Snippet>                ObjectInputStream ois = new ObjectInputStream(bis, Thread.currentThread().getContextClassLoader());
                try {
                    obj = ois.readObject();
                } catch (ClassNotFoundException e) {
                    Debug.logError(e, module);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="F3A2080DFA4FAA7EC33A6FF57736F8AF">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>183</LineStart>
<Snippet>        Map&lt;String, Object&gt; results = null;
        try {
            results = dispatcher.runSync(&quot;renderCompDocPdf&quot;, mapIn);
        } catch (ServiceAuthException e) {
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, e.toString());</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="507485D9C7D0AD91A8C94DBCFDCCF2F4">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 363 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>363</LineStart>
<Snippet>            _ind = 1;
            if (specifyTypeAndConcur) {
                _ps = _connection.prepareStatement(sql, resultSetType, resultSetConcurrency);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>348</LineStart>
<Snippet>        }
        String frameContentId = request.getParameter(&quot;frameContentId&quot;);
        String frameDataResourceId = request.getParameter(&quot;frameDataResourceId&quot;);
        
        if (UtilValidate.isEmpty(request.getParameter(&quot;imageWidth&quot;)) || UtilValidate.isEmpty(request.getParameter(&quot;imageHeight&quot;))) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="1C8FCB68247D8866BFE428A6ACEF72C0">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>150</LineStart>
<Snippet>            String contentAssocTypeId = (String)passedParams.get(&quot;contentAssocTypeId&quot;);
            ftlContext.put(&quot;contentAssocTypeId&quot;, null); // Don't post assoc at this time
            Map&lt;String, Object&gt; ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
            boolean isError = ModelService.RESPOND_ERROR.equals(ftlResults.get(ModelService.RESPONSE_MESSAGE));
            if (isError) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="90F1713D7427DA0C64438D503FEC1E10">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ProductEvents.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/product/ProductEvents.java</FilePath>
<LineStart>804</LineStart>
<Snippet>        //Timestamp nowTimestamp = UtilDateTime.nowTimestamp();
        //GenericValue userLogin = (GenericValue) request.getSession().getAttribute(&quot;userLogin&quot;);
        String productId = request.getParameter(&quot;productId&quot;);
        String productFeatureId = request.getParameter(&quot;productFeatureId&quot;);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="53308EBFB1E59FE26238F7E6BC40C1DE">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2443 of DatabaseUtil.java, the method deleteForeignKey() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2443</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(sqlBuf.toString());
        } catch (SQLException e) {
            return &quot;SQL Exception while executing the following:\n&quot; + sqlBuf.toString() + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceEventHandler.java</FilePath>
<LineStart>337</LineStart>
<Snippet>                dispatcher.runAsync(serviceName, serviceContext);
            } else {
                result = dispatcher.runSync(serviceName, serviceContext);
            }
        } catch (ServiceAuthException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="7058D668017891AA09B0EC83797CBD43">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>GoogleBaseSearchEvents.java</FileName>
<FilePath>specialpurpose/googlebase/src/org/ofbiz/googlebase/GoogleBaseSearchEvents.java</FilePath>
<LineStart>122</LineStart>
<Snippet>                    inMap.put(&quot;productStoreId&quot;, productStoreId);
                    inMap.put(&quot;allowRecommended&quot;, allowRecommended);
                    Map&lt;String, Object&gt; exportResult = dispatcher.runSync(&quot;exportToGoogle&quot;, inMap);
                    if (ServiceUtil.isError(exportResult)) {
                        List&lt;String&gt; errorMessages = UtilGenerics.checkList(exportResult.get(ModelService.ERROR_MESSAGE_LIST), String.class);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="BA474CE1C3DD0998BE9C4533516EE9B7">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>GlEvents.java</FileName>
<FilePath>applications/accounting/src/org/ofbiz/accounting/GlEvents.java</FilePath>
<LineStart>86</LineStart>
<Snippet>    Map&lt;String, Object&gt; glReconResult = null;
    try {
        glReconResult = dispatcher.runSync(&quot;createGlReconciliation&quot;, fieldMap); //create GlReconciliation for the glAccountId
        if (ServiceUtil.isError(glReconResult)) {
            return &quot;error&quot;;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="949C57EE208B457D6E9315FD5E77E54E">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 366 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>366</LineStart>
<Snippet>                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {
                _ps = _connection.prepareStatement(sql);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] (def) _ps=&quot; + _ps, module);
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1354</LineStart>
<Snippet>        ShoppingCart cart = null;
        try {
            Map&lt;String, Object&gt; outMap = dispatcher.runSync(&quot;loadCartFromQuote&quot;,
                    UtilMisc.&lt;String, Object&gt;toMap(&quot;quoteId&quot;, quoteId,
                            &quot;applyQuoteAdjustments&quot;, &quot;true&quot;,</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="493C926253850B5856CCB2BD86BB6420">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>592</LineStart>
<Snippet>        requestUrl.append(request.getRequestURI());
        if (request.getQueryString() != null) {
            requestUrl.append(&quot;?&quot; + request.getQueryString());
        }
        return requestUrl;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="4033D2119BFA9C72646A72DA5E26F36C">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>561</LineStart>
<Snippet>        session.setAttribute(&quot;_CLIENT_REFERER_&quot;, request.getHeader(&quot;Referer&quot;) != null ? request.getHeader(&quot;Referer&quot;) : &quot;&quot;);

        session.setAttribute(&quot;_CLIENT_FORWARDED_FOR_&quot;, request.getHeader(&quot;X-Forwarded-For&quot;));
        session.setAttribute(&quot;_CLIENT_REMOTE_ADDR_&quot;, request.getRemoteAddr());
        session.setAttribute(&quot;_CLIENT_REMOTE_HOST_&quot;, request.getRemoteHost());</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="C830D515A0147B5E9ADD2951BF4FED24">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>LoginWorker.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/LoginWorker.java</FilePath>
<LineStart>417</LineStart>
<Snippet>                Map&lt;String, Object&gt; resultPasswordChange = null;
                try {
                    resultPasswordChange = dispatcher.runSync(&quot;updatePassword&quot;, inMap);
                } catch (GenericServiceException e) {
                    Debug.logError(e, &quot;Error calling updatePassword service&quot;, module);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="968F14825A8EC471306A3984D1DF6B69">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>267</LineStart>
<Snippet>        }
        if (!&quot;image/png&quot;.equals(mimType)) {
            session.setAttribute(&quot;frameContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
            session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;The selected image type is incorrect, please select the image type *.PNG to upload.&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="44F386CAC199951222E9DBA471B56497">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>SearchEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/search/SearchEvents.java</FilePath>
<LineStart>60</LineStart>
<Snippet>        serviceInMap.put(&quot;contentId&quot;, siteId);
        try {
            result = dispatcher.runSync(&quot;indexTree&quot;, serviceInMap);
        } catch (GenericServiceException e) {
            String errorMsg = &quot;Error calling the indexTree service.&quot; + e.toString();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="D7515DBE5CCA341AF3881BE57461CDC9">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>WebShoppingCart.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/WebShoppingCart.java</FilePath>
<LineStart>48</LineStart>
<Snippet>                WebSiteWorker.getWebSiteId(request), (locale != null ? locale : ProductStoreWorker.getStoreLocale(request)),
                (currencyUom != null ? currencyUom : ProductStoreWorker.getStoreCurrencyUomId(request)),
                request.getParameter(&quot;billToCustomerPartyId&quot;),
                (request.getParameter(&quot;supplierPartyId&quot;) != null ? request.getParameter(&quot;supplierPartyId&quot;) : request.getParameter(&quot;billFromVendorPartyId&quot;)));
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="07C35A45AF0BE513C921449428F88595">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ICalWorker.java</FileName>
<FilePath>applications/workeffort/src/org/ofbiz/workeffort/workeffort/ICalWorker.java</FilePath>
<LineStart>305</LineStart>
<Snippet>
    protected static void setupRequest(HttpServletRequest request, HttpServletResponse response) {
        String path = request.getPathInfo();
        if (UtilValidate.isEmpty(path)) {
            path = &quot;/&quot;;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="F2362B19B78E2BC09A798DF377546743">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>OrderManagerEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/OrderManagerEvents.java</FilePath>
<LineStart>98</LineStart>
<Snippet>                    Map&lt;String, Object&gt; results = null;
                    try {
                        results = dispatcher.runSync(&quot;createPaymentFromPreference&quot;, UtilMisc.toMap(&quot;orderPaymentPreferenceId&quot;, ppref.get(&quot;orderPaymentPreferenceId&quot;),
                                &quot;paymentFromId&quot;, placingCustomer.getString(&quot;partyId&quot;), &quot;comments&quot;, &quot;Payment received offline and manually entered.&quot;));
                    } catch (GenericServiceException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="11B9EBCFEA8FF301AE7A56884EDD05C7">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>268</LineStart>
<Snippet>        if (!&quot;image/png&quot;.equals(mimType)) {
            session.setAttribute(&quot;frameContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
            session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;The selected image type is incorrect, please select the image type *.PNG to upload.&quot;);
            return &quot;error&quot;;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="084B7FDEA7EDF6713DDF32FFA0139BAC">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>SearchEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/search/SearchEvents.java</FilePath>
<LineStart>60</LineStart>
<Snippet>        serviceInMap.put(&quot;contentId&quot;, siteId);
        try {
            result = dispatcher.runSync(&quot;indexTree&quot;, serviceInMap);
        } catch (GenericServiceException e) {
            String errorMsg = &quot;Error calling the indexTree service.&quot; + e.toString();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="562CB3AADB601B296E4F2FF7DCFA792E">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>EbayEvents.java</FileName>
<FilePath>specialpurpose/ebaystore/src/org/ofbiz/ebaystore/EbayEvents.java</FilePath>
<LineStart>280</LineStart>
<Snippet>                String siteCode = apiContext.getSite().name();
                if (UtilValidate.isNotEmpty(session.getAttribute(&quot;itemListings_&quot;.concat(siteCode)))) {
                    request.setAttribute(&quot;productStoreId&quot;, request.getParameter(&quot;productStoreId&quot;));
                    return &quot;prepare&quot;;
                }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="BF445C963C1F2F11409EA27A0350370A">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ProductionRunEvents.java</FileName>
<FilePath>applications/manufacturing/src/org/ofbiz/manufacturing/jobshopmgt/ProductionRunEvents.java</FilePath>
<LineStart>94</LineStart>
<Snippet>            inputMap.put(&quot;lotId&quot;, parameters.get(&quot;lotId&quot;));
            inputMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;productionRunDeclareAndProduce&quot;, inputMap);
            if (ServiceUtil.isError(result)) {
                request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, ServiceUtil.getErrorMessage(result));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="ECC9195E8CB5322C2E997AACBA18AF98">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>257</LineStart>
<Snippet>        Map&lt;String, Object&gt; results = null;
        try {
            results = dispatcher.runSync(&quot;renderContentPdf&quot;, mapIn);
        } catch (ServiceAuthException e) {
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, e.toString());</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="26EA01EEB4FCD40218E47BDC37920EB7">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>234</LineStart>
<Snippet>
    public static Map&lt;String, Object&gt; getUrlOnlyParameterMap(HttpServletRequest request) {
        return getUrlOnlyParameterMap(request.getQueryString(), request.getPathInfo());
    }
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="FE79E24F630F0AAA7B9CCB5C9D71CAB5">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>620</LineStart>
<Snippet>        // finally request (w/ a fall back to default)
        if (localeObject == null) {
            localeObject = request != null ? request.getLocale() : null;
        }
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="16E81995DCB83C5B5866A8F01D57183A">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 363 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>363</LineStart>
<Snippet>            _ind = 1;
            if (specifyTypeAndConcur) {
                _ps = _connection.prepareStatement(sql, resultSetType, resultSetConcurrency);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {</Snippet>
                            </Primary>
                            <Source>
<FileName>AbstractOFBizAuthenticationHandler.java</FileName>
<FilePath>specialpurpose/ldap/src/org/ofbiz/ldap/commons/AbstractOFBizAuthenticationHandler.java</FilePath>
<LineStart>129</LineStart>
<Snippet>
        try {
            loginResult = dispatcher.runSync(&quot;userLogin&quot;, UtilMisc.toMap(&quot;login.username&quot;, username, &quot;login.password&quot;, password, &quot;visitId&quot;, visitId, &quot;locale&quot;, UtilHttp.getLocale(request)));
        } catch (GenericServiceException e) {
            throw new GenericServiceException(e.getLocalizedMessage());</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="693AD5866A0BE2886C41E8C17D6F9918">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>119</LineStart>
<Snippet>            contentRevisionMap.put(&quot;contentId&quot;, contentId);
            contentRevisionMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentRevisionAndItem&quot;, contentRevisionMap);
            keySet = result.keySet();
            iter = keySet.iterator();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="3AD1FD3EEFB6287849865E26E04CF8A6">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>267</LineStart>
<Snippet>        }
        if (!&quot;image/png&quot;.equals(mimType)) {
            session.setAttribute(&quot;frameContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
            session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;The selected image type is incorrect, please select the image type *.PNG to upload.&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="4C56684143E12B46BF8F5C9649171D04">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>TrackingCodeEvents.java</FileName>
<FilePath>applications/marketing/src/org/ofbiz/marketing/tracking/TrackingCodeEvents.java</FilePath>
<LineStart>374</LineStart>
<Snippet>        if (UtilValidate.isEmpty(trackingCodeId)) trackingCodeId = request.getParameter(&quot;atc&quot;);
        if (UtilValidate.isEmpty(trackingCodeId)) {
            Cookie[] cookies = request.getCookies();
            if (cookies != null) {
                for (Cookie cookie : cookies) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="DAEF61C0D3720DEC13F3FDF5F0737AA5">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1469</LineStart>
<Snippet>        String quoteId = null;
        try {
            result = dispatcher.runSync(&quot;createQuoteFromCart&quot;,
                    UtilMisc.toMap(&quot;cart&quot;, cart,
                            &quot;userLogin&quot;, userLogin));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="B93D947F9A31F03EC75FDC22EF249AF9">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 366 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>366</LineStart>
<Snippet>                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {
                _ps = _connection.prepareStatement(sql);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] (def) _ps=&quot; + _ps, module);
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>347</LineStart>
<Snippet>            return &quot;error&quot;;
        }
        String frameContentId = request.getParameter(&quot;frameContentId&quot;);
        String frameDataResourceId = request.getParameter(&quot;frameDataResourceId&quot;);
        </Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="F2AEE4203867FECB4C8281E6CCB409B9">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>693</LineStart>
<Snippet>            return &quot;error&quot;;
        }
        String orderId = request.getParameter(&quot;orderId_o_0&quot;);
        // set the order id if supplied
        if (UtilValidate.isNotEmpty(orderId)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="199CBB4B090E55574B26FB4B80DE3455">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>403</LineStart>
<Snippet>            if (UtilValidate.isNotEmpty(request.getParameter(&quot;frameExistContentId&quot;)) &amp;&amp; UtilValidate.isNotEmpty(request.getParameter(&quot;frameExistDataResourceId&quot;))) {
                session.setAttribute(&quot;frameExistContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
                session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            }
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;Required frame image content ID&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="2D6102EF7B2969B5B03D6D9B1729970F">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2044 of DatabaseUtil.java, the method repairColumnSize() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2044</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            int changed = stmt.executeUpdate(sql1);
            if (Debug.infoOn()) Debug.logInfo(&quot;[moveData] &quot; + changed + &quot; records updated&quot;, module);
        } catch (SQLException e) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilObject.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilObject.java</FilePath>
<LineStart>137</LineStart>
<Snippet>                ObjectInputStream ois = new ObjectInputStream(bis, Thread.currentThread().getContextClassLoader());
                try {
                    obj = ois.readObject();
                } catch (ClassNotFoundException e) {
                    Debug.logError(e, module);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="AC6D70E306CF7D5056D88BD402B449C5">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>TrackingCodeEvents.java</FileName>
<FilePath>applications/marketing/src/org/ofbiz/marketing/tracking/TrackingCodeEvents.java</FilePath>
<LineStart>372</LineStart>
<Snippet>
        String trackingCodeId = request.getParameter(&quot;autoTrackingCode&quot;);
        if (UtilValidate.isEmpty(trackingCodeId)) trackingCodeId = request.getParameter(&quot;atc&quot;);
        if (UtilValidate.isEmpty(trackingCodeId)) {
            Cookie[] cookies = request.getCookies();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="550DA3C231E58FEDC75CACEBAA7920DF">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceEventHandler.java</FilePath>
<LineStart>337</LineStart>
<Snippet>                dispatcher.runAsync(serviceName, serviceContext);
            } else {
                result = dispatcher.runSync(serviceName, serviceContext);
            }
        } catch (ServiceAuthException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="DC586610461CB0AFF075A7FFD6485C38">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>688</LineStart>
<Snippet>        
        // TODO: the code below here needs some cleanups
        String billToCustomerPartyId = request.getParameter(&quot;billToCustomerPartyId_o_0&quot;);
        if (UtilValidate.isEmpty(billToCustomerPartyId) &amp;&amp; UtilValidate.isEmpty(supplierPartyId)) {
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, UtilProperties.getMessage(resource_error, &quot;OrderCouldNotInitPurchaseOrder&quot;, locale));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="743F5D587411CC9F9DDA8A6125CD04D2">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>WebShoppingCart.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/WebShoppingCart.java</FilePath>
<LineStart>49</LineStart>
<Snippet>                (currencyUom != null ? currencyUom : ProductStoreWorker.getStoreCurrencyUomId(request)),
                request.getParameter(&quot;billToCustomerPartyId&quot;),
                (request.getParameter(&quot;supplierPartyId&quot;) != null ? request.getParameter(&quot;supplierPartyId&quot;) : request.getParameter(&quot;billFromVendorPartyId&quot;)));

        HttpSession session = request.getSession(true);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="099F1F4FB89AA66790DFAB2CC58E24D6">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>945</LineStart>
<Snippet>            newCart = cartList.remove(cartIndex);
        } else {
            String productStoreId = request.getParameter(&quot;productStoreId&quot;);
            if (UtilValidate.isNotEmpty(productStoreId)) {
                session.setAttribute(&quot;productStoreId&quot;, productStoreId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="4F66F86D609916418851142D183D0F4E">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2044 of DatabaseUtil.java, the method repairColumnSize() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2044</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            int changed = stmt.executeUpdate(sql1);
            if (Debug.infoOn()) Debug.logInfo(&quot;[moveData] &quot; + changed + &quot; records updated&quot;, module);
        } catch (SQLException e) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>505</LineStart>
<Snippet>        Map&lt;String, Object&gt; ftlResults = null;
        try {
            ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
        } catch (ServiceAuthException e) {
            String msg = e.getMessage();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="F41DF895073DE4E6B89D88EF179D23C9">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>505</LineStart>
<Snippet>        Map&lt;String, Object&gt; ftlResults = null;
        try {
            ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
        } catch (ServiceAuthException e) {
            String msg = e.getMessage();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="B68B6CDA9B00E510F7202DA13AD7E426">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 1922 of DatabaseUtil.java, the method addColumn() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>1922</LineStart>
<Snippet>            try {
                stmt = connection.createStatement();
                stmt.executeUpdate(sql2);
            } catch (SQLException e2) {
                // if this also fails report original error, not this error...</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceMultiEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceMultiEventHandler.java</FilePath>
<LineStart>308</LineStart>
<Snippet>                Map&lt;String, Object&gt; result = null;
                try {
                    result = dispatcher.runSync(serviceName, serviceContext);
                } catch (ServiceAuthException e) {
                    // not logging since the service engine already did</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="625D95B90E1D7B4DA752F9120CB63B0F">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>312</LineStart>
<Snippet>            contentCtx.put(&quot;fromDate&quot;, UtilDateTime.nowTimestamp());
            contentCtx.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; contentResult = dispatcher.runSync(&quot;createContent&quot;, contentCtx);
            contentId = contentResult.get(&quot;contentId&quot;).toString();
        } catch (Exception e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="93D5FC9E592B9BF3CC70E52E821EF361">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2443 of DatabaseUtil.java, the method deleteForeignKey() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2443</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(sqlBuf.toString());
        } catch (SQLException e) {
            return &quot;SQL Exception while executing the following:\n&quot; + sqlBuf.toString() + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>CoreEvents.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/CoreEvents.java</FilePath>
<LineStart>412</LineStart>
<Snippet>        try {
            if (null!=request.getParameter(&quot;_RUN_SYNC_&quot;) &amp;&amp; request.getParameter(&quot;_RUN_SYNC_&quot;).equals(&quot;Y&quot;)) {
                syncServiceResult = dispatcher.runSync(serviceName, serviceContext);
            } else {
                dispatcher.schedule(jobName, poolName, serviceName, serviceContext, startTime, frequency, interval, count, endTime, maxRetry);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="27B15DBE87F6524164F30B67DF911622">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>150</LineStart>
<Snippet>            String contentAssocTypeId = (String)passedParams.get(&quot;contentAssocTypeId&quot;);
            ftlContext.put(&quot;contentAssocTypeId&quot;, null); // Don't post assoc at this time
            Map&lt;String, Object&gt; ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
            boolean isError = ModelService.RESPOND_ERROR.equals(ftlResults.get(ModelService.RESPONSE_MESSAGE));
            if (isError) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="955918FCA04D75853D48EA3CFFD16EE5">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1535</LineStart>
<Snippet>
        // TODO: re-factor and move this inside the ShoppingCart constructor
        String orderMode = request.getParameter(&quot;orderMode&quot;);
        if (orderMode != null) {
            cart.setOrderType(orderMode);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="D43C3B588550B09C0F73C5A96485047F">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>LoginEvents.java</FileName>
<FilePath>applications/securityext/src/org/ofbiz/securityext/login/LoginEvents.java</FilePath>
<LineStart>77</LineStart>
<Snippet>
            String username = request.getParameter(&quot;USERNAME&quot;);
            String password = request.getParameter(&quot;PASSWORD&quot;);

            if ((username != null) &amp;&amp; (&quot;true&quot;.equalsIgnoreCase(UtilProperties.getPropertyValue(&quot;security.properties&quot;, &quot;username.lowercase&quot;)))) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="508A1232D31AE211C262828A9E1EEBCB">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>119</LineStart>
<Snippet>            contentRevisionMap.put(&quot;contentId&quot;, contentId);
            contentRevisionMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentRevisionAndItem&quot;, contentRevisionMap);
            keySet = result.keySet();
            iter = keySet.iterator();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="5D6EE5A5A3CDBE7F119BE1B91EEC45BA">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 363 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>363</LineStart>
<Snippet>            _ind = 1;
            if (specifyTypeAndConcur) {
                _ps = _connection.prepareStatement(sql, resultSetType, resultSetConcurrency);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {</Snippet>
                            </Primary>
                            <Source>
<FileName>LoginEvents.java</FileName>
<FilePath>applications/securityext/src/org/ofbiz/securityext/login/LoginEvents.java</FilePath>
<LineStart>77</LineStart>
<Snippet>
            String username = request.getParameter(&quot;USERNAME&quot;);
            String password = request.getParameter(&quot;PASSWORD&quot;);

            if ((username != null) &amp;&amp; (&quot;true&quot;.equalsIgnoreCase(UtilProperties.getPropertyValue(&quot;security.properties&quot;, &quot;username.lowercase&quot;)))) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="6EFEBA5B6A5250BE3EB9892DA2FECE75">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2609 of DatabaseUtil.java, the method deletePrimaryKey() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2609</LineStart>
<Snippet>            try {
                stmt = connection.createStatement();
                stmt.executeUpdate(sqlBuf.toString());
            } catch (SQLException e) {
                String errMsg = &quot;SQL Exception while executing the following:\n&quot; + sqlBuf.toString() + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceMultiEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceMultiEventHandler.java</FilePath>
<LineStart>308</LineStart>
<Snippet>                Map&lt;String, Object&gt; result = null;
                try {
                    result = dispatcher.runSync(serviceName, serviceContext);
                } catch (ServiceAuthException e) {
                    // not logging since the service engine already did</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="DA744635D516597EC2E12A582A21FE37">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>CoreEvents.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/CoreEvents.java</FilePath>
<LineStart>516</LineStart>
<Snippet>    public static String runService(HttpServletRequest request, HttpServletResponse response) {
        // get the mode and service name
        String serviceName = request.getParameter(&quot;serviceName&quot;);
        String mode = request.getParameter(&quot;mode&quot;);
        Locale locale = UtilHttp.getLocale(request);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="D2B7F67395BBF5908BB9D6BD07C14DC2">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 366 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>366</LineStart>
<Snippet>                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {
                _ps = _connection.prepareStatement(sql);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] (def) _ps=&quot; + _ps, module);
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>268</LineStart>
<Snippet>        if (!&quot;image/png&quot;.equals(mimType)) {
            session.setAttribute(&quot;frameContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
            session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;The selected image type is incorrect, please select the image type *.PNG to upload.&quot;);
            return &quot;error&quot;;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="59DAA15D2BEB8941FF398C1F40C653DE">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1388</LineStart>
<Snippet>        ShoppingCart cart = null;
        try {
            Map&lt;String, Object&gt; outMap = dispatcher.runSync(&quot;loadCartFromOrder&quot;,
                                                UtilMisc.&lt;String, Object&gt;toMap(&quot;orderId&quot;, orderId,
                                                        &quot;skipProductChecks&quot;, Boolean.TRUE, // the products have already been checked in the order, no need to check their validity again</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="5AADAE0CA361F5BB90549CDEFB5AF965">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>RequestHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/RequestHandler.java</FilePath>
<LineStart>119</LineStart>
<Snippet>
        // Grab data from request object to process
        String defaultRequestUri = RequestHandler.getRequestUri(request.getPathInfo());
        if (request.getAttribute(&quot;targetRequestUri&quot;) == null) {
            if (request.getSession().getAttribute(&quot;_PREVIOUS_REQUEST_&quot;) != null) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="4FDDF0CB239B5489AD49E6129EBE6B3F">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>LoginEvents.java</FileName>
<FilePath>applications/securityext/src/org/ofbiz/securityext/login/LoginEvents.java</FilePath>
<LineStart>77</LineStart>
<Snippet>
            String username = request.getParameter(&quot;USERNAME&quot;);
            String password = request.getParameter(&quot;PASSWORD&quot;);

            if ((username != null) &amp;&amp; (&quot;true&quot;.equalsIgnoreCase(UtilProperties.getPropertyValue(&quot;security.properties&quot;, &quot;username.lowercase&quot;)))) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="7C4EBF386642115F9878AE38ADDB4160">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2609 of DatabaseUtil.java, the method deletePrimaryKey() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2609</LineStart>
<Snippet>            try {
                stmt = connection.createStatement();
                stmt.executeUpdate(sqlBuf.toString());
            } catch (SQLException e) {
                String errMsg = &quot;SQL Exception while executing the following:\n&quot; + sqlBuf.toString() + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>CoreEvents.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/CoreEvents.java</FilePath>
<LineStart>412</LineStart>
<Snippet>        try {
            if (null!=request.getParameter(&quot;_RUN_SYNC_&quot;) &amp;&amp; request.getParameter(&quot;_RUN_SYNC_&quot;).equals(&quot;Y&quot;)) {
                syncServiceResult = dispatcher.runSync(serviceName, serviceContext);
            } else {
                dispatcher.schedule(jobName, poolName, serviceName, serviceContext, startTime, frequency, interval, count, endTime, maxRetry);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="22E728FE7B0382A99C9180875EFE6EA2">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>UrlServletHelper.java</FileName>
<FilePath>framework/common/src/org/ofbiz/common/UrlServletHelper.java</FilePath>
<LineStart>131</LineStart>
<Snippet>        }
        if (UtilValidate.isNotEmpty(httpRequest.getParameter(&quot;searchString&quot;))) {
            searchString = httpRequest.getParameter(&quot;searchString&quot;);
        }
        </Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="7058D668017891AA09B0EC83797CBD42">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>GoogleBaseSearchEvents.java</FileName>
<FilePath>specialpurpose/googlebase/src/org/ofbiz/googlebase/GoogleBaseSearchEvents.java</FilePath>
<LineStart>122</LineStart>
<Snippet>                    inMap.put(&quot;productStoreId&quot;, productStoreId);
                    inMap.put(&quot;allowRecommended&quot;, allowRecommended);
                    Map&lt;String, Object&gt; exportResult = dispatcher.runSync(&quot;exportToGoogle&quot;, inMap);
                    if (ServiceUtil.isError(exportResult)) {
                        List&lt;String&gt; errorMessages = UtilGenerics.checkList(exportResult.get(ModelService.ERROR_MESSAGE_LIST), String.class);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="D638C6FDDCD5AB08C1DA27183ECEC2F3">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 366 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>366</LineStart>
<Snippet>                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {
                _ps = _connection.prepareStatement(sql);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] (def) _ps=&quot; + _ps, module);
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>620</LineStart>
<Snippet>        // finally request (w/ a fall back to default)
        if (localeObject == null) {
            localeObject = request != null ? request.getLocale() : null;
        }
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="37F5D5AE0858C16D862BD8838FE16A85">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2443 of DatabaseUtil.java, the method deleteForeignKey() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2443</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(sqlBuf.toString());
        } catch (SQLException e) {
            return &quot;SQL Exception while executing the following:\n&quot; + sqlBuf.toString() + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>104</LineStart>
<Snippet>        persistMap.put(&quot;userLogin&quot;, userLogin);
        try {
            Map&lt;String, Object&gt; persistResult = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, persistMap);
            contentId = (String)persistResult.get(&quot;contentId&quot;);
            //request.setAttribute(&quot;contentId&quot;, contentId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="2763FEC5838F0FD31918D1465970183F">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 366 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>366</LineStart>
<Snippet>                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {
                _ps = _connection.prepareStatement(sql);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] (def) _ps=&quot; + _ps, module);
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1388</LineStart>
<Snippet>        ShoppingCart cart = null;
        try {
            Map&lt;String, Object&gt; outMap = dispatcher.runSync(&quot;loadCartFromOrder&quot;,
                                                UtilMisc.&lt;String, Object&gt;toMap(&quot;orderId&quot;, orderId,
                                                        &quot;skipProductChecks&quot;, Boolean.TRUE, // the products have already been checked in the order, no need to check their validity again</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="551315D4DE0668A7C62FD6B456401CCD">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 3048 of DatabaseUtil.java, the method deleteForeignKeyIndex() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>3048</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(deleteIndexSql);
        } catch (SQLException e) {
            return &quot;SQL Exception while executing the following:\n&quot; + deleteIndexSql + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>104</LineStart>
<Snippet>        persistMap.put(&quot;userLogin&quot;, userLogin);
        try {
            Map&lt;String, Object&gt; persistResult = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, persistMap);
            contentId = (String)persistResult.get(&quot;contentId&quot;);
            //request.setAttribute(&quot;contentId&quot;, contentId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="625D95B90E1D7B4DA752F9120CB63B0E">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>312</LineStart>
<Snippet>            contentCtx.put(&quot;fromDate&quot;, UtilDateTime.nowTimestamp());
            contentCtx.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; contentResult = dispatcher.runSync(&quot;createContent&quot;, contentCtx);
            contentId = contentResult.get(&quot;contentId&quot;).toString();
        } catch (Exception e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="A5E4F1FA84C867E0E5F62B51CBBAF2DB">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CommonEvents.java</FileName>
<FilePath>framework/common/src/org/ofbiz/common/CommonEvents.java</FilePath>
<LineStart>141</LineStart>
<Snippet>        Security security = (Security) request.getAttribute(&quot;security&quot;);
        GenericValue userLogin = (GenericValue) request.getSession().getAttribute(&quot;userLogin&quot;);
        String visitId = request.getParameter(&quot;visitId&quot;);
        if (visitId != null) request.setAttribute(&quot;visitId&quot;, visitId);
        if (security.hasPermission(&quot;SEND_CONTROL_APPLET&quot;, userLogin)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="D7515DBE5CCA341AF3881BE57461CDCA">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>WebShoppingCart.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/WebShoppingCart.java</FilePath>
<LineStart>48</LineStart>
<Snippet>                WebSiteWorker.getWebSiteId(request), (locale != null ? locale : ProductStoreWorker.getStoreLocale(request)),
                (currencyUom != null ? currencyUom : ProductStoreWorker.getStoreCurrencyUomId(request)),
                request.getParameter(&quot;billToCustomerPartyId&quot;),
                (request.getParameter(&quot;supplierPartyId&quot;) != null ? request.getParameter(&quot;supplierPartyId&quot;) : request.getParameter(&quot;billFromVendorPartyId&quot;)));
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="C1530AB4665A75D4895C22DE9F14D829">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1994</LineStart>
<Snippet>                    appendOrderItemMap.put(&quot;shipGroupSeqId&quot;, shipGroupSeqId);
                    try {
                        Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;appendOrderItem&quot;, appendOrderItemMap);
                        request.setAttribute(&quot;shoppingCart&quot;, (ShoppingCart) result.get(&quot;shoppingCart&quot;));
                        ShoppingCartEvents.destroyCart(request, response);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="DF8050397E6FDFE80027D146444E1560">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>590</LineStart>
<Snippet>    public static StringBuffer getFullRequestUrl(HttpServletRequest request) {
        StringBuffer requestUrl = UtilHttp.getServerRootUrl(request);
        requestUrl.append(request.getRequestURI());
        if (request.getQueryString() != null) {
            requestUrl.append(&quot;?&quot; + request.getQueryString());</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="5BFE34F8F27F02DFE49AB3EB7F420749">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>TrackingCodeEvents.java</FileName>
<FilePath>applications/marketing/src/org/ofbiz/marketing/tracking/TrackingCodeEvents.java</FilePath>
<LineStart>371</LineStart>
<Snippet>        java.sql.Timestamp nowStamp = UtilDateTime.nowTimestamp();

        String trackingCodeId = request.getParameter(&quot;autoTrackingCode&quot;);
        if (UtilValidate.isEmpty(trackingCodeId)) trackingCodeId = request.getParameter(&quot;atc&quot;);
        if (UtilValidate.isEmpty(trackingCodeId)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="57D452FE2653EA60A5DE24BDCA9D8894">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>RomeEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/RomeEventHandler.java</FilePath>
<LineStart>70</LineStart>
<Snippet>        // generate the main and entry links
        String entryLinkReq = request.getParameter(&quot;entryLinkReq&quot;);
        String mainLinkReq = request.getParameter(&quot;mainLinkReq&quot;);

        // create the links; but the query string must be created by the service</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="6F1E83A9BB4934E8C497695D5B5E7E22">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilObject.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilObject.java</FilePath>
<LineStart>137</LineStart>
<Snippet>                ObjectInputStream ois = new ObjectInputStream(bis, Thread.currentThread().getContextClassLoader());
                try {
                    obj = ois.readObject();
                } catch (ClassNotFoundException e) {
                    Debug.logError(e, module);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="78F8993FAE3128DA480F47E7689DA03F">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>TrackingCodeEvents.java</FileName>
<FilePath>applications/marketing/src/org/ofbiz/marketing/tracking/TrackingCodeEvents.java</FilePath>
<LineStart>374</LineStart>
<Snippet>        if (UtilValidate.isEmpty(trackingCodeId)) trackingCodeId = request.getParameter(&quot;atc&quot;);
        if (UtilValidate.isEmpty(trackingCodeId)) {
            Cookie[] cookies = request.getCookies();
            if (cookies != null) {
                for (Cookie cookie : cookies) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="409D5F93578553B0C00525B2BF83E6DA">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>ContentManagementEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/ContentManagementEvents.java</FilePath>
<LineStart>288</LineStart>
<Snippet>                        serviceIn.put(&quot;targetOperationList&quot;, targetOperationList);
                        serviceIn.put(&quot;contentPurposeList&quot;, contentPurposeList);
                        results = dispatcher.runSync(&quot;createContentAssoc&quot;, serviceIn);
                        responseMessage = (String)results.get(ModelService.RESPONSE_MESSAGE);
                        if (UtilValidate.isNotEmpty(responseMessage)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="ACF25A66F78E37CFEBCBD2948B742C31">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 1985 of DatabaseUtil.java, the method renameColumn() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>1985</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(sql);
        } catch (SQLException e) {
            return &quot;SQL Exception while executing the following:\n&quot; + sql + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>104</LineStart>
<Snippet>        persistMap.put(&quot;userLogin&quot;, userLogin);
        try {
            Map&lt;String, Object&gt; persistResult = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, persistMap);
            contentId = (String)persistResult.get(&quot;contentId&quot;);
            //request.setAttribute(&quot;contentId&quot;, contentId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="DC042CC3A9A5B3446DAF00062D3F0228">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2264 of DatabaseUtil.java, the method createForeignKey() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2264</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(sqlBuf.toString());
        } catch (SQLException e) {
            return &quot;SQL Exception while executing the following:\n&quot; + sqlBuf.toString() + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>505</LineStart>
<Snippet>        Map&lt;String, Object&gt; ftlResults = null;
        try {
            ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
        } catch (ServiceAuthException e) {
            String msg = e.getMessage();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="30F345228DB733855CFAD9DA60277C10">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 363 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>363</LineStart>
<Snippet>            _ind = 1;
            if (specifyTypeAndConcur) {
                _ps = _connection.prepareStatement(sql, resultSetType, resultSetConcurrency);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {</Snippet>
                            </Primary>
                            <Source>
<FileName>CatalogUrlServlet.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/category/CatalogUrlServlet.java</FilePath>
<LineStart>80</LineStart>
<Snippet>        Delegator delegator = (Delegator) getServletContext().getAttribute(&quot;delegator&quot;);

        String pathInfo = request.getPathInfo();
        List&lt;String&gt; pathElements = StringUtil.split(pathInfo, &quot;/&quot;);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="ABAE61BCBE00B47CB61EFD66A03A1340">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CatalogUrlServlet.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/category/CatalogUrlServlet.java</FilePath>
<LineStart>80</LineStart>
<Snippet>        Delegator delegator = (Delegator) getServletContext().getAttribute(&quot;delegator&quot;);

        String pathInfo = request.getPathInfo();
        List&lt;String&gt; pathElements = StringUtil.split(pathInfo, &quot;/&quot;);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="18881BAB5FF402559E8998CA5F7EB6D7">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1527</LineStart>
<Snippet>        Locale locale = UtilHttp.getLocale(request);

        String productStoreId = request.getParameter(&quot;productStoreId&quot;);

        if (UtilValidate.isNotEmpty(productStoreId)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="C2116F8C607B2BFEB4FDDB53EB400416">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>TaskEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/task/TaskEvents.java</FilePath>
<LineStart>75</LineStart>
<Snippet>            Map&lt;String, ? extends Object&gt; context = UtilMisc.toMap(&quot;workEffortId&quot;, workEffortId, &quot;partyId&quot;, partyId, &quot;roleTypeId&quot;, roleTypeId,
                    &quot;fromDate&quot;, fromDate, &quot;result&quot;, parameterMap, &quot;userLogin&quot;, userLogin);
            result = dispatcher.runSync(&quot;wfCompleteAssignment&quot;, context);
            if (result.containsKey(ModelService.RESPOND_ERROR)) {
                request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, result.get(ModelService.ERROR_MESSAGE));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="6F7EFE7EA04D592964A023074DBCCE82">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 366 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>366</LineStart>
<Snippet>                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {
                _ps = _connection.prepareStatement(sql);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] (def) _ps=&quot; + _ps, module);
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>LoginWorker.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/LoginWorker.java</FilePath>
<LineStart>264</LineStart>
<Snippet>
                // keep the previous request name in the session
                session.setAttribute(&quot;_PREVIOUS_REQUEST_&quot;, request.getPathInfo());

                // NOTE: not using the old _PREVIOUS_PARAMS_ attribute at all because it was a security hole as it was used to put data in the URL (never encrypted) that was originally in a form field that may have been encrypted</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="4B27DCB38B84ED76E48542EEA17C7797">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 366 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>366</LineStart>
<Snippet>                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {
                _ps = _connection.prepareStatement(sql);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] (def) _ps=&quot; + _ps, module);
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1527</LineStart>
<Snippet>        Locale locale = UtilHttp.getLocale(request);

        String productStoreId = request.getParameter(&quot;productStoreId&quot;);

        if (UtilValidate.isNotEmpty(productStoreId)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="7FF5C3A9FBE425B280F16DEF6B8D88BC">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 366 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>366</LineStart>
<Snippet>                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {
                _ps = _connection.prepareStatement(sql);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] (def) _ps=&quot; + _ps, module);
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>693</LineStart>
<Snippet>            return &quot;error&quot;;
        }
        String orderId = request.getParameter(&quot;orderId_o_0&quot;);
        // set the order id if supplied
        if (UtilValidate.isNotEmpty(orderId)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="14CBA9020783DC8238FEE9E7895042CB">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ShipmentEvents.java</FileName>
<FilePath>applications/product/src/org/ofbiz/shipment/shipment/ShipmentEvents.java</FilePath>
<LineStart>48</LineStart>
<Snippet>        Delegator delegator = (Delegator) request.getAttribute(&quot;delegator&quot;);

        String shipmentId = request.getParameter(&quot;shipmentId&quot;);
        String shipmentRouteSegmentId = request.getParameter(&quot;shipmentRouteSegmentId&quot;);
        String shipmentPackageSeqId = request.getParameter(&quot;shipmentPackageSeqId&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="59DB16B130081C9EC2B07F21EE7ED952">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>497</LineStart>
<Snippet>                    }
                    String formAction = &quot;/additemsurvey&quot;;
                    String nextPage = RequestHandler.getOverrideViewUri(request.getPathInfo());
                    if (nextPage != null) {
                        formAction = formAction + &quot;/&quot; + nextPage;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="968F14825A8EC471306A3984D1DF6B68">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>261</LineStart>
<Snippet>        ByteBuffer imageData = (ByteBuffer) tempFile.get(&quot;imageData&quot;);
        if (UtilValidate.isEmpty(imageName) || UtilValidate.isEmpty(imageData)) {
            session.setAttribute(&quot;frameContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
            session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;There is no frame image, please select the image type *.PNG  uploading.&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="83088A5A572EEAF4680C2CEB0E2CD010">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>UrlServletHelper.java</FileName>
<FilePath>framework/common/src/org/ofbiz/common/UrlServletHelper.java</FilePath>
<LineStart>128</LineStart>
<Snippet>        }
        if (UtilValidate.isNotEmpty(httpRequest.getParameter(&quot;viewSort&quot;))) {
            viewSort = httpRequest.getParameter(&quot;viewSort&quot;);
        }
        if (UtilValidate.isNotEmpty(httpRequest.getParameter(&quot;searchString&quot;))) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="E8D84D5DB2E7CF216DC7296BC0D79201">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>GenericWebEvent.java</FileName>
<FilePath>framework/webtools/src/org/ofbiz/webtools/GenericWebEvent.java</FilePath>
<LineStart>183</LineStart>
<Snippet>            }

            String fval = request.getParameter(field.getName());
            if (UtilValidate.isNotEmpty(fval)) {
                try {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="F344989BE3AE77BDC138844FED80B49B">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>CatalogUrlServlet.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/category/CatalogUrlServlet.java</FilePath>
<LineStart>80</LineStart>
<Snippet>        Delegator delegator = (Delegator) getServletContext().getAttribute(&quot;delegator&quot;);

        String pathInfo = request.getPathInfo();
        List&lt;String&gt; pathElements = StringUtil.split(pathInfo, &quot;/&quot;);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="AC897AEB482BB12BEFE280BD0AEDA931">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>182</LineStart>
<Snippet>                }
                if (UtilValidate.isNotEmpty(map.get(&quot;contentAssocTypeId&quot;))) {
                    ftlResults = dispatcher.runSync(&quot;createContentAssoc&quot;, map);
                    isError = ModelService.RESPOND_ERROR.equals(ftlResults.get(ModelService.RESPONSE_MESSAGE));
                    if (isError) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="59DAA15D2BEB8941FF398C1F40C653DF">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1388</LineStart>
<Snippet>        ShoppingCart cart = null;
        try {
            Map&lt;String, Object&gt; outMap = dispatcher.runSync(&quot;loadCartFromOrder&quot;,
                                                UtilMisc.&lt;String, Object&gt;toMap(&quot;orderId&quot;, orderId,
                                                        &quot;skipProductChecks&quot;, Boolean.TRUE, // the products have already been checked in the order, no need to check their validity again</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="A5E4F1FA84C867E0E5F62B51CBBAF2DA">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CommonEvents.java</FileName>
<FilePath>framework/common/src/org/ofbiz/common/CommonEvents.java</FilePath>
<LineStart>141</LineStart>
<Snippet>        Security security = (Security) request.getAttribute(&quot;security&quot;);
        GenericValue userLogin = (GenericValue) request.getSession().getAttribute(&quot;userLogin&quot;);
        String visitId = request.getParameter(&quot;visitId&quot;);
        if (visitId != null) request.setAttribute(&quot;visitId&quot;, visitId);
        if (security.hasPermission(&quot;SEND_CONTROL_APPLET&quot;, userLogin)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="A34812E0BB1A8FA1DECC20DC6CDE03E9">
                            <Category>SQL Injection</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>ContextFilter.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ContextFilter.java</FilePath>
<LineStart>389</LineStart>
<Snippet>        }
        // get the unique name of this dispatcher
        String dispatcherName = servletContext.getInitParameter(&quot;localDispatcherName&quot;);

        if (dispatcherName == null) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="4E8205D999E0510CE689933407821A72">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>LoginEvents.java</FileName>
<FilePath>applications/securityext/src/org/ofbiz/securityext/login/LoginEvents.java</FilePath>
<LineStart>76</LineStart>
<Snippet>        if (userLogin == null) {

            String username = request.getParameter(&quot;USERNAME&quot;);
            String password = request.getParameter(&quot;PASSWORD&quot;);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="F77834E9300B9C8317D9C6ED2245EFC3">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>WebPosEvents.java</FileName>
<FilePath>specialpurpose/webpos/src/org/ofbiz/webpos/WebPosEvents.java</FilePath>
<LineStart>180</LineStart>
<Snippet>                                    request.setAttribute(&quot;featureSet&quot;, featureSet);
                                    try {
                                        variantTreeMap = dispatcher.runSync(&quot;getProductVariantTree&quot;, 
                                                         UtilMisc.toMap(&quot;productId&quot;, productId, &quot;featureOrder&quot;, featureSet, &quot;productStoreId&quot;, productStoreId));
                                        Map&lt;String, Object&gt; variantTree = UtilGenerics.cast(variantTreeMap.get(&quot;variantTree&quot;));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="9B0F647B35CA48DFF2CE7553ADB39593">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>AbstractOFBizAuthenticationHandler.java</FileName>
<FilePath>specialpurpose/ldap/src/org/ofbiz/ldap/commons/AbstractOFBizAuthenticationHandler.java</FilePath>
<LineStart>129</LineStart>
<Snippet>
        try {
            loginResult = dispatcher.runSync(&quot;userLogin&quot;, UtilMisc.toMap(&quot;login.username&quot;, username, &quot;login.password&quot;, password, &quot;visitId&quot;, visitId, &quot;locale&quot;, UtilHttp.getLocale(request)));
        } catch (GenericServiceException e) {
            throw new GenericServiceException(e.getLocalizedMessage());</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="8FE859B5669BF3509B560BFBBE2C6F34">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>OrderEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/order/OrderEvents.java</FilePath>
<LineStart>125</LineStart>
<Snippet>                        contextMap.put(&quot;userLogin&quot;, userLogin);
                        try {
                            resultMap = dispatcher.runSync(&quot;cancelOrderItem&quot;, contextMap);

                            if (ServiceUtil.isError(resultMap)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="D2B7F67395BBF5908BB9D6BD07C14DC1">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 366 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>366</LineStart>
<Snippet>                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {
                _ps = _connection.prepareStatement(sql);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] (def) _ps=&quot; + _ps, module);
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>262</LineStart>
<Snippet>        if (UtilValidate.isEmpty(imageName) || UtilValidate.isEmpty(imageData)) {
            session.setAttribute(&quot;frameContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
            session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;There is no frame image, please select the image type *.PNG  uploading.&quot;);
            return &quot;error&quot;;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="6C02BDA5F0C9A1213E0F82C5CF8FFFEC">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2826 of DatabaseUtil.java, the method deleteDeclaredIndex() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2826</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(deleteIndexSql);
        } catch (SQLException e) {
            return &quot;SQL Exception while executing the following:\n&quot; + deleteIndexSql + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>119</LineStart>
<Snippet>            contentRevisionMap.put(&quot;contentId&quot;, contentId);
            contentRevisionMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentRevisionAndItem&quot;, contentRevisionMap);
            keySet = result.keySet();
            iter = keySet.iterator();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="C29A5CE13A6CDC695BCCAC8FDF9FD797">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>EbayEvents.java</FileName>
<FilePath>specialpurpose/ebaystore/src/org/ofbiz/ebaystore/EbayEvents.java</FilePath>
<LineStart>280</LineStart>
<Snippet>                String siteCode = apiContext.getSite().name();
                if (UtilValidate.isNotEmpty(session.getAttribute(&quot;itemListings_&quot;.concat(siteCode)))) {
                    request.setAttribute(&quot;productStoreId&quot;, request.getParameter(&quot;productStoreId&quot;));
                    return &quot;prepare&quot;;
                }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="47B447CA7546335AAE784E5E1FC30477">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 366 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>366</LineStart>
<Snippet>                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {
                _ps = _connection.prepareStatement(sql);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] (def) _ps=&quot; + _ps, module);
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>WebPosEvents.java</FileName>
<FilePath>specialpurpose/webpos/src/org/ofbiz/webpos/WebPosEvents.java</FilePath>
<LineStart>108</LineStart>
<Snippet>
            if (UtilValidate.isEmpty(cart)) {
                cart = new ShoppingCart(delegator, productStoreId, request.getLocale(), currencyUomId);
                session.setAttribute(&quot;shoppingCart&quot;, cart);
            }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="0F94C39D7ED202492CA854CF938C6E03">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 1771 of DatabaseUtil.java, the method createTable() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>1771</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(sqlBuf.toString());
        } catch (SQLException e) {
            return &quot;SQL Exception while executing the following:\n&quot; + sqlBuf.toString() + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>104</LineStart>
<Snippet>        persistMap.put(&quot;userLogin&quot;, userLogin);
        try {
            Map&lt;String, Object&gt; persistResult = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, persistMap);
            contentId = (String)persistResult.get(&quot;contentId&quot;);
            //request.setAttribute(&quot;contentId&quot;, contentId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="C593F69DBE2359C83C5BA51C0DF6A313">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2826 of DatabaseUtil.java, the method deleteDeclaredIndex() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2826</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(deleteIndexSql);
        } catch (SQLException e) {
            return &quot;SQL Exception while executing the following:\n&quot; + deleteIndexSql + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>CoreEvents.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/CoreEvents.java</FilePath>
<LineStart>412</LineStart>
<Snippet>        try {
            if (null!=request.getParameter(&quot;_RUN_SYNC_&quot;) &amp;&amp; request.getParameter(&quot;_RUN_SYNC_&quot;).equals(&quot;Y&quot;)) {
                syncServiceResult = dispatcher.runSync(serviceName, serviceContext);
            } else {
                dispatcher.schedule(jobName, poolName, serviceName, serviceContext, startTime, frequency, interval, count, endTime, maxRetry);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="26EA01EEB4FCD40218E47BDC37920EB6">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>234</LineStart>
<Snippet>
    public static Map&lt;String, Object&gt; getUrlOnlyParameterMap(HttpServletRequest request) {
        return getUrlOnlyParameterMap(request.getQueryString(), request.getPathInfo());
    }
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="3446B5EC91BB0D1B3C68ECF491CE7BEF">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>688</LineStart>
<Snippet>        
        // TODO: the code below here needs some cleanups
        String billToCustomerPartyId = request.getParameter(&quot;billToCustomerPartyId_o_0&quot;);
        if (UtilValidate.isEmpty(billToCustomerPartyId) &amp;&amp; UtilValidate.isEmpty(supplierPartyId)) {
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, UtilProperties.getMessage(resource_error, &quot;OrderCouldNotInitPurchaseOrder&quot;, locale));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="A9A3F679400B88E5D87A8CE192D04B2F">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 1985 of DatabaseUtil.java, the method renameColumn() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>1985</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(sql);
        } catch (SQLException e) {
            return &quot;SQL Exception while executing the following:\n&quot; + sql + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilObject.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilObject.java</FilePath>
<LineStart>137</LineStart>
<Snippet>                ObjectInputStream ois = new ObjectInputStream(bis, Thread.currentThread().getContextClassLoader());
                try {
                    obj = ois.readObject();
                } catch (ClassNotFoundException e) {
                    Debug.logError(e, module);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="5F7C9EB4FAE0BF6C8D28E6B78B700BD9">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>563</LineStart>
<Snippet>        session.setAttribute(&quot;_CLIENT_FORWARDED_FOR_&quot;, request.getHeader(&quot;X-Forwarded-For&quot;));
        session.setAttribute(&quot;_CLIENT_REMOTE_ADDR_&quot;, request.getRemoteAddr());
        session.setAttribute(&quot;_CLIENT_REMOTE_HOST_&quot;, request.getRemoteHost());
        session.setAttribute(&quot;_CLIENT_REMOTE_USER_&quot;, request.getRemoteUser());
    }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="BF445C963C1F2F11409EA27A03503709">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ProductionRunEvents.java</FileName>
<FilePath>applications/manufacturing/src/org/ofbiz/manufacturing/jobshopmgt/ProductionRunEvents.java</FilePath>
<LineStart>94</LineStart>
<Snippet>            inputMap.put(&quot;lotId&quot;, parameters.get(&quot;lotId&quot;));
            inputMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;productionRunDeclareAndProduce&quot;, inputMap);
            if (ServiceUtil.isError(result)) {
                request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, ServiceUtil.getErrorMessage(result));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="AD8D5A7CA11B493C13080A4A90BE975F">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>505</LineStart>
<Snippet>        Map&lt;String, Object&gt; ftlResults = null;
        try {
            ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
        } catch (ServiceAuthException e) {
            String msg = e.getMessage();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="376C19A4CD699A794F219286E68796A4">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>LayoutEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/layout/LayoutEvents.java</FilePath>
<LineStart>552</LineStart>
<Snippet>            context.put(&quot;textData&quot;, paramMap.get(&quot;textData&quot;));
            context.put(&quot;contentAssocTypeId&quot;, null);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, context);
            boolean isError = ModelService.RESPOND_ERROR.equals(result.get(ModelService.RESPONSE_MESSAGE));
            if (isError) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="D54174BBD67EE93098183CB0F6EA4E09">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>TrackingCodeEvents.java</FileName>
<FilePath>applications/marketing/src/org/ofbiz/marketing/tracking/TrackingCodeEvents.java</FilePath>
<LineStart>93</LineStart>
<Snippet>     */
    public static String checkPartnerTrackingCodeUrlParam(HttpServletRequest request, HttpServletResponse response) {
        String trackingCodeId = request.getParameter(&quot;ptc&quot;);

        if (UtilValidate.isNotEmpty(trackingCodeId)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="BA1E0FD021A77F2B2F1911A728966E64">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2044 of DatabaseUtil.java, the method repairColumnSize() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2044</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            int changed = stmt.executeUpdate(sql1);
            if (Debug.infoOn()) Debug.logInfo(&quot;[moveData] &quot; + changed + &quot; records updated&quot;, module);
        } catch (SQLException e) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceEventHandler.java</FilePath>
<LineStart>337</LineStart>
<Snippet>                dispatcher.runAsync(serviceName, serviceContext);
            } else {
                result = dispatcher.runSync(serviceName, serviceContext);
            }
        } catch (ServiceAuthException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="955918FCA04D75853D48EA3CFFD16EE6">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1535</LineStart>
<Snippet>
        // TODO: re-factor and move this inside the ShoppingCart constructor
        String orderMode = request.getParameter(&quot;orderMode&quot;);
        if (orderMode != null) {
            cart.setOrderType(orderMode);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="B948C8F566F7127B64F6C12152145762">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>WebPosEvents.java</FileName>
<FilePath>specialpurpose/webpos/src/org/ofbiz/webpos/WebPosEvents.java</FilePath>
<LineStart>58</LineStart>
<Snippet>        
        // get the posTerminalId
        String posTerminalId = (String) request.getParameter(&quot;posTerminalId&quot;);
        session.removeAttribute(&quot;shoppingCart&quot;);
        session.removeAttribute(&quot;webPosSession&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="F39CEAA634F660D2F4567A54E0442DF8">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>556</LineStart>
<Snippet>
        session.setAttribute(&quot;_WEBAPP_NAME_&quot;, UtilHttp.getApplicationName(request));
        session.setAttribute(&quot;_CLIENT_LOCALE_&quot;, request.getLocale());
        session.setAttribute(&quot;_CLIENT_REQUEST_&quot;, fullRequestUrl.toString());
        session.setAttribute(&quot;_CLIENT_USER_AGENT_&quot;, request.getHeader(&quot;User-Agent&quot;) != null ? request.getHeader(&quot;User-Agent&quot;) : &quot;&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="DC14445BD9E4FFBD33B334934385A3C8">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 366 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>366</LineStart>
<Snippet>                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {
                _ps = _connection.prepareStatement(sql);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] (def) _ps=&quot; + _ps, module);
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>ICalWorker.java</FileName>
<FilePath>applications/workeffort/src/org/ofbiz/workeffort/workeffort/ICalWorker.java</FilePath>
<LineStart>285</LineStart>
<Snippet>        HttpSession session = request.getSession();
        LocalDispatcher dispatcher = (LocalDispatcher) request.getAttribute(&quot;dispatcher&quot;);
        Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;userLogin&quot;, serviceMap);
        if (ServiceUtil.isError(result) || ServiceUtil.isFailure(result)) {
            return;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="B5A630D0E5876612C4DF1519618B3A32">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>558</LineStart>
<Snippet>        session.setAttribute(&quot;_CLIENT_LOCALE_&quot;, request.getLocale());
        session.setAttribute(&quot;_CLIENT_REQUEST_&quot;, fullRequestUrl.toString());
        session.setAttribute(&quot;_CLIENT_USER_AGENT_&quot;, request.getHeader(&quot;User-Agent&quot;) != null ? request.getHeader(&quot;User-Agent&quot;) : &quot;&quot;);
        session.setAttribute(&quot;_CLIENT_REFERER_&quot;, request.getHeader(&quot;Referer&quot;) != null ? request.getHeader(&quot;Referer&quot;) : &quot;&quot;);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="22E728FE7B0382A99C9180875EFE6EA1">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>UrlServletHelper.java</FileName>
<FilePath>framework/common/src/org/ofbiz/common/UrlServletHelper.java</FilePath>
<LineStart>131</LineStart>
<Snippet>        }
        if (UtilValidate.isNotEmpty(httpRequest.getParameter(&quot;searchString&quot;))) {
            searchString = httpRequest.getParameter(&quot;searchString&quot;);
        }
        </Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="343C2B04A7ADA360245D37BFF74DC586">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>559</LineStart>
<Snippet>        session.setAttribute(&quot;_CLIENT_REQUEST_&quot;, fullRequestUrl.toString());
        session.setAttribute(&quot;_CLIENT_USER_AGENT_&quot;, request.getHeader(&quot;User-Agent&quot;) != null ? request.getHeader(&quot;User-Agent&quot;) : &quot;&quot;);
        session.setAttribute(&quot;_CLIENT_REFERER_&quot;, request.getHeader(&quot;Referer&quot;) != null ? request.getHeader(&quot;Referer&quot;) : &quot;&quot;);

        session.setAttribute(&quot;_CLIENT_FORWARDED_FOR_&quot;, request.getHeader(&quot;X-Forwarded-For&quot;));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="7B46D5E4CBD7BA071F467CDE908A010C">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 366 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>366</LineStart>
<Snippet>                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {
                _ps = _connection.prepareStatement(sql);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] (def) _ps=&quot; + _ps, module);
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>561</LineStart>
<Snippet>        session.setAttribute(&quot;_CLIENT_REFERER_&quot;, request.getHeader(&quot;Referer&quot;) != null ? request.getHeader(&quot;Referer&quot;) : &quot;&quot;);

        session.setAttribute(&quot;_CLIENT_FORWARDED_FOR_&quot;, request.getHeader(&quot;X-Forwarded-For&quot;));
        session.setAttribute(&quot;_CLIENT_REMOTE_ADDR_&quot;, request.getRemoteAddr());
        session.setAttribute(&quot;_CLIENT_REMOTE_HOST_&quot;, request.getRemoteHost());</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="C137C3E161191FE5596240E400F61D60">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>693</LineStart>
<Snippet>            return &quot;error&quot;;
        }
        String orderId = request.getParameter(&quot;orderId_o_0&quot;);
        // set the order id if supplied
        if (UtilValidate.isNotEmpty(orderId)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="FFF7E2C25D48E005B87790FF396B8519">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>UrlServletHelper.java</FileName>
<FilePath>framework/common/src/org/ofbiz/common/UrlServletHelper.java</FilePath>
<LineStart>125</LineStart>
<Snippet>        }
        if (UtilValidate.isNotEmpty(httpRequest.getParameter(&quot;viewSize&quot;))) {
            viewSize = httpRequest.getParameter(&quot;viewSize&quot;);
        }
        if (UtilValidate.isNotEmpty(httpRequest.getParameter(&quot;viewSort&quot;))) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="BA474CE1C3DD0998BE9C4533516EE9B6">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>GlEvents.java</FileName>
<FilePath>applications/accounting/src/org/ofbiz/accounting/GlEvents.java</FilePath>
<LineStart>86</LineStart>
<Snippet>    Map&lt;String, Object&gt; glReconResult = null;
    try {
        glReconResult = dispatcher.runSync(&quot;createGlReconciliation&quot;, fieldMap); //create GlReconciliation for the glAccountId
        if (ServiceUtil.isError(glReconResult)) {
            return &quot;error&quot;;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="4DEB8B64F4735FABF522D654DCD9E1E0">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ShipmentEvents.java</FileName>
<FilePath>applications/product/src/org/ofbiz/shipment/shipment/ShipmentEvents.java</FilePath>
<LineStart>95</LineStart>
<Snippet>        GenericValue userLogin = (GenericValue)request.getSession().getAttribute(&quot;userLogin&quot;);

        String shipmentId = request.getParameter(&quot;shipmentIdReceived&quot;);
        String forceShipmentReceived = request.getParameter(&quot;forceShipmentReceived&quot;);
        if (UtilValidate.isNotEmpty(shipmentId) &amp;&amp; &quot;Y&quot;.equals(forceShipmentReceived)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="2B37D48D17FDE2C0389E226A309CE016">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 366 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>366</LineStart>
<Snippet>                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {
                _ps = _connection.prepareStatement(sql);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] (def) _ps=&quot; + _ps, module);
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>303</LineStart>
<Snippet>            dataResourceCtx.put(&quot;mimeTypeId&quot;, &quot;image/png&quot;);
            dataResourceCtx.put(&quot;isPublic&quot;, &quot;Y&quot;);
            Map&lt;String, Object&gt; dataResourceResult = dispatcher.runSync(&quot;createDataResource&quot;, dataResourceCtx);
            dataResourceId = dataResourceResult.get(&quot;dataResourceId&quot;).toString();
            //create content</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="B948C8F566F7127B64F6C12152145763">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>WebPosEvents.java</FileName>
<FilePath>specialpurpose/webpos/src/org/ofbiz/webpos/WebPosEvents.java</FilePath>
<LineStart>58</LineStart>
<Snippet>        
        // get the posTerminalId
        String posTerminalId = (String) request.getParameter(&quot;posTerminalId&quot;);
        session.removeAttribute(&quot;shoppingCart&quot;);
        session.removeAttribute(&quot;webPosSession&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="F5C2489D0D1E0D5B0374F875A1FDC25F">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>ProductionRunEvents.java</FileName>
<FilePath>applications/manufacturing/src/org/ofbiz/manufacturing/jobshopmgt/ProductionRunEvents.java</FilePath>
<LineStart>94</LineStart>
<Snippet>            inputMap.put(&quot;lotId&quot;, parameters.get(&quot;lotId&quot;));
            inputMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;productionRunDeclareAndProduce&quot;, inputMap);
            if (ServiceUtil.isError(result)) {
                request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, ServiceUtil.getErrorMessage(result));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="42C880AB2A74E188C293AD4FCCF96FB8">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>ShipmentEvents.java</FileName>
<FilePath>applications/product/src/org/ofbiz/shipment/shipment/ShipmentEvents.java</FilePath>
<LineStart>49</LineStart>
<Snippet>
        String shipmentId = request.getParameter(&quot;shipmentId&quot;);
        String shipmentRouteSegmentId = request.getParameter(&quot;shipmentRouteSegmentId&quot;);
        String shipmentPackageSeqId = request.getParameter(&quot;shipmentPackageSeqId&quot;);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="75D8006FFF0AEA152A852A9B0A6D93B8">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>221</LineStart>
<Snippet>                sumContext.put(&quot;mapKey&quot;, &quot;SUMMARY&quot;);
                sumContext.put(&quot;dataTemplateTypeId&quot;, &quot;NONE&quot;);
                Map&lt;String, Object&gt; sumResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, sumContext);
                isError = ModelService.RESPOND_ERROR.equals(sumResults.get(ModelService.RESPONSE_MESSAGE));
                if (isError) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="E36BA9949CAF467C3CA55B40ADE2FF13">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2264 of DatabaseUtil.java, the method createForeignKey() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2264</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(sqlBuf.toString());
        } catch (SQLException e) {
            return &quot;SQL Exception while executing the following:\n&quot; + sqlBuf.toString() + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>119</LineStart>
<Snippet>            contentRevisionMap.put(&quot;contentId&quot;, contentId);
            contentRevisionMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentRevisionAndItem&quot;, contentRevisionMap);
            keySet = result.keySet();
            iter = keySet.iterator();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="F616D532F6239BCC4D46C618A08E4977">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 366 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>366</LineStart>
<Snippet>                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {
                _ps = _connection.prepareStatement(sql);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] (def) _ps=&quot; + _ps, module);
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceEventHandler.java</FilePath>
<LineStart>337</LineStart>
<Snippet>                dispatcher.runAsync(serviceName, serviceContext);
            } else {
                result = dispatcher.runSync(serviceName, serviceContext);
            }
        } catch (ServiceAuthException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="E09D97538754F3C0D348D4D6B1CD2058">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CheckOutEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/CheckOutEvents.java</FilePath>
<LineStart>466</LineStart>
<Snippet>        }
        
        String issuerId = request.getParameter(&quot;issuerId&quot;);
        if (UtilValidate.isNotEmpty(issuerId)) {
            request.setAttribute(&quot;issuerId&quot;, issuerId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="0EB95C8F0900E45ACC0067E9691E6B38">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>262</LineStart>
<Snippet>        if (UtilValidate.isEmpty(imageName) || UtilValidate.isEmpty(imageData)) {
            session.setAttribute(&quot;frameContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
            session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;There is no frame image, please select the image type *.PNG  uploading.&quot;);
            return &quot;error&quot;;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="3046366FA1DFCEB2D1953D281FDF21BD">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 363 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>363</LineStart>
<Snippet>            _ind = 1;
            if (specifyTypeAndConcur) {
                _ps = _connection.prepareStatement(sql, resultSetType, resultSetConcurrency);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>409</LineStart>
<Snippet>        }
        
        String frameContentId = request.getParameter(&quot;frameContentId&quot;);
        Delegator delegator = (Delegator) request.getAttribute(&quot;delegator&quot;);
        </Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="B5153EC5CBB288648FC7A15D500CCE30">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1535</LineStart>
<Snippet>
        // TODO: re-factor and move this inside the ShoppingCart constructor
        String orderMode = request.getParameter(&quot;orderMode&quot;);
        if (orderMode != null) {
            cart.setOrderType(orderMode);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="A6E7D86B493FA69B18F8AFE274B7EF36">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>OrderEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/order/OrderEvents.java</FilePath>
<LineStart>58</LineStart>
<Snippet>        Delegator delegator = (Delegator) request.getAttribute(&quot;delegator&quot;);
        GenericValue userLogin = (GenericValue) session.getAttribute(&quot;userLogin&quot;);
        String dataResourceId = request.getParameter(&quot;dataResourceId&quot;);

        try {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="3FB48F4B88DF174BF1132A6B27E2DDE9">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>CmsEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/cms/CmsEvents.java</FilePath>
<LineStart>107</LineStart>
<Snippet>            pathInfo = overrideViewUri;
        } else {
            pathInfo = request.getPathInfo();
            if (targetRequest.equals(actualRequest) &amp;&amp; pathInfo != null) {
                // was called directly -- path info is everything after the request</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="229DFDCA15A83D14CBA497027108760B">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>WebPosEvents.java</FileName>
<FilePath>specialpurpose/webpos/src/org/ofbiz/webpos/WebPosEvents.java</FilePath>
<LineStart>108</LineStart>
<Snippet>
            if (UtilValidate.isEmpty(cart)) {
                cart = new ShoppingCart(delegator, productStoreId, request.getLocale(), currencyUomId);
                session.setAttribute(&quot;shoppingCart&quot;, cart);
            }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="82ECAA89EAD08EDB55C38788704FB07E">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>TrackingCodeEvents.java</FileName>
<FilePath>applications/marketing/src/org/ofbiz/marketing/tracking/TrackingCodeEvents.java</FilePath>
<LineStart>93</LineStart>
<Snippet>     */
    public static String checkPartnerTrackingCodeUrlParam(HttpServletRequest request, HttpServletResponse response) {
        String trackingCodeId = request.getParameter(&quot;ptc&quot;);

        if (UtilValidate.isNotEmpty(trackingCodeId)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="4033D2119BFA9C72646A72DA5E26F36B">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>561</LineStart>
<Snippet>        session.setAttribute(&quot;_CLIENT_REFERER_&quot;, request.getHeader(&quot;Referer&quot;) != null ? request.getHeader(&quot;Referer&quot;) : &quot;&quot;);

        session.setAttribute(&quot;_CLIENT_FORWARDED_FOR_&quot;, request.getHeader(&quot;X-Forwarded-For&quot;));
        session.setAttribute(&quot;_CLIENT_REMOTE_ADDR_&quot;, request.getRemoteAddr());
        session.setAttribute(&quot;_CLIENT_REMOTE_HOST_&quot;, request.getRemoteHost());</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="558CA861BE4AEF104AF1626CFAE19035">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>183</LineStart>
<Snippet>        Map&lt;String, Object&gt; results = null;
        try {
            results = dispatcher.runSync(&quot;renderCompDocPdf&quot;, mapIn);
        } catch (ServiceAuthException e) {
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, e.toString());</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="3192BD8562F40EA23C6FE39E603E3695">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 363 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>363</LineStart>
<Snippet>            _ind = 1;
            if (specifyTypeAndConcur) {
                _ps = _connection.prepareStatement(sql, resultSetType, resultSetConcurrency);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>119</LineStart>
<Snippet>            contentRevisionMap.put(&quot;contentId&quot;, contentId);
            contentRevisionMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentRevisionAndItem&quot;, contentRevisionMap);
            keySet = result.keySet();
            iter = keySet.iterator();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="AD4A03A804DE8B089FDB3D6FF90FF220">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>RequestHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/RequestHandler.java</FilePath>
<LineStart>119</LineStart>
<Snippet>
        // Grab data from request object to process
        String defaultRequestUri = RequestHandler.getRequestUri(request.getPathInfo());
        if (request.getAttribute(&quot;targetRequestUri&quot;) == null) {
            if (request.getSession().getAttribute(&quot;_PREVIOUS_REQUEST_&quot;) != null) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="9A46BDCA355C9AC3D9AE274CE4CF1D56">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>DataEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/data/DataEvents.java</FilePath>
<LineStart>323</LineStart>
<Snippet>        if (mode != null &amp;&amp; mode.equals(&quot;UPDATE&quot;)) {
            try {
                result = dispatcher.runSync(&quot;updateDataResource&quot;, serviceInMap);
            } catch (GenericServiceException e) {
                String errMsg = UtilProperties.getMessage(DataEvents.err_resource, &quot;dataEvents.error_call_update_service&quot;, locale);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="5B90D6B3B42A83BA23D75DF91065C003">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 1771 of DatabaseUtil.java, the method createTable() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>1771</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(sqlBuf.toString());
        } catch (SQLException e) {
            return &quot;SQL Exception while executing the following:\n&quot; + sqlBuf.toString() + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>575</LineStart>
<Snippet>        while (e.hasMoreElements()) {
            String name = e.nextElement();
            request.setAttribute(name, request.getParameter(name));
        }
    }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57" iid="AA1090B1DE0AB202E84F778F26982CC4">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 59 of CursorResultSet.java, the method close() invokes a SQL query built using potentially unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CursorResultSet.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/CursorResultSet.java</FilePath>
<LineStart>59</LineStart>
<Snippet>
    protected void close() throws SQLException {
        stmt.executeUpdate(&quot;CLOSE &quot; + cursorName);
        rs.close();
    }</Snippet>
                            </Primary>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="D2FAB6E5657F97F1F43F5A1C605DF1BF">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 363 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>363</LineStart>
<Snippet>            _ind = 1;
            if (specifyTypeAndConcur) {
                _ps = _connection.prepareStatement(sql, resultSetType, resultSetConcurrency);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1388</LineStart>
<Snippet>        ShoppingCart cart = null;
        try {
            Map&lt;String, Object&gt; outMap = dispatcher.runSync(&quot;loadCartFromOrder&quot;,
                                                UtilMisc.&lt;String, Object&gt;toMap(&quot;orderId&quot;, orderId,
                                                        &quot;skipProductChecks&quot;, Boolean.TRUE, // the products have already been checked in the order, no need to check their validity again</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="B03B0B18A2A753064FCF0E31F8C76BC2">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2522 of DatabaseUtil.java, the method createPrimaryKey() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2522</LineStart>
<Snippet>            try {
                stmt = connection.createStatement();
                stmt.executeUpdate(sqlBuf.toString());
            } catch (SQLException e) {
                return &quot;SQL Exception while executing the following:\n&quot; + sqlBuf.toString() + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>575</LineStart>
<Snippet>        while (e.hasMoreElements()) {
            String name = e.nextElement();
            request.setAttribute(name, request.getParameter(name));
        }
    }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="53C60CA79CF130A3B6F4E907E884C01C">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>561</LineStart>
<Snippet>        session.setAttribute(&quot;_CLIENT_REFERER_&quot;, request.getHeader(&quot;Referer&quot;) != null ? request.getHeader(&quot;Referer&quot;) : &quot;&quot;);

        session.setAttribute(&quot;_CLIENT_FORWARDED_FOR_&quot;, request.getHeader(&quot;X-Forwarded-For&quot;));
        session.setAttribute(&quot;_CLIENT_REMOTE_ADDR_&quot;, request.getRemoteAddr());
        session.setAttribute(&quot;_CLIENT_REMOTE_HOST_&quot;, request.getRemoteHost());</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="7C9528A3FF4C705FEBC1096592EEBF4F">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2085 of DatabaseUtil.java, the method repairColumnSize() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2085</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(sql2);
        } catch (SQLException e) {
            String thisMsg = &quot;SQL Exception while executing the following:\n&quot; + sql2 + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceMultiEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceMultiEventHandler.java</FilePath>
<LineStart>308</LineStart>
<Snippet>                Map&lt;String, Object&gt; result = null;
                try {
                    result = dispatcher.runSync(serviceName, serviceContext);
                } catch (ServiceAuthException e) {
                    // not logging since the service engine already did</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="E7C40F9DE73750AB37D34940EABAF364">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>287</LineStart>
<Snippet>                imgContext.put(&quot;rootDir&quot;, &quot;rootDir&quot;);
                if (Debug.infoOn()) Debug.logInfo(&quot;[UploadContentAndImage]imgContext &quot; + imgContext, module);
                Map&lt;String, Object&gt; imgResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, imgContext);
                isError = ModelService.RESPOND_ERROR.equals(imgResults.get(ModelService.RESPONSE_MESSAGE));
                if (isError) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="4478EF66C40F097EDD5265AE9EA84045">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1499</LineStart>
<Snippet>        String custRequestId = null;
        try {
            result = dispatcher.runSync(&quot;createCustRequestFromCart&quot;,
                    UtilMisc.toMap(&quot;cart&quot;, cart,
                            &quot;userLogin&quot;, userLogin));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="409D5F93578553B0C00525B2BF83E6DB">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>ContentManagementEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/ContentManagementEvents.java</FilePath>
<LineStart>288</LineStart>
<Snippet>                        serviceIn.put(&quot;targetOperationList&quot;, targetOperationList);
                        serviceIn.put(&quot;contentPurposeList&quot;, contentPurposeList);
                        results = dispatcher.runSync(&quot;createContentAssoc&quot;, serviceIn);
                        responseMessage = (String)results.get(ModelService.RESPONSE_MESSAGE);
                        if (UtilValidate.isNotEmpty(responseMessage)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="C137C3E161191FE5596240E400F61D61">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>693</LineStart>
<Snippet>            return &quot;error&quot;;
        }
        String orderId = request.getParameter(&quot;orderId_o_0&quot;);
        // set the order id if supplied
        if (UtilValidate.isNotEmpty(orderId)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="CA966FF0495CA5E7EA012F6FF1D5D755">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>WebPosEvents.java</FileName>
<FilePath>specialpurpose/webpos/src/org/ofbiz/webpos/WebPosEvents.java</FilePath>
<LineStart>108</LineStart>
<Snippet>
            if (UtilValidate.isEmpty(cart)) {
                cart = new ShoppingCart(delegator, productStoreId, request.getLocale(), currencyUomId);
                session.setAttribute(&quot;shoppingCart&quot;, cart);
            }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="D932A1386E12264BB14C0093D942B593">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CoreEvents.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/CoreEvents.java</FilePath>
<LineStart>516</LineStart>
<Snippet>    public static String runService(HttpServletRequest request, HttpServletResponse response) {
        // get the mode and service name
        String serviceName = request.getParameter(&quot;serviceName&quot;);
        String mode = request.getParameter(&quot;mode&quot;);
        Locale locale = UtilHttp.getLocale(request);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="0EB95C8F0900E45ACC0067E9691E6B3A">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>262</LineStart>
<Snippet>        if (UtilValidate.isEmpty(imageName) || UtilValidate.isEmpty(imageData)) {
            session.setAttribute(&quot;frameContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
            session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;There is no frame image, please select the image type *.PNG  uploading.&quot;);
            return &quot;error&quot;;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="A77E5A7885561366633ECE78B635D407">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 3048 of DatabaseUtil.java, the method deleteForeignKeyIndex() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>3048</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(deleteIndexSql);
        } catch (SQLException e) {
            return &quot;SQL Exception while executing the following:\n&quot; + deleteIndexSql + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>119</LineStart>
<Snippet>            contentRevisionMap.put(&quot;contentId&quot;, contentId);
            contentRevisionMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentRevisionAndItem&quot;, contentRevisionMap);
            keySet = result.keySet();
            iter = keySet.iterator();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="69D2F186F053C93D52CC13B1C4831777">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UrlServletHelper.java</FileName>
<FilePath>framework/common/src/org/ofbiz/common/UrlServletHelper.java</FilePath>
<LineStart>131</LineStart>
<Snippet>        }
        if (UtilValidate.isNotEmpty(httpRequest.getParameter(&quot;searchString&quot;))) {
            searchString = httpRequest.getParameter(&quot;searchString&quot;);
        }
        </Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="975DC2958BA4C38C625959D7F343E30B">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>104</LineStart>
<Snippet>        persistMap.put(&quot;userLogin&quot;, userLogin);
        try {
            Map&lt;String, Object&gt; persistResult = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, persistMap);
            contentId = (String)persistResult.get(&quot;contentId&quot;);
            //request.setAttribute(&quot;contentId&quot;, contentId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="AEBBF1A30EEDFBCA3C883596B0CB1424">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>ICalWorker.java</FileName>
<FilePath>applications/workeffort/src/org/ofbiz/workeffort/workeffort/ICalWorker.java</FilePath>
<LineStart>285</LineStart>
<Snippet>        HttpSession session = request.getSession();
        LocalDispatcher dispatcher = (LocalDispatcher) request.getAttribute(&quot;dispatcher&quot;);
        Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;userLogin&quot;, serviceMap);
        if (ServiceUtil.isError(result) || ServiceUtil.isFailure(result)) {
            return;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="E9259719CDB24F93E587E217D0C03257">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 366 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>366</LineStart>
<Snippet>                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {
                _ps = _connection.prepareStatement(sql);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] (def) _ps=&quot; + _ps, module);
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>267</LineStart>
<Snippet>        }
        if (!&quot;image/png&quot;.equals(mimType)) {
            session.setAttribute(&quot;frameContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
            session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;The selected image type is incorrect, please select the image type *.PNG to upload.&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="F50E7D373DA31DB86B792AA010A4DD46">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ExpressCheckoutEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/thirdparty/paypal/ExpressCheckoutEvents.java</FilePath>
<LineStart>158</LineStart>
<Snippet>            Map&lt;String, Object&gt; result = null;
            try {
                result = dispatcher.runSync(serviceName, inMap);
            } catch (GenericServiceException e) {
                request.setAttribute(&quot;_EVENT_MESSAGE_&quot;, UtilProperties.getMessage(resourceErr, &quot;AccountingPayPalCommunicationError&quot;, locale));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="C2116F8C607B2BFEB4FDDB53EB400415">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>TaskEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/task/TaskEvents.java</FilePath>
<LineStart>75</LineStart>
<Snippet>            Map&lt;String, ? extends Object&gt; context = UtilMisc.toMap(&quot;workEffortId&quot;, workEffortId, &quot;partyId&quot;, partyId, &quot;roleTypeId&quot;, roleTypeId,
                    &quot;fromDate&quot;, fromDate, &quot;result&quot;, parameterMap, &quot;userLogin&quot;, userLogin);
            result = dispatcher.runSync(&quot;wfCompleteAssignment&quot;, context);
            if (result.containsKey(ModelService.RESPOND_ERROR)) {
                request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, result.get(ModelService.ERROR_MESSAGE));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="181E72A1F0B65E5CA8C5E1A583566ED8">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>WebPosEvents.java</FileName>
<FilePath>specialpurpose/webpos/src/org/ofbiz/webpos/WebPosEvents.java</FilePath>
<LineStart>175</LineStart>
<Snippet>                            String productStoreId = webPosSession.getProductStoreId();
                            try {
                                featureMap = dispatcher.runSync(&quot;getProductFeatureSet&quot;, UtilMisc.toMap(&quot;productId&quot;, productId));
                                Set&lt;String&gt; featureSet = UtilGenerics.cast(featureMap.get(&quot;featureSet&quot;));
                                if (UtilValidate.isNotEmpty(featureSet)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="C2A67C600EC084553524B8E0F1EF8D77">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>234</LineStart>
<Snippet>
    public static Map&lt;String, Object&gt; getUrlOnlyParameterMap(HttpServletRequest request) {
        return getUrlOnlyParameterMap(request.getQueryString(), request.getPathInfo());
    }
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="9CEB4F70253791C7F6E842C351954684">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>672</LineStart>
<Snippet>        HttpSession session = request.getSession();
        Locale locale = UtilHttp.getLocale(request);
        String supplierPartyId = request.getParameter(&quot;supplierPartyId_o_0&quot;);
        
        // check the preferred currency of the supplier, if set, use that for the cart, otherwise use system defaults.</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="968F14825A8EC471306A3984D1DF6B67">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>267</LineStart>
<Snippet>        }
        if (!&quot;image/png&quot;.equals(mimType)) {
            session.setAttribute(&quot;frameContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
            session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;The selected image type is incorrect, please select the image type *.PNG to upload.&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="DD2A56684B0F1DB97C4E87E169408E2F">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>575</LineStart>
<Snippet>        while (e.hasMoreElements()) {
            String name = e.nextElement();
            request.setAttribute(name, request.getParameter(name));
        }
    }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="3AD1FD3EEFB6287849865E26E04CF8A4">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>267</LineStart>
<Snippet>        }
        if (!&quot;image/png&quot;.equals(mimType)) {
            session.setAttribute(&quot;frameContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
            session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;The selected image type is incorrect, please select the image type *.PNG to upload.&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="F1D4E44EDFC2CB1E2FF1325C0CA5ECD2">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>127</LineStart>
<Snippet>
            Object value = null;
            String[] paramArr = request.getParameterValues(name);
            if (paramArr != null) {
                if (paramArr.length &gt; 1) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="59DB16B130081C9EC2B07F21EE7ED953">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>497</LineStart>
<Snippet>                    }
                    String formAction = &quot;/additemsurvey&quot;;
                    String nextPage = RequestHandler.getOverrideViewUri(request.getPathInfo());
                    if (nextPage != null) {
                        formAction = formAction + &quot;/&quot; + nextPage;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="11B9EBCFEA8FF301AE7A56884EDD05C6">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>262</LineStart>
<Snippet>        if (UtilValidate.isEmpty(imageName) || UtilValidate.isEmpty(imageData)) {
            session.setAttribute(&quot;frameContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
            session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;There is no frame image, please select the image type *.PNG  uploading.&quot;);
            return &quot;error&quot;;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="FD8C9F9E5C3C8DA76A3AE6E452676F93">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>592</LineStart>
<Snippet>        requestUrl.append(request.getRequestURI());
        if (request.getQueryString() != null) {
            requestUrl.append(&quot;?&quot; + request.getQueryString());
        }
        return requestUrl;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="CD89C4F329A1449BEED047C21DC53E58">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 366 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>366</LineStart>
<Snippet>                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {
                _ps = _connection.prepareStatement(sql);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] (def) _ps=&quot; + _ps, module);
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceMultiEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceMultiEventHandler.java</FilePath>
<LineStart>308</LineStart>
<Snippet>                Map&lt;String, Object&gt; result = null;
                try {
                    result = dispatcher.runSync(serviceName, serviceContext);
                } catch (ServiceAuthException e) {
                    // not logging since the service engine already did</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="AD8CDA3385C2038A8323AE17C77F97DE">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 366 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>366</LineStart>
<Snippet>                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {
                _ps = _connection.prepareStatement(sql);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] (def) _ps=&quot; + _ps, module);
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>CatalogUrlServlet.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/category/CatalogUrlServlet.java</FilePath>
<LineStart>80</LineStart>
<Snippet>        Delegator delegator = (Delegator) getServletContext().getAttribute(&quot;delegator&quot;);

        String pathInfo = request.getPathInfo();
        List&lt;String&gt; pathElements = StringUtil.split(pathInfo, &quot;/&quot;);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="2CAE5BB62E49298AE77DB426B89FEAB5">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 1985 of DatabaseUtil.java, the method renameColumn() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>1985</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(sql);
        } catch (SQLException e) {
            return &quot;SQL Exception while executing the following:\n&quot; + sql + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>119</LineStart>
<Snippet>            contentRevisionMap.put(&quot;contentId&quot;, contentId);
            contentRevisionMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentRevisionAndItem&quot;, contentRevisionMap);
            keySet = result.keySet();
            iter = keySet.iterator();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="9D9A953C1395325A77B33718EF38FF70">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>WebPosEvents.java</FileName>
<FilePath>specialpurpose/webpos/src/org/ofbiz/webpos/WebPosEvents.java</FilePath>
<LineStart>180</LineStart>
<Snippet>                                    request.setAttribute(&quot;featureSet&quot;, featureSet);
                                    try {
                                        variantTreeMap = dispatcher.runSync(&quot;getProductVariantTree&quot;, 
                                                         UtilMisc.toMap(&quot;productId&quot;, productId, &quot;featureOrder&quot;, featureSet, &quot;productStoreId&quot;, productStoreId));
                                        Map&lt;String, Object&gt; variantTree = UtilGenerics.cast(variantTreeMap.get(&quot;variantTree&quot;));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="AD4A03A804DE8B089FDB3D6FF90FF223">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>RequestHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/RequestHandler.java</FilePath>
<LineStart>128</LineStart>
<Snippet>        }

        String overrideViewUri = RequestHandler.getOverrideViewUri(request.getPathInfo());

        String requestMissingErrorMessage = &quot;Unknown request [&quot; + defaultRequestUri + &quot;]; this request does not exist or cannot be called directly.&quot;;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="85E1C798651A93DD9027DE60094B0802">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 366 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>366</LineStart>
<Snippet>                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {
                _ps = _connection.prepareStatement(sql);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] (def) _ps=&quot; + _ps, module);
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>402</LineStart>
<Snippet>        if(UtilValidate.isEmpty(request.getParameter(&quot;frameContentId&quot;))) {
            if (UtilValidate.isNotEmpty(request.getParameter(&quot;frameExistContentId&quot;)) &amp;&amp; UtilValidate.isNotEmpty(request.getParameter(&quot;frameExistDataResourceId&quot;))) {
                session.setAttribute(&quot;frameExistContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
                session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="E4AC511287706CD55BDDC1A044893624">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>257</LineStart>
<Snippet>        Map&lt;String, Object&gt; results = null;
        try {
            results = dispatcher.runSync(&quot;renderContentPdf&quot;, mapIn);
        } catch (ServiceAuthException e) {
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, e.toString());</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="82ECAA89EAD08EDB55C38788704FB07F">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>TrackingCodeEvents.java</FileName>
<FilePath>applications/marketing/src/org/ofbiz/marketing/tracking/TrackingCodeEvents.java</FilePath>
<LineStart>93</LineStart>
<Snippet>     */
    public static String checkPartnerTrackingCodeUrlParam(HttpServletRequest request, HttpServletResponse response) {
        String trackingCodeId = request.getParameter(&quot;ptc&quot;);

        if (UtilValidate.isNotEmpty(trackingCodeId)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="4815176D3C73A6DA6CBCC8E51BF1948F">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 366 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>366</LineStart>
<Snippet>                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {
                _ps = _connection.prepareStatement(sql);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] (def) _ps=&quot; + _ps, module);
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>LoginEvents.java</FileName>
<FilePath>applications/securityext/src/org/ofbiz/securityext/login/LoginEvents.java</FilePath>
<LineStart>77</LineStart>
<Snippet>
            String username = request.getParameter(&quot;USERNAME&quot;);
            String password = request.getParameter(&quot;PASSWORD&quot;);

            if ((username != null) &amp;&amp; (&quot;true&quot;.equalsIgnoreCase(UtilProperties.getPropertyValue(&quot;security.properties&quot;, &quot;username.lowercase&quot;)))) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="09BBEF3388F1D50014BD459445D2AA3D">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 363 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>363</LineStart>
<Snippet>            _ind = 1;
            if (specifyTypeAndConcur) {
                _ps = _connection.prepareStatement(sql, resultSetType, resultSetConcurrency);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>672</LineStart>
<Snippet>        HttpSession session = request.getSession();
        Locale locale = UtilHttp.getLocale(request);
        String supplierPartyId = request.getParameter(&quot;supplierPartyId_o_0&quot;);
        
        // check the preferred currency of the supplier, if set, use that for the cart, otherwise use system defaults.</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="ED8ADDF84ECCB1BE30958FA948CFA8D4">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 366 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>366</LineStart>
<Snippet>                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {
                _ps = _connection.prepareStatement(sql);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] (def) _ps=&quot; + _ps, module);
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1327</LineStart>
<Snippet>        ShoppingCart cart = null;
        try {
            Map&lt;String, Object&gt; outMap = dispatcher.runSync(&quot;loadCartFromShoppingList&quot;,
                    UtilMisc.&lt;String, Object&gt;toMap(&quot;shoppingListId&quot;, shoppingListId,
                    &quot;userLogin&quot;, userLogin));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="22BAF0B1CFF4A4213B008EE4995B910F">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>WebShoppingCart.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/WebShoppingCart.java</FilePath>
<LineStart>48</LineStart>
<Snippet>                WebSiteWorker.getWebSiteId(request), (locale != null ? locale : ProductStoreWorker.getStoreLocale(request)),
                (currencyUom != null ? currencyUom : ProductStoreWorker.getStoreCurrencyUomId(request)),
                request.getParameter(&quot;billToCustomerPartyId&quot;),
                (request.getParameter(&quot;supplierPartyId&quot;) != null ? request.getParameter(&quot;supplierPartyId&quot;) : request.getParameter(&quot;billFromVendorPartyId&quot;)));
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="CC35A60FFE6E575BBB64B3B3B670EC52">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2609 of DatabaseUtil.java, the method deletePrimaryKey() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2609</LineStart>
<Snippet>            try {
                stmt = connection.createStatement();
                stmt.executeUpdate(sqlBuf.toString());
            } catch (SQLException e) {
                String errMsg = &quot;SQL Exception while executing the following:\n&quot; + sqlBuf.toString() + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceEventHandler.java</FilePath>
<LineStart>337</LineStart>
<Snippet>                dispatcher.runAsync(serviceName, serviceContext);
            } else {
                result = dispatcher.runSync(serviceName, serviceContext);
            }
        } catch (ServiceAuthException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="0C873BD1BD369F128FE5BDC1AC1842C7">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CheckOutEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/CheckOutEvents.java</FilePath>
<LineStart>384</LineStart>
<Snippet>        if (UtilValidate.isNotEmpty(taxAuthPartyGeoIds)) {
            try {
                Map&lt;String, Object&gt; createCustomerTaxAuthInfoResult = dispatcher.runSync(&quot;createCustomerTaxAuthInfo&quot;,
                        UtilMisc.toMap(&quot;partyId&quot;, cart.getPartyId(), &quot;taxAuthPartyGeoIds&quot;, taxAuthPartyGeoIds, &quot;partyTaxId&quot;, partyTaxId, &quot;isExempt&quot;, isExempt));
                ServiceUtil.getMessages(request, createCustomerTaxAuthInfoResult, null);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="80F5E8B2D91306C0260CBB7C60B44F43">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2609 of DatabaseUtil.java, the method deletePrimaryKey() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2609</LineStart>
<Snippet>            try {
                stmt = connection.createStatement();
                stmt.executeUpdate(sqlBuf.toString());
            } catch (SQLException e) {
                String errMsg = &quot;SQL Exception while executing the following:\n&quot; + sqlBuf.toString() + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>119</LineStart>
<Snippet>            contentRevisionMap.put(&quot;contentId&quot;, contentId);
            contentRevisionMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentRevisionAndItem&quot;, contentRevisionMap);
            keySet = result.keySet();
            iter = keySet.iterator();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="90F1713D7427DA0C64438D503FEC1E11">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ProductEvents.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/product/ProductEvents.java</FilePath>
<LineStart>804</LineStart>
<Snippet>        //Timestamp nowTimestamp = UtilDateTime.nowTimestamp();
        //GenericValue userLogin = (GenericValue) request.getSession().getAttribute(&quot;userLogin&quot;);
        String productId = request.getParameter(&quot;productId&quot;);
        String productFeatureId = request.getParameter(&quot;productFeatureId&quot;);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="BCDC0ADE9E70839B308D5F9D4C66BB7D">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>403</LineStart>
<Snippet>            if (UtilValidate.isNotEmpty(request.getParameter(&quot;frameExistContentId&quot;)) &amp;&amp; UtilValidate.isNotEmpty(request.getParameter(&quot;frameExistDataResourceId&quot;))) {
                session.setAttribute(&quot;frameExistContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
                session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            }
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;Required frame image content ID&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="FFF7E2C25D48E005B87790FF396B851A">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>UrlServletHelper.java</FileName>
<FilePath>framework/common/src/org/ofbiz/common/UrlServletHelper.java</FilePath>
<LineStart>125</LineStart>
<Snippet>        }
        if (UtilValidate.isNotEmpty(httpRequest.getParameter(&quot;viewSize&quot;))) {
            viewSize = httpRequest.getParameter(&quot;viewSize&quot;);
        }
        if (UtilValidate.isNotEmpty(httpRequest.getParameter(&quot;viewSort&quot;))) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="3D96F0D6BA7306E033567B38488517FC">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 363 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>363</LineStart>
<Snippet>            _ind = 1;
            if (specifyTypeAndConcur) {
                _ps = _connection.prepareStatement(sql, resultSetType, resultSetConcurrency);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>104</LineStart>
<Snippet>        persistMap.put(&quot;userLogin&quot;, userLogin);
        try {
            Map&lt;String, Object&gt; persistResult = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, persistMap);
            contentId = (String)persistResult.get(&quot;contentId&quot;);
            //request.setAttribute(&quot;contentId&quot;, contentId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="59070C088F553997E38956F96F484E01">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>ShipmentEvents.java</FileName>
<FilePath>applications/product/src/org/ofbiz/shipment/shipment/ShipmentEvents.java</FilePath>
<LineStart>48</LineStart>
<Snippet>        Delegator delegator = (Delegator) request.getAttribute(&quot;delegator&quot;);

        String shipmentId = request.getParameter(&quot;shipmentId&quot;);
        String shipmentRouteSegmentId = request.getParameter(&quot;shipmentRouteSegmentId&quot;);
        String shipmentPackageSeqId = request.getParameter(&quot;shipmentPackageSeqId&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="CE90238A7D64C029B5584E3015780C50">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>575</LineStart>
<Snippet>        while (e.hasMoreElements()) {
            String name = e.nextElement();
            request.setAttribute(name, request.getParameter(name));
        }
    }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="EF01803F1E387DE5ACE74A2EEBB4D5FA">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ICalWorker.java</FileName>
<FilePath>applications/workeffort/src/org/ofbiz/workeffort/workeffort/ICalWorker.java</FilePath>
<LineStart>285</LineStart>
<Snippet>        HttpSession session = request.getSession();
        LocalDispatcher dispatcher = (LocalDispatcher) request.getAttribute(&quot;dispatcher&quot;);
        Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;userLogin&quot;, serviceMap);
        if (ServiceUtil.isError(result) || ServiceUtil.isFailure(result)) {
            return;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="F46E5607CE50B2DE6B1897CE462FD86C">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2264 of DatabaseUtil.java, the method createForeignKey() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2264</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(sqlBuf.toString());
        } catch (SQLException e) {
            return &quot;SQL Exception while executing the following:\n&quot; + sqlBuf.toString() + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>104</LineStart>
<Snippet>        persistMap.put(&quot;userLogin&quot;, userLogin);
        try {
            Map&lt;String, Object&gt; persistResult = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, persistMap);
            contentId = (String)persistResult.get(&quot;contentId&quot;);
            //request.setAttribute(&quot;contentId&quot;, contentId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="376C19A4CD699A794F219286E68796A5">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>LayoutEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/layout/LayoutEvents.java</FilePath>
<LineStart>552</LineStart>
<Snippet>            context.put(&quot;textData&quot;, paramMap.get(&quot;textData&quot;));
            context.put(&quot;contentAssocTypeId&quot;, null);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, context);
            boolean isError = ModelService.RESPOND_ERROR.equals(result.get(ModelService.RESPONSE_MESSAGE));
            if (isError) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="E29FC5592A5519ED4E911EA8A11D4CC4">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>LayoutEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/layout/LayoutEvents.java</FilePath>
<LineStart>483</LineStart>
<Snippet>                Debug.logVerbose(&quot;in createSubContent, context:&quot; + context, module);
            }
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, context);
            boolean isError = ModelService.RESPOND_ERROR.equals(result.get(ModelService.RESPONSE_MESSAGE));
            if (isError) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="AD4A03A804DE8B089FDB3D6FF90FF221">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>RequestHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/RequestHandler.java</FilePath>
<LineStart>119</LineStart>
<Snippet>
        // Grab data from request object to process
        String defaultRequestUri = RequestHandler.getRequestUri(request.getPathInfo());
        if (request.getAttribute(&quot;targetRequestUri&quot;) == null) {
            if (request.getSession().getAttribute(&quot;_PREVIOUS_REQUEST_&quot;) != null) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="45A13ADFD91B8F527A17DBF18B71D70F">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>LayoutEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/layout/LayoutEvents.java</FilePath>
<LineStart>483</LineStart>
<Snippet>                Debug.logVerbose(&quot;in createSubContent, context:&quot; + context, module);
            }
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, context);
            boolean isError = ModelService.RESPOND_ERROR.equals(result.get(ModelService.RESPONSE_MESSAGE));
            if (isError) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="D5EA236720C47EC4B557F5E0CCE77196">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2085 of DatabaseUtil.java, the method repairColumnSize() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2085</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(sql2);
        } catch (SQLException e) {
            String thisMsg = &quot;SQL Exception while executing the following:\n&quot; + sql2 + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>119</LineStart>
<Snippet>            contentRevisionMap.put(&quot;contentId&quot;, contentId);
            contentRevisionMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentRevisionAndItem&quot;, contentRevisionMap);
            keySet = result.keySet();
            iter = keySet.iterator();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="7F40BFCDDBA639EEBE44812A0F79432E">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2443 of DatabaseUtil.java, the method deleteForeignKey() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2443</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(sqlBuf.toString());
        } catch (SQLException e) {
            return &quot;SQL Exception while executing the following:\n&quot; + sqlBuf.toString() + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>505</LineStart>
<Snippet>        Map&lt;String, Object&gt; ftlResults = null;
        try {
            ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
        } catch (ServiceAuthException e) {
            String msg = e.getMessage();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="955E265A838B7B9C603898D249A47DF1">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>PayPalEvents.java</FileName>
<FilePath>applications/accounting/src/org/ofbiz/accounting/thirdparty/paypal/PayPalEvents.java</FilePath>
<LineStart>497</LineStart>
<Snippet>        try {
            String comment = UtilProperties.getMessage(resource, &quot;AccountingPaymentReceiveViaPayPal&quot;, locale);
            results = dispatcher.runSync(&quot;createPaymentFromPreference&quot;, UtilMisc.toMap(&quot;userLogin&quot;, userLogin,
                    &quot;orderPaymentPreferenceId&quot;, paymentPreference.get(&quot;orderPaymentPreferenceId&quot;), &quot;comments&quot;, comment));
        } catch (GenericServiceException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="343C2B04A7ADA360245D37BFF74DC587">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>559</LineStart>
<Snippet>        session.setAttribute(&quot;_CLIENT_REQUEST_&quot;, fullRequestUrl.toString());
        session.setAttribute(&quot;_CLIENT_USER_AGENT_&quot;, request.getHeader(&quot;User-Agent&quot;) != null ? request.getHeader(&quot;User-Agent&quot;) : &quot;&quot;);
        session.setAttribute(&quot;_CLIENT_REFERER_&quot;, request.getHeader(&quot;Referer&quot;) != null ? request.getHeader(&quot;Referer&quot;) : &quot;&quot;);

        session.setAttribute(&quot;_CLIENT_FORWARDED_FOR_&quot;, request.getHeader(&quot;X-Forwarded-For&quot;));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="368C1193595D015E27CBB48D8A262365">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>DataEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/data/DataEvents.java</FilePath>
<LineStart>334</LineStart>
<Snippet>            mode = &quot;CREATE&quot;;
            try {
                result = dispatcher.runSync(&quot;createDataResource&quot;, serviceInMap);
            } catch (GenericServiceException e) {
                String errMsg = UtilProperties.getMessage(DataEvents.err_resource, &quot;dataEvents.error_call_create_service&quot;, locale);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="7132107E7BF40A3D631F2FD0856C2B12">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 1771 of DatabaseUtil.java, the method createTable() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>1771</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(sqlBuf.toString());
        } catch (SQLException e) {
            return &quot;SQL Exception while executing the following:\n&quot; + sqlBuf.toString() + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>505</LineStart>
<Snippet>        Map&lt;String, Object&gt; ftlResults = null;
        try {
            ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
        } catch (ServiceAuthException e) {
            String msg = e.getMessage();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="AD53CBB6E926653EC8E96DBD7069A867">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CmsEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/cms/CmsEvents.java</FilePath>
<LineStart>107</LineStart>
<Snippet>            pathInfo = overrideViewUri;
        } else {
            pathInfo = request.getPathInfo();
            if (targetRequest.equals(actualRequest) &amp;&amp; pathInfo != null) {
                // was called directly -- path info is everything after the request</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="BCB31DDEEF65581ADC2B25A681F4FB6D">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 1985 of DatabaseUtil.java, the method renameColumn() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>1985</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(sql);
        } catch (SQLException e) {
            return &quot;SQL Exception while executing the following:\n&quot; + sql + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceEventHandler.java</FilePath>
<LineStart>337</LineStart>
<Snippet>                dispatcher.runAsync(serviceName, serviceContext);
            } else {
                result = dispatcher.runSync(serviceName, serviceContext);
            }
        } catch (ServiceAuthException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="8FE859B5669BF3509B560BFBBE2C6F33">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>OrderEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/order/OrderEvents.java</FilePath>
<LineStart>125</LineStart>
<Snippet>                        contextMap.put(&quot;userLogin&quot;, userLogin);
                        try {
                            resultMap = dispatcher.runSync(&quot;cancelOrderItem&quot;, contextMap);

                            if (ServiceUtil.isError(resultMap)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="40428B53A00F82C23F07917655CB2F55">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>DataEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/data/DataEvents.java</FilePath>
<LineStart>323</LineStart>
<Snippet>        if (mode != null &amp;&amp; mode.equals(&quot;UPDATE&quot;)) {
            try {
                result = dispatcher.runSync(&quot;updateDataResource&quot;, serviceInMap);
            } catch (GenericServiceException e) {
                String errMsg = UtilProperties.getMessage(DataEvents.err_resource, &quot;dataEvents.error_call_update_service&quot;, locale);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="E17C908755D9A64D8C6105FE07BCF94A">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 363 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>363</LineStart>
<Snippet>            _ind = 1;
            if (specifyTypeAndConcur) {
                _ps = _connection.prepareStatement(sql, resultSetType, resultSetConcurrency);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>559</LineStart>
<Snippet>        session.setAttribute(&quot;_CLIENT_REQUEST_&quot;, fullRequestUrl.toString());
        session.setAttribute(&quot;_CLIENT_USER_AGENT_&quot;, request.getHeader(&quot;User-Agent&quot;) != null ? request.getHeader(&quot;User-Agent&quot;) : &quot;&quot;);
        session.setAttribute(&quot;_CLIENT_REFERER_&quot;, request.getHeader(&quot;Referer&quot;) != null ? request.getHeader(&quot;Referer&quot;) : &quot;&quot;);

        session.setAttribute(&quot;_CLIENT_FORWARDED_FOR_&quot;, request.getHeader(&quot;X-Forwarded-For&quot;));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="4FDDF0CB239B5489AD49E6129EBE6B3E">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>LoginEvents.java</FileName>
<FilePath>applications/securityext/src/org/ofbiz/securityext/login/LoginEvents.java</FilePath>
<LineStart>77</LineStart>
<Snippet>
            String username = request.getParameter(&quot;USERNAME&quot;);
            String password = request.getParameter(&quot;PASSWORD&quot;);

            if ((username != null) &amp;&amp; (&quot;true&quot;.equalsIgnoreCase(UtilProperties.getPropertyValue(&quot;security.properties&quot;, &quot;username.lowercase&quot;)))) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="9C6A1F2E5C1B175D5AD098F15803648A">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 366 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>366</LineStart>
<Snippet>                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {
                _ps = _connection.prepareStatement(sql);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] (def) _ps=&quot; + _ps, module);
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>409</LineStart>
<Snippet>        }
        
        String frameContentId = request.getParameter(&quot;frameContentId&quot;);
        Delegator delegator = (Delegator) request.getAttribute(&quot;delegator&quot;);
        </Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="C7D0513CF6FA341162BDA1F920229F47">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1527</LineStart>
<Snippet>        Locale locale = UtilHttp.getLocale(request);

        String productStoreId = request.getParameter(&quot;productStoreId&quot;);

        if (UtilValidate.isNotEmpty(productStoreId)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="A5AD0BBDF5F9CC5E0B5793EB005F2E89">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2264 of DatabaseUtil.java, the method createForeignKey() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2264</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(sqlBuf.toString());
        } catch (SQLException e) {
            return &quot;SQL Exception while executing the following:\n&quot; + sqlBuf.toString() + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilObject.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilObject.java</FilePath>
<LineStart>137</LineStart>
<Snippet>                ObjectInputStream ois = new ObjectInputStream(bis, Thread.currentThread().getContextClassLoader());
                try {
                    obj = ois.readObject();
                } catch (ClassNotFoundException e) {
                    Debug.logError(e, module);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="CF1452C616DDC9B1E94808E87DFFC336">
                            <Category>SQL Injection</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>ContextFilter.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ContextFilter.java</FilePath>
<LineStart>485</LineStart>
<Snippet>        String serverId = (String) config.getServletContext().getAttribute(&quot;_serverId&quot;);
        if (serverId == null) {
            serverId = config.getServletContext().getInitParameter(&quot;ofbizServerName&quot;);
            config.getServletContext().setAttribute(&quot;_serverId&quot;, serverId);
        }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57" iid="610B166D20F27C43EA90227ED2FA3AEF">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 1820 of DatabaseUtil.java, the method deleteTable() invokes a SQL query built using potentially unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>1820</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(sqlBuf.toString());
        } catch (SQLException e) {
            String errMsg = &quot;SQL Exception while executing the following:\n&quot; + sqlBuf.toString() + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="6ACC8CF15D20EE6B390BBC378E044634">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 366 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>366</LineStart>
<Snippet>                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {
                _ps = _connection.prepareStatement(sql);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] (def) _ps=&quot; + _ps, module);
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>556</LineStart>
<Snippet>
        session.setAttribute(&quot;_WEBAPP_NAME_&quot;, UtilHttp.getApplicationName(request));
        session.setAttribute(&quot;_CLIENT_LOCALE_&quot;, request.getLocale());
        session.setAttribute(&quot;_CLIENT_REQUEST_&quot;, fullRequestUrl.toString());
        session.setAttribute(&quot;_CLIENT_USER_AGENT_&quot;, request.getHeader(&quot;User-Agent&quot;) != null ? request.getHeader(&quot;User-Agent&quot;) : &quot;&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="52BC5C4745A1AA7BA5D35C79EE6E8506">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>221</LineStart>
<Snippet>                sumContext.put(&quot;mapKey&quot;, &quot;SUMMARY&quot;);
                sumContext.put(&quot;dataTemplateTypeId&quot;, &quot;NONE&quot;);
                Map&lt;String, Object&gt; sumResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, sumContext);
                isError = ModelService.RESPOND_ERROR.equals(sumResults.get(ModelService.RESPONSE_MESSAGE));
                if (isError) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="CA966FF0495CA5E7EA012F6FF1D5D756">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>WebPosEvents.java</FileName>
<FilePath>specialpurpose/webpos/src/org/ofbiz/webpos/WebPosEvents.java</FilePath>
<LineStart>113</LineStart>
<Snippet>
            if (UtilValidate.isNotEmpty(posTerminalId)) {
                webPosSession = new WebPosSession(posTerminalId, null, userLogin, request.getLocale(), productStoreId, facilityId, currencyUomId, delegator, dispatcher, cart);
                session.setAttribute(&quot;webPosSession&quot;, webPosSession);
            } else {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="493C926253850B5856CCB2BD86BB6421">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>592</LineStart>
<Snippet>        requestUrl.append(request.getRequestURI());
        if (request.getQueryString() != null) {
            requestUrl.append(&quot;?&quot; + request.getQueryString());
        }
        return requestUrl;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="2AAEBE8C60EA96A6C7DED9F08DF47983">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 3182 of DatabaseUtil.java, the method updateCharacterSetAndCollation() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>3182</LineStart>
<Snippet>                try {
                    stmt = connection.createStatement();
                    stmt.executeUpdate(sqlBuf.toString());
                } catch (SQLException e) {
                    String errMsg = &quot;SQL Exception while executing the following:\n&quot; + sqlBuf + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>505</LineStart>
<Snippet>        Map&lt;String, Object&gt; ftlResults = null;
        try {
            ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
        } catch (ServiceAuthException e) {
            String msg = e.getMessage();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="E8D84D5DB2E7CF216DC7296BC0D79202">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>GenericWebEvent.java</FileName>
<FilePath>framework/webtools/src/org/ofbiz/webtools/GenericWebEvent.java</FilePath>
<LineStart>183</LineStart>
<Snippet>            }

            String fval = request.getParameter(field.getName());
            if (UtilValidate.isNotEmpty(fval)) {
                try {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="DA0BD87A71C0244245F0442855D10BAC">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 1771 of DatabaseUtil.java, the method createTable() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>1771</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(sqlBuf.toString());
        } catch (SQLException e) {
            return &quot;SQL Exception while executing the following:\n&quot; + sqlBuf.toString() + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilObject.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilObject.java</FilePath>
<LineStart>137</LineStart>
<Snippet>                ObjectInputStream ois = new ObjectInputStream(bis, Thread.currentThread().getContextClassLoader());
                try {
                    obj = ois.readObject();
                } catch (ClassNotFoundException e) {
                    Debug.logError(e, module);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="7389E8CC798BB92653F3725702A99C3A">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>ProductEvents.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/product/ProductEvents.java</FilePath>
<LineStart>805</LineStart>
<Snippet>        //GenericValue userLogin = (GenericValue) request.getSession().getAttribute(&quot;userLogin&quot;);
        String productId = request.getParameter(&quot;productId&quot;);
        String productFeatureId = request.getParameter(&quot;productFeatureId&quot;);

        if (UtilValidate.isEmpty(productId) || UtilValidate.isEmpty(productFeatureId)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="7D785468C4642293A5433F6F15BFC653">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 363 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>363</LineStart>
<Snippet>            _ind = 1;
            if (specifyTypeAndConcur) {
                _ps = _connection.prepareStatement(sql, resultSetType, resultSetConcurrency);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>312</LineStart>
<Snippet>            contentCtx.put(&quot;fromDate&quot;, UtilDateTime.nowTimestamp());
            contentCtx.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; contentResult = dispatcher.runSync(&quot;createContent&quot;, contentCtx);
            contentId = contentResult.get(&quot;contentId&quot;).toString();
        } catch (Exception e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="A2850054386052D16D5B77E9E96DC4CB">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>WebPosEvents.java</FileName>
<FilePath>specialpurpose/webpos/src/org/ofbiz/webpos/WebPosEvents.java</FilePath>
<LineStart>175</LineStart>
<Snippet>                            String productStoreId = webPosSession.getProductStoreId();
                            try {
                                featureMap = dispatcher.runSync(&quot;getProductFeatureSet&quot;, UtilMisc.toMap(&quot;productId&quot;, productId));
                                Set&lt;String&gt; featureSet = UtilGenerics.cast(featureMap.get(&quot;featureSet&quot;));
                                if (UtilValidate.isNotEmpty(featureSet)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="E09D97538754F3C0D348D4D6B1CD2059">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CheckOutEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/CheckOutEvents.java</FilePath>
<LineStart>466</LineStart>
<Snippet>        }
        
        String issuerId = request.getParameter(&quot;issuerId&quot;);
        if (UtilValidate.isNotEmpty(issuerId)) {
            request.setAttribute(&quot;issuerId&quot;, issuerId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="EBEE9A642459BABD99C754BE42E973C0">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 366 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>366</LineStart>
<Snippet>                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {
                _ps = _connection.prepareStatement(sql);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] (def) _ps=&quot; + _ps, module);
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>312</LineStart>
<Snippet>            contentCtx.put(&quot;fromDate&quot;, UtilDateTime.nowTimestamp());
            contentCtx.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; contentResult = dispatcher.runSync(&quot;createContent&quot;, contentCtx);
            contentId = contentResult.get(&quot;contentId&quot;).toString();
        } catch (Exception e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="681EFD76D7D9AF632EED65B56E9BB8DD">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>402</LineStart>
<Snippet>        if(UtilValidate.isEmpty(request.getParameter(&quot;frameContentId&quot;))) {
            if (UtilValidate.isNotEmpty(request.getParameter(&quot;frameExistContentId&quot;)) &amp;&amp; UtilValidate.isNotEmpty(request.getParameter(&quot;frameExistDataResourceId&quot;))) {
                session.setAttribute(&quot;frameExistContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
                session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="E0C870A2A16D37DA40AE4F9BF4295C7F">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>672</LineStart>
<Snippet>        HttpSession session = request.getSession();
        Locale locale = UtilHttp.getLocale(request);
        String supplierPartyId = request.getParameter(&quot;supplierPartyId_o_0&quot;);
        
        // check the preferred currency of the supplier, if set, use that for the cart, otherwise use system defaults.</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="52BC5C4745A1AA7BA5D35C79EE6E8507">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>221</LineStart>
<Snippet>                sumContext.put(&quot;mapKey&quot;, &quot;SUMMARY&quot;);
                sumContext.put(&quot;dataTemplateTypeId&quot;, &quot;NONE&quot;);
                Map&lt;String, Object&gt; sumResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, sumContext);
                isError = ModelService.RESPOND_ERROR.equals(sumResults.get(ModelService.RESPONSE_MESSAGE));
                if (isError) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="11F4D687DA6FD88BD1F22CFA0C3E5B7E">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 3182 of DatabaseUtil.java, the method updateCharacterSetAndCollation() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>3182</LineStart>
<Snippet>                try {
                    stmt = connection.createStatement();
                    stmt.executeUpdate(sqlBuf.toString());
                } catch (SQLException e) {
                    String errMsg = &quot;SQL Exception while executing the following:\n&quot; + sqlBuf + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceEventHandler.java</FilePath>
<LineStart>337</LineStart>
<Snippet>                dispatcher.runAsync(serviceName, serviceContext);
            } else {
                result = dispatcher.runSync(serviceName, serviceContext);
            }
        } catch (ServiceAuthException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="AD4A03A804DE8B089FDB3D6FF90FF222">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>RequestHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/RequestHandler.java</FilePath>
<LineStart>128</LineStart>
<Snippet>        }

        String overrideViewUri = RequestHandler.getOverrideViewUri(request.getPathInfo());

        String requestMissingErrorMessage = &quot;Unknown request [&quot; + defaultRequestUri + &quot;]; this request does not exist or cannot be called directly.&quot;;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57" iid="F8CA14C542E707AC9B059E09FD59EA61">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 38 of CursorResultSet.java, the method CursorResultSet() invokes a SQL query built using potentially unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CursorResultSet.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/CursorResultSet.java</FilePath>
<LineStart>38</LineStart>
<Snippet>        query = &quot;FETCH FORWARD &quot; + fetchSize + &quot; IN &quot; + cursorName;
        System.err.println(&quot;executing page fetch(1)&quot;);
        rs = stmt.executeQuery(query);
    }
</Snippet>
                            </Primary>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="9C9F43D63C9238B40860AD0931ED83B9">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>GenericWebEvent.java</FileName>
<FilePath>framework/webtools/src/org/ofbiz/webtools/GenericWebEvent.java</FilePath>
<LineStart>183</LineStart>
<Snippet>            }

            String fval = request.getParameter(field.getName());
            if (UtilValidate.isNotEmpty(fval)) {
                try {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="D069B7A6FCF639A3F4DD2D27D77E34D2">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>312</LineStart>
<Snippet>            contentCtx.put(&quot;fromDate&quot;, UtilDateTime.nowTimestamp());
            contentCtx.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; contentResult = dispatcher.runSync(&quot;createContent&quot;, contentCtx);
            contentId = contentResult.get(&quot;contentId&quot;).toString();
        } catch (Exception e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="51EE1002DE653648A3308D3A7914F53B">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceMultiEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceMultiEventHandler.java</FilePath>
<LineStart>308</LineStart>
<Snippet>                Map&lt;String, Object&gt; result = null;
                try {
                    result = dispatcher.runSync(serviceName, serviceContext);
                } catch (ServiceAuthException e) {
                    // not logging since the service engine already did</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="834B58C60141ED921EE3DA26DFF6A4DE">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>184</LineStart>
<Snippet>
    public static Map&lt;String, Object&gt; getPathInfoOnlyParameterMap(HttpServletRequest request, Set&lt;? extends String&gt; nameSet, Boolean onlyIncludeOrSkip) {
        return getPathInfoOnlyParameterMap(request.getPathInfo(), nameSet, onlyIncludeOrSkip);
    }
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="3C8570D4D3B14779EE62170709A37163">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2264 of DatabaseUtil.java, the method createForeignKey() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2264</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(sqlBuf.toString());
        } catch (SQLException e) {
            return &quot;SQL Exception while executing the following:\n&quot; + sqlBuf.toString() + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>575</LineStart>
<Snippet>        while (e.hasMoreElements()) {
            String name = e.nextElement();
            request.setAttribute(name, request.getParameter(name));
        }
    }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="CDE7DE75619C4F60CFE87061BA6AE112">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>348</LineStart>
<Snippet>        }
        String frameContentId = request.getParameter(&quot;frameContentId&quot;);
        String frameDataResourceId = request.getParameter(&quot;frameDataResourceId&quot;);
        
        if (UtilValidate.isEmpty(request.getParameter(&quot;imageWidth&quot;)) || UtilValidate.isEmpty(request.getParameter(&quot;imageHeight&quot;))) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="17604E6F21E413FADA3159759444C926">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>564</LineStart>
<Snippet>        session.setAttribute(&quot;_CLIENT_REMOTE_ADDR_&quot;, request.getRemoteAddr());
        session.setAttribute(&quot;_CLIENT_REMOTE_HOST_&quot;, request.getRemoteHost());
        session.setAttribute(&quot;_CLIENT_REMOTE_USER_&quot;, request.getRemoteUser());
    }
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="BE85C13D91D6B56654D9CE37D1994B8E">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 363 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>363</LineStart>
<Snippet>            _ind = 1;
            if (specifyTypeAndConcur) {
                _ps = _connection.prepareStatement(sql, resultSetType, resultSetConcurrency);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>693</LineStart>
<Snippet>            return &quot;error&quot;;
        }
        String orderId = request.getParameter(&quot;orderId_o_0&quot;);
        // set the order id if supplied
        if (UtilValidate.isNotEmpty(orderId)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="A2822F1E4A2A6BEA4F69C2FCCB6ECD11">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2917 of DatabaseUtil.java, the method createForeignKeyIndex() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2917</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(createIndexSql);
        } catch (SQLException e) {
            return &quot;SQL Exception while executing the following:\n&quot; + createIndexSql + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>575</LineStart>
<Snippet>        while (e.hasMoreElements()) {
            String name = e.nextElement();
            request.setAttribute(name, request.getParameter(name));
        }
    }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="F9F073FE8736A4C465275180D2ADE00B">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2917 of DatabaseUtil.java, the method createForeignKeyIndex() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2917</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(createIndexSql);
        } catch (SQLException e) {
            return &quot;SQL Exception while executing the following:\n&quot; + createIndexSql + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceMultiEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceMultiEventHandler.java</FilePath>
<LineStart>308</LineStart>
<Snippet>                Map&lt;String, Object&gt; result = null;
                try {
                    result = dispatcher.runSync(serviceName, serviceContext);
                } catch (ServiceAuthException e) {
                    // not logging since the service engine already did</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="1AA50EB62BAB0B7AF4267A480BD55008">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>LayoutEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/layout/LayoutEvents.java</FilePath>
<LineStart>114</LineStart>
<Snippet>            }

            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, context);
            //Debug.logVerbose(&quot;in createLayoutImage, result:&quot; + result, module);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="44AC38A583ACF69397B44C59E89BBFC5">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>CommonEvents.java</FileName>
<FilePath>framework/common/src/org/ofbiz/common/CommonEvents.java</FilePath>
<LineStart>141</LineStart>
<Snippet>        Security security = (Security) request.getAttribute(&quot;security&quot;);
        GenericValue userLogin = (GenericValue) request.getSession().getAttribute(&quot;userLogin&quot;);
        String visitId = request.getParameter(&quot;visitId&quot;);
        if (visitId != null) request.setAttribute(&quot;visitId&quot;, visitId);
        if (security.hasPermission(&quot;SEND_CONTROL_APPLET&quot;, userLogin)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="0915F0C6431DC72BA70F43FEC4069CB1">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>563</LineStart>
<Snippet>        session.setAttribute(&quot;_CLIENT_FORWARDED_FOR_&quot;, request.getHeader(&quot;X-Forwarded-For&quot;));
        session.setAttribute(&quot;_CLIENT_REMOTE_ADDR_&quot;, request.getRemoteAddr());
        session.setAttribute(&quot;_CLIENT_REMOTE_HOST_&quot;, request.getRemoteHost());
        session.setAttribute(&quot;_CLIENT_REMOTE_USER_&quot;, request.getRemoteUser());
    }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="0E32BB8C9F795EA56A6FD88CFBA8FE62">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>WebShoppingCart.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/WebShoppingCart.java</FilePath>
<LineStart>49</LineStart>
<Snippet>                (currencyUom != null ? currencyUom : ProductStoreWorker.getStoreCurrencyUomId(request)),
                request.getParameter(&quot;billToCustomerPartyId&quot;),
                (request.getParameter(&quot;supplierPartyId&quot;) != null ? request.getParameter(&quot;supplierPartyId&quot;) : request.getParameter(&quot;billFromVendorPartyId&quot;)));

        HttpSession session = request.getSession(true);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="42C880AB2A74E188C293AD4FCCF96FB7">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>ShipmentEvents.java</FileName>
<FilePath>applications/product/src/org/ofbiz/shipment/shipment/ShipmentEvents.java</FilePath>
<LineStart>49</LineStart>
<Snippet>
        String shipmentId = request.getParameter(&quot;shipmentId&quot;);
        String shipmentRouteSegmentId = request.getParameter(&quot;shipmentRouteSegmentId&quot;);
        String shipmentPackageSeqId = request.getParameter(&quot;shipmentPackageSeqId&quot;);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="B18AFB926A71FC9A026A9560CA7BF86E">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2699 of DatabaseUtil.java, the method createDeclaredIndex() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2699</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(createIndexSql);
        } catch (SQLException e) {
            return &quot;SQL Exception while executing the following:\n&quot; + createIndexSql + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>505</LineStart>
<Snippet>        Map&lt;String, Object&gt; ftlResults = null;
        try {
            ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
        } catch (ServiceAuthException e) {
            String msg = e.getMessage();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="CBAB49B7C78B5F220639482BCE61F1D6">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>WebPosEvents.java</FileName>
<FilePath>specialpurpose/webpos/src/org/ofbiz/webpos/WebPosEvents.java</FilePath>
<LineStart>58</LineStart>
<Snippet>        
        // get the posTerminalId
        String posTerminalId = (String) request.getParameter(&quot;posTerminalId&quot;);
        session.removeAttribute(&quot;shoppingCart&quot;);
        session.removeAttribute(&quot;webPosSession&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="D0E8F0FD6C942D1D76EB6E38D460A5F5">
                            <Category>SQL Injection</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ContextFilter.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ContextFilter.java</FilePath>
<LineStart>389</LineStart>
<Snippet>        }
        // get the unique name of this dispatcher
        String dispatcherName = servletContext.getInitParameter(&quot;localDispatcherName&quot;);

        if (dispatcherName == null) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="17604E6F21E413FADA3159759444C927">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>564</LineStart>
<Snippet>        session.setAttribute(&quot;_CLIENT_REMOTE_ADDR_&quot;, request.getRemoteAddr());
        session.setAttribute(&quot;_CLIENT_REMOTE_HOST_&quot;, request.getRemoteHost());
        session.setAttribute(&quot;_CLIENT_REMOTE_USER_&quot;, request.getRemoteUser());
    }
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="A6E7D86B493FA69B18F8AFE274B7EF37">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>OrderEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/order/OrderEvents.java</FilePath>
<LineStart>58</LineStart>
<Snippet>        Delegator delegator = (Delegator) request.getAttribute(&quot;delegator&quot;);
        GenericValue userLogin = (GenericValue) session.getAttribute(&quot;userLogin&quot;);
        String dataResourceId = request.getParameter(&quot;dataResourceId&quot;);

        try {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="0CFDBB302A31AAEB4A7E3135FCB895B0">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>AbstractOFBizAuthenticationHandler.java</FileName>
<FilePath>specialpurpose/ldap/src/org/ofbiz/ldap/commons/AbstractOFBizAuthenticationHandler.java</FilePath>
<LineStart>129</LineStart>
<Snippet>
        try {
            loginResult = dispatcher.runSync(&quot;userLogin&quot;, UtilMisc.toMap(&quot;login.username&quot;, username, &quot;login.password&quot;, password, &quot;visitId&quot;, visitId, &quot;locale&quot;, UtilHttp.getLocale(request)));
        } catch (GenericServiceException e) {
            throw new GenericServiceException(e.getLocalizedMessage());</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="57D452FE2653EA60A5DE24BDCA9D8893">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>RomeEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/RomeEventHandler.java</FilePath>
<LineStart>70</LineStart>
<Snippet>        // generate the main and entry links
        String entryLinkReq = request.getParameter(&quot;entryLinkReq&quot;);
        String mainLinkReq = request.getParameter(&quot;mainLinkReq&quot;);

        // create the links; but the query string must be created by the service</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="DEF49D732AFD6494B397D14192509C01">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>347</LineStart>
<Snippet>            return &quot;error&quot;;
        }
        String frameContentId = request.getParameter(&quot;frameContentId&quot;);
        String frameDataResourceId = request.getParameter(&quot;frameDataResourceId&quot;);
        </Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="F53AA509042B962A7AAC252B4887C2A0">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1354</LineStart>
<Snippet>        ShoppingCart cart = null;
        try {
            Map&lt;String, Object&gt; outMap = dispatcher.runSync(&quot;loadCartFromQuote&quot;,
                    UtilMisc.&lt;String, Object&gt;toMap(&quot;quoteId&quot;, quoteId,
                            &quot;applyQuoteAdjustments&quot;, &quot;true&quot;,</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="6CF2022CE2DC956A5E04561DA57DFC36">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2443 of DatabaseUtil.java, the method deleteForeignKey() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2443</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(sqlBuf.toString());
        } catch (SQLException e) {
            return &quot;SQL Exception while executing the following:\n&quot; + sqlBuf.toString() + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceMultiEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceMultiEventHandler.java</FilePath>
<LineStart>308</LineStart>
<Snippet>                Map&lt;String, Object&gt; result = null;
                try {
                    result = dispatcher.runSync(serviceName, serviceContext);
                } catch (ServiceAuthException e) {
                    // not logging since the service engine already did</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="B116A41100BF18B6EBD972A5922F6338">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CommonEvents.java</FileName>
<FilePath>framework/common/src/org/ofbiz/common/CommonEvents.java</FilePath>
<LineStart>179</LineStart>
<Snippet>     * setting should be passed as a &quot;newLocale&quot; request parameter. */
    public static String setSessionLocale(HttpServletRequest request, HttpServletResponse response) {
        String localeString = request.getParameter(&quot;newLocale&quot;);
        if (UtilValidate.isNotEmpty(localeString)) {
            UtilHttp.setLocale(request, localeString);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="E5E00B96CB9E5C4939972E0CE30D72DB">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 363 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>363</LineStart>
<Snippet>            _ind = 1;
            if (specifyTypeAndConcur) {
                _ps = _connection.prepareStatement(sql, resultSetType, resultSetConcurrency);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>558</LineStart>
<Snippet>        session.setAttribute(&quot;_CLIENT_LOCALE_&quot;, request.getLocale());
        session.setAttribute(&quot;_CLIENT_REQUEST_&quot;, fullRequestUrl.toString());
        session.setAttribute(&quot;_CLIENT_USER_AGENT_&quot;, request.getHeader(&quot;User-Agent&quot;) != null ? request.getHeader(&quot;User-Agent&quot;) : &quot;&quot;);
        session.setAttribute(&quot;_CLIENT_REFERER_&quot;, request.getHeader(&quot;Referer&quot;) != null ? request.getHeader(&quot;Referer&quot;) : &quot;&quot;);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="D96AB8C223006E9EF9A9CB522D3046D1">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>CheckOutEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/CheckOutEvents.java</FilePath>
<LineStart>466</LineStart>
<Snippet>        }
        
        String issuerId = request.getParameter(&quot;issuerId&quot;);
        if (UtilValidate.isNotEmpty(issuerId)) {
            request.setAttribute(&quot;issuerId&quot;, issuerId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="05F7B97B0E5F1062B0AF3F4A4CAD62C5">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>CoreEvents.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/CoreEvents.java</FilePath>
<LineStart>412</LineStart>
<Snippet>        try {
            if (null!=request.getParameter(&quot;_RUN_SYNC_&quot;) &amp;&amp; request.getParameter(&quot;_RUN_SYNC_&quot;).equals(&quot;Y&quot;)) {
                syncServiceResult = dispatcher.runSync(serviceName, serviceContext);
            } else {
                dispatcher.schedule(jobName, poolName, serviceName, serviceContext, startTime, frequency, interval, count, endTime, maxRetry);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="1CF40E5126422A80FFDE6C501D91CCF4">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2522 of DatabaseUtil.java, the method createPrimaryKey() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2522</LineStart>
<Snippet>            try {
                stmt = connection.createStatement();
                stmt.executeUpdate(sqlBuf.toString());
            } catch (SQLException e) {
                return &quot;SQL Exception while executing the following:\n&quot; + sqlBuf.toString() + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>119</LineStart>
<Snippet>            contentRevisionMap.put(&quot;contentId&quot;, contentId);
            contentRevisionMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentRevisionAndItem&quot;, contentRevisionMap);
            keySet = result.keySet();
            iter = keySet.iterator();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="C97314435E6EBEE18AAE16B8D0D5013A">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>CommonEvents.java</FileName>
<FilePath>framework/common/src/org/ofbiz/common/CommonEvents.java</FilePath>
<LineStart>231</LineStart>
<Snippet>    /** Simple event to set the users per-session currency uom value */
    public static String setSessionCurrencyUom(HttpServletRequest request, HttpServletResponse response) {
        String currencyUom = request.getParameter(&quot;currencyUom&quot;);
        if (UtilValidate.isNotEmpty(currencyUom)) {
            // update the session</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="2C8652B22812A709AD4A3B6821826B96">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 363 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>363</LineStart>
<Snippet>            _ind = 1;
            if (specifyTypeAndConcur) {
                _ps = _connection.prepareStatement(sql, resultSetType, resultSetConcurrency);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1327</LineStart>
<Snippet>        ShoppingCart cart = null;
        try {
            Map&lt;String, Object&gt; outMap = dispatcher.runSync(&quot;loadCartFromShoppingList&quot;,
                    UtilMisc.&lt;String, Object&gt;toMap(&quot;shoppingListId&quot;, shoppingListId,
                    &quot;userLogin&quot;, userLogin));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="6ED40AFB049B81A4CB1BF2A202B59114">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>GoogleBaseSearchEvents.java</FileName>
<FilePath>specialpurpose/googlebase/src/org/ofbiz/googlebase/GoogleBaseSearchEvents.java</FilePath>
<LineStart>122</LineStart>
<Snippet>                    inMap.put(&quot;productStoreId&quot;, productStoreId);
                    inMap.put(&quot;allowRecommended&quot;, allowRecommended);
                    Map&lt;String, Object&gt; exportResult = dispatcher.runSync(&quot;exportToGoogle&quot;, inMap);
                    if (ServiceUtil.isError(exportResult)) {
                        List&lt;String&gt; errorMessages = UtilGenerics.checkList(exportResult.get(ModelService.ERROR_MESSAGE_LIST), String.class);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="B0686DC4DAA7D1BCB3D408585153B12B">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>ShipmentEvents.java</FileName>
<FilePath>applications/product/src/org/ofbiz/shipment/shipment/ShipmentEvents.java</FilePath>
<LineStart>50</LineStart>
<Snippet>        String shipmentId = request.getParameter(&quot;shipmentId&quot;);
        String shipmentRouteSegmentId = request.getParameter(&quot;shipmentRouteSegmentId&quot;);
        String shipmentPackageSeqId = request.getParameter(&quot;shipmentPackageSeqId&quot;);

        GenericValue shipmentPackageRouteSeg = null;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="7228951FBABEB7B2AB57DEBDA6041461">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>556</LineStart>
<Snippet>
        session.setAttribute(&quot;_WEBAPP_NAME_&quot;, UtilHttp.getApplicationName(request));
        session.setAttribute(&quot;_CLIENT_LOCALE_&quot;, request.getLocale());
        session.setAttribute(&quot;_CLIENT_REQUEST_&quot;, fullRequestUrl.toString());
        session.setAttribute(&quot;_CLIENT_USER_AGENT_&quot;, request.getHeader(&quot;User-Agent&quot;) != null ? request.getHeader(&quot;User-Agent&quot;) : &quot;&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="5AADAE0CA361F5BB90549CDEFB5AF963">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>RequestHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/RequestHandler.java</FilePath>
<LineStart>119</LineStart>
<Snippet>
        // Grab data from request object to process
        String defaultRequestUri = RequestHandler.getRequestUri(request.getPathInfo());
        if (request.getAttribute(&quot;targetRequestUri&quot;) == null) {
            if (request.getSession().getAttribute(&quot;_PREVIOUS_REQUEST_&quot;) != null) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="CC0E6004E3E40AD5B7F337DA4A160687">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>DataEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/data/DataEvents.java</FilePath>
<LineStart>334</LineStart>
<Snippet>            mode = &quot;CREATE&quot;;
            try {
                result = dispatcher.runSync(&quot;createDataResource&quot;, serviceInMap);
            } catch (GenericServiceException e) {
                String errMsg = UtilProperties.getMessage(DataEvents.err_resource, &quot;dataEvents.error_call_create_service&quot;, locale);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="0D7149B5C29B3016C24E77DA4D7CA921">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>409</LineStart>
<Snippet>        }
        
        String frameContentId = request.getParameter(&quot;frameContentId&quot;);
        Delegator delegator = (Delegator) request.getAttribute(&quot;delegator&quot;);
        </Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="1D17B190AB2CE8869AACA12A76BB89C2">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceEventHandler.java</FilePath>
<LineStart>271</LineStart>
<Snippet>                    // if the service modelParam has allow-html=&quot;any&quot; then get this direct from the request instead of in the parameters Map so there will be no canonicalization possibly messing things up
                    if (&quot;any&quot;.equals(modelParam.allowHtml)) {
                        value = request.getParameter(name);
                    } else {
                        // use the rawParametersMap from UtilHttp in order to also get pathInfo parameters, do canonicalization, etc</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57" iid="AC8C26B5F2DE93BBC2A9AB01850E9052">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 54 of CursorResultSet.java, the method next() invokes a SQL query built using potentially unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CursorResultSet.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/CursorResultSet.java</FilePath>
<LineStart>54</LineStart>
<Snippet>        if (rs.next()) return true;
        System.err.println(&quot;executing page fetch(2)&quot;);
        rs = stmt.executeQuery(query);
        return rs.next();
    }</Snippet>
                            </Primary>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="E9259719CDB24F93E587E217D0C03256">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 366 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>366</LineStart>
<Snippet>                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {
                _ps = _connection.prepareStatement(sql);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] (def) _ps=&quot; + _ps, module);
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>261</LineStart>
<Snippet>        ByteBuffer imageData = (ByteBuffer) tempFile.get(&quot;imageData&quot;);
        if (UtilValidate.isEmpty(imageName) || UtilValidate.isEmpty(imageData)) {
            session.setAttribute(&quot;frameContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
            session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;There is no frame image, please select the image type *.PNG  uploading.&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="9C9F43D63C9238B40860AD0931ED83B7">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>GenericWebEvent.java</FileName>
<FilePath>framework/webtools/src/org/ofbiz/webtools/GenericWebEvent.java</FilePath>
<LineStart>135</LineStart>
<Snippet>            }

            String fval = request.getParameter(field.getName());
            if (UtilValidate.isNotEmpty(fval)) {
                try {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="AD31EDBD2B602727209698D79BDF9EF0">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 363 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>363</LineStart>
<Snippet>            _ind = 1;
            if (specifyTypeAndConcur) {
                _ps = _connection.prepareStatement(sql, resultSetType, resultSetConcurrency);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1354</LineStart>
<Snippet>        ShoppingCart cart = null;
        try {
            Map&lt;String, Object&gt; outMap = dispatcher.runSync(&quot;loadCartFromQuote&quot;,
                    UtilMisc.&lt;String, Object&gt;toMap(&quot;quoteId&quot;, quoteId,
                            &quot;applyQuoteAdjustments&quot;, &quot;true&quot;,</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="B903EC329213F84654DB940D7ED1845C">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 363 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>363</LineStart>
<Snippet>            _ind = 1;
            if (specifyTypeAndConcur) {
                _ps = _connection.prepareStatement(sql, resultSetType, resultSetConcurrency);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {</Snippet>
                            </Primary>
                            <Source>
<FileName>LoginEvents.java</FileName>
<FilePath>applications/securityext/src/org/ofbiz/securityext/login/LoginEvents.java</FilePath>
<LineStart>76</LineStart>
<Snippet>        if (userLogin == null) {

            String username = request.getParameter(&quot;USERNAME&quot;);
            String password = request.getParameter(&quot;PASSWORD&quot;);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="FED98A1830DBCC26DE94FDD4E8CF50C4">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>562</LineStart>
<Snippet>
        session.setAttribute(&quot;_CLIENT_FORWARDED_FOR_&quot;, request.getHeader(&quot;X-Forwarded-For&quot;));
        session.setAttribute(&quot;_CLIENT_REMOTE_ADDR_&quot;, request.getRemoteAddr());
        session.setAttribute(&quot;_CLIENT_REMOTE_HOST_&quot;, request.getRemoteHost());
        session.setAttribute(&quot;_CLIENT_REMOTE_USER_&quot;, request.getRemoteUser());</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="11255C45CF8C0189CFA49CA6C4998245">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 366 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>366</LineStart>
<Snippet>                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {
                _ps = _connection.prepareStatement(sql);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] (def) _ps=&quot; + _ps, module);
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>564</LineStart>
<Snippet>        session.setAttribute(&quot;_CLIENT_REMOTE_ADDR_&quot;, request.getRemoteAddr());
        session.setAttribute(&quot;_CLIENT_REMOTE_HOST_&quot;, request.getRemoteHost());
        session.setAttribute(&quot;_CLIENT_REMOTE_USER_&quot;, request.getRemoteUser());
    }
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="F77834E9300B9C8317D9C6ED2245EFC4">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>WebPosEvents.java</FileName>
<FilePath>specialpurpose/webpos/src/org/ofbiz/webpos/WebPosEvents.java</FilePath>
<LineStart>180</LineStart>
<Snippet>                                    request.setAttribute(&quot;featureSet&quot;, featureSet);
                                    try {
                                        variantTreeMap = dispatcher.runSync(&quot;getProductVariantTree&quot;, 
                                                         UtilMisc.toMap(&quot;productId&quot;, productId, &quot;featureOrder&quot;, featureSet, &quot;productStoreId&quot;, productStoreId));
                                        Map&lt;String, Object&gt; variantTree = UtilGenerics.cast(variantTreeMap.get(&quot;variantTree&quot;));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="1B8D87BC4DDE44148F3D815164CF4D2C">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 366 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>366</LineStart>
<Snippet>                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {
                _ps = _connection.prepareStatement(sql);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] (def) _ps=&quot; + _ps, module);
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>AbstractOFBizAuthenticationHandler.java</FileName>
<FilePath>specialpurpose/ldap/src/org/ofbiz/ldap/commons/AbstractOFBizAuthenticationHandler.java</FilePath>
<LineStart>129</LineStart>
<Snippet>
        try {
            loginResult = dispatcher.runSync(&quot;userLogin&quot;, UtilMisc.toMap(&quot;login.username&quot;, username, &quot;login.password&quot;, password, &quot;visitId&quot;, visitId, &quot;locale&quot;, UtilHttp.getLocale(request)));
        } catch (GenericServiceException e) {
            throw new GenericServiceException(e.getLocalizedMessage());</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="C582E8B79DFEE270F2AC6FC8E1544068">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>RomeEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/RomeEventHandler.java</FilePath>
<LineStart>69</LineStart>
<Snippet>    public String invoke(Event event, RequestMap requestMap, HttpServletRequest request, HttpServletResponse response) throws EventHandlerException {
        // generate the main and entry links
        String entryLinkReq = request.getParameter(&quot;entryLinkReq&quot;);
        String mainLinkReq = request.getParameter(&quot;mainLinkReq&quot;);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="D94B2ADB3882D43529E9FB797D1D94A2">
                            <Category>SQL Injection</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 363 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>363</LineStart>
<Snippet>            _ind = 1;
            if (specifyTypeAndConcur) {
                _ps = _connection.prepareStatement(sql, resultSetType, resultSetConcurrency);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {</Snippet>
                            </Primary>
                            <Source>
<FileName>ContextFilter.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ContextFilter.java</FilePath>
<LineStart>485</LineStart>
<Snippet>        String serverId = (String) config.getServletContext().getAttribute(&quot;_serverId&quot;);
        if (serverId == null) {
            serverId = config.getServletContext().getInitParameter(&quot;ofbizServerName&quot;);
            config.getServletContext().setAttribute(&quot;_serverId&quot;, serverId);
        }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="262BADC5F31EB35BADE817535150EEB1">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>PayPalEvents.java</FileName>
<FilePath>applications/accounting/src/org/ofbiz/accounting/thirdparty/paypal/PayPalEvents.java</FilePath>
<LineStart>497</LineStart>
<Snippet>        try {
            String comment = UtilProperties.getMessage(resource, &quot;AccountingPaymentReceiveViaPayPal&quot;, locale);
            results = dispatcher.runSync(&quot;createPaymentFromPreference&quot;, UtilMisc.toMap(&quot;userLogin&quot;, userLogin,
                    &quot;orderPaymentPreferenceId&quot;, paymentPreference.get(&quot;orderPaymentPreferenceId&quot;), &quot;comments&quot;, comment));
        } catch (GenericServiceException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="F5F186EE244871F23878215949BC8B69">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 363 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>363</LineStart>
<Snippet>            _ind = 1;
            if (specifyTypeAndConcur) {
                _ps = _connection.prepareStatement(sql, resultSetType, resultSetConcurrency);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {</Snippet>
                            </Primary>
                            <Source>
<FileName>CommonEvents.java</FileName>
<FilePath>framework/common/src/org/ofbiz/common/CommonEvents.java</FilePath>
<LineStart>179</LineStart>
<Snippet>     * setting should be passed as a &quot;newLocale&quot; request parameter. */
    public static String setSessionLocale(HttpServletRequest request, HttpServletResponse response) {
        String localeString = request.getParameter(&quot;newLocale&quot;);
        if (UtilValidate.isNotEmpty(localeString)) {
            UtilHttp.setLocale(request, localeString);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="3B9781549967FEA8740DC3F26EEA89A5">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>CommonEvents.java</FileName>
<FilePath>framework/common/src/org/ofbiz/common/CommonEvents.java</FilePath>
<LineStart>179</LineStart>
<Snippet>     * setting should be passed as a &quot;newLocale&quot; request parameter. */
    public static String setSessionLocale(HttpServletRequest request, HttpServletResponse response) {
        String localeString = request.getParameter(&quot;newLocale&quot;);
        if (UtilValidate.isNotEmpty(localeString)) {
            UtilHttp.setLocale(request, localeString);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="DAEF61C0D3720DEC13F3FDF5F0737AA4">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1469</LineStart>
<Snippet>        String quoteId = null;
        try {
            result = dispatcher.runSync(&quot;createQuoteFromCart&quot;,
                    UtilMisc.toMap(&quot;cart&quot;, cart,
                            &quot;userLogin&quot;, userLogin));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="B5A630D0E5876612C4DF1519618B3A33">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>558</LineStart>
<Snippet>        session.setAttribute(&quot;_CLIENT_LOCALE_&quot;, request.getLocale());
        session.setAttribute(&quot;_CLIENT_REQUEST_&quot;, fullRequestUrl.toString());
        session.setAttribute(&quot;_CLIENT_USER_AGENT_&quot;, request.getHeader(&quot;User-Agent&quot;) != null ? request.getHeader(&quot;User-Agent&quot;) : &quot;&quot;);
        session.setAttribute(&quot;_CLIENT_REFERER_&quot;, request.getHeader(&quot;Referer&quot;) != null ? request.getHeader(&quot;Referer&quot;) : &quot;&quot;);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="F3FE8CE180503E4BD47F6FDF2FB5E964">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2522 of DatabaseUtil.java, the method createPrimaryKey() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2522</LineStart>
<Snippet>            try {
                stmt = connection.createStatement();
                stmt.executeUpdate(sqlBuf.toString());
            } catch (SQLException e) {
                return &quot;SQL Exception while executing the following:\n&quot; + sqlBuf.toString() + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceMultiEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceMultiEventHandler.java</FilePath>
<LineStart>308</LineStart>
<Snippet>                Map&lt;String, Object&gt; result = null;
                try {
                    result = dispatcher.runSync(serviceName, serviceContext);
                } catch (ServiceAuthException e) {
                    // not logging since the service engine already did</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="DC3FC8DE6FAA705B78D117F0FFC169B0">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 363 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>363</LineStart>
<Snippet>            _ind = 1;
            if (specifyTypeAndConcur) {
                _ps = _connection.prepareStatement(sql, resultSetType, resultSetConcurrency);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceMultiEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceMultiEventHandler.java</FilePath>
<LineStart>308</LineStart>
<Snippet>                Map&lt;String, Object&gt; result = null;
                try {
                    result = dispatcher.runSync(serviceName, serviceContext);
                } catch (ServiceAuthException e) {
                    // not logging since the service engine already did</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="658CBB6F5601DD31891C03A1E8FA1ADC">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2826 of DatabaseUtil.java, the method deleteDeclaredIndex() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2826</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(deleteIndexSql);
        } catch (SQLException e) {
            return &quot;SQL Exception while executing the following:\n&quot; + deleteIndexSql + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>505</LineStart>
<Snippet>        Map&lt;String, Object&gt; ftlResults = null;
        try {
            ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
        } catch (ServiceAuthException e) {
            String msg = e.getMessage();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="E0C870A2A16D37DA40AE4F9BF4295C80">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>672</LineStart>
<Snippet>        HttpSession session = request.getSession();
        Locale locale = UtilHttp.getLocale(request);
        String supplierPartyId = request.getParameter(&quot;supplierPartyId_o_0&quot;);
        
        // check the preferred currency of the supplier, if set, use that for the cart, otherwise use system defaults.</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="5BA141E472062FB6BA88C9365FE907F8">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>LoginEvents.java</FileName>
<FilePath>applications/securityext/src/org/ofbiz/securityext/login/LoginEvents.java</FilePath>
<LineStart>76</LineStart>
<Snippet>        if (userLogin == null) {

            String username = request.getParameter(&quot;USERNAME&quot;);
            String password = request.getParameter(&quot;PASSWORD&quot;);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="75B87D6D14F7818837761D52591A7CF6">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CheckOutEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/CheckOutEvents.java</FilePath>
<LineStart>131</LineStart>
<Snippet>            if (UtilValidate.isNotEmpty(taxAuthPartyGeoIds)) {
                try {
                    Map&lt;String, ? extends Object&gt; createCustomerTaxAuthInfoResult = dispatcher.runSync(&quot;createCustomerTaxAuthInfo&quot;,
                            UtilMisc.&lt;String, Object&gt;toMap(&quot;partyId&quot;, cart.getPartyId(), &quot;taxAuthPartyGeoIds&quot;, taxAuthPartyGeoIds, &quot;partyTaxId&quot;, partyTaxId, &quot;isExempt&quot;, isExempt, &quot;userLogin&quot;, userLogin));
                    ServiceUtil.getMessages(request, createCustomerTaxAuthInfoResult, null);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="3B7FA2C0DB2825AB60EC22F4E05FF34F">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2699 of DatabaseUtil.java, the method createDeclaredIndex() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2699</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(createIndexSql);
        } catch (SQLException e) {
            return &quot;SQL Exception while executing the following:\n&quot; + createIndexSql + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceEventHandler.java</FilePath>
<LineStart>337</LineStart>
<Snippet>                dispatcher.runAsync(serviceName, serviceContext);
            } else {
                result = dispatcher.runSync(serviceName, serviceContext);
            }
        } catch (ServiceAuthException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="0CFDBB302A31AAEB4A7E3135FCB895AF">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>AbstractOFBizAuthenticationHandler.java</FileName>
<FilePath>specialpurpose/ldap/src/org/ofbiz/ldap/commons/AbstractOFBizAuthenticationHandler.java</FilePath>
<LineStart>129</LineStart>
<Snippet>
        try {
            loginResult = dispatcher.runSync(&quot;userLogin&quot;, UtilMisc.toMap(&quot;login.username&quot;, username, &quot;login.password&quot;, password, &quot;visitId&quot;, visitId, &quot;locale&quot;, UtilHttp.getLocale(request)));
        } catch (GenericServiceException e) {
            throw new GenericServiceException(e.getLocalizedMessage());</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="3E04C403BA63BAC344EED6022D735C35">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 366 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>366</LineStart>
<Snippet>                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {
                _ps = _connection.prepareStatement(sql);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] (def) _ps=&quot; + _ps, module);
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>FindServices.java</FileName>
<FilePath>framework/common/src/org/ofbiz/common/FindServices.java</FilePath>
<LineStart>503</LineStart>
<Snippet>        Map&lt;String, Object&gt; executeResult = null;
        try {
            executeResult = dispatcher.runSync(&quot;executeFind&quot;, UtilMisc.toMap(&quot;entityName&quot;, entityName, &quot;orderByList&quot;, orderByList,
                                                                             &quot;fieldList&quot;, fieldList, &quot;entityConditionList&quot;, exprList,
                                                                             &quot;noConditionFind&quot;, noConditionFind, &quot;distinct&quot;, distinct,</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="A8B4C7B2956ABE31B03A603258284F2D">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 363 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>363</LineStart>
<Snippet>            _ind = 1;
            if (specifyTypeAndConcur) {
                _ps = _connection.prepareStatement(sql, resultSetType, resultSetConcurrency);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>403</LineStart>
<Snippet>            if (UtilValidate.isNotEmpty(request.getParameter(&quot;frameExistContentId&quot;)) &amp;&amp; UtilValidate.isNotEmpty(request.getParameter(&quot;frameExistDataResourceId&quot;))) {
                session.setAttribute(&quot;frameExistContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
                session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            }
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;Required frame image content ID&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="921068EA47BF75C0DD44406BBCB4F4A7">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>RomeEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/RomeEventHandler.java</FilePath>
<LineStart>69</LineStart>
<Snippet>    public String invoke(Event event, RequestMap requestMap, HttpServletRequest request, HttpServletResponse response) throws EventHandlerException {
        // generate the main and entry links
        String entryLinkReq = request.getParameter(&quot;entryLinkReq&quot;);
        String mainLinkReq = request.getParameter(&quot;mainLinkReq&quot;);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="D5FD4603E578E40E465A2CDFC64775DD">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>TaskEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/task/TaskEvents.java</FilePath>
<LineStart>75</LineStart>
<Snippet>            Map&lt;String, ? extends Object&gt; context = UtilMisc.toMap(&quot;workEffortId&quot;, workEffortId, &quot;partyId&quot;, partyId, &quot;roleTypeId&quot;, roleTypeId,
                    &quot;fromDate&quot;, fromDate, &quot;result&quot;, parameterMap, &quot;userLogin&quot;, userLogin);
            result = dispatcher.runSync(&quot;wfCompleteAssignment&quot;, context);
            if (result.containsKey(ModelService.RESPOND_ERROR)) {
                request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, result.get(ModelService.ERROR_MESSAGE));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="1359845824A134D22982DFC3CCE3DA9D">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>RomeEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/RomeEventHandler.java</FilePath>
<LineStart>70</LineStart>
<Snippet>        // generate the main and entry links
        String entryLinkReq = request.getParameter(&quot;entryLinkReq&quot;);
        String mainLinkReq = request.getParameter(&quot;mainLinkReq&quot;);

        // create the links; but the query string must be created by the service</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="D2D49628C068A5D9224E64E061096AEF">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2044 of DatabaseUtil.java, the method repairColumnSize() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2044</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            int changed = stmt.executeUpdate(sql1);
            if (Debug.infoOn()) Debug.logInfo(&quot;[moveData] &quot; + changed + &quot; records updated&quot;, module);
        } catch (SQLException e) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>119</LineStart>
<Snippet>            contentRevisionMap.put(&quot;contentId&quot;, contentId);
            contentRevisionMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentRevisionAndItem&quot;, contentRevisionMap);
            keySet = result.keySet();
            iter = keySet.iterator();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="A62F566A15E4E446108A875051BBDA64">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 366 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>366</LineStart>
<Snippet>                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {
                _ps = _connection.prepareStatement(sql);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] (def) _ps=&quot; + _ps, module);
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>575</LineStart>
<Snippet>        while (e.hasMoreElements()) {
            String name = e.nextElement();
            request.setAttribute(name, request.getParameter(name));
        }
    }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="8537B0CAEC401B0E53319ADE5BE443E4">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 363 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>363</LineStart>
<Snippet>            _ind = 1;
            if (specifyTypeAndConcur) {
                _ps = _connection.prepareStatement(sql, resultSetType, resultSetConcurrency);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>945</LineStart>
<Snippet>            newCart = cartList.remove(cartIndex);
        } else {
            String productStoreId = request.getParameter(&quot;productStoreId&quot;);
            if (UtilValidate.isNotEmpty(productStoreId)) {
                session.setAttribute(&quot;productStoreId&quot;, productStoreId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="CC0E6004E3E40AD5B7F337DA4A160686">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>DataEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/data/DataEvents.java</FilePath>
<LineStart>334</LineStart>
<Snippet>            mode = &quot;CREATE&quot;;
            try {
                result = dispatcher.runSync(&quot;createDataResource&quot;, serviceInMap);
            } catch (GenericServiceException e) {
                String errMsg = UtilProperties.getMessage(DataEvents.err_resource, &quot;dataEvents.error_call_create_service&quot;, locale);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="5AADAE0CA361F5BB90549CDEFB5AF966">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>RequestHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/RequestHandler.java</FilePath>
<LineStart>128</LineStart>
<Snippet>        }

        String overrideViewUri = RequestHandler.getOverrideViewUri(request.getPathInfo());

        String requestMissingErrorMessage = &quot;Unknown request [&quot; + defaultRequestUri + &quot;]; this request does not exist or cannot be called directly.&quot;;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="229DFDCA15A83D14CBA497027108760C">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>WebPosEvents.java</FileName>
<FilePath>specialpurpose/webpos/src/org/ofbiz/webpos/WebPosEvents.java</FilePath>
<LineStart>113</LineStart>
<Snippet>
            if (UtilValidate.isNotEmpty(posTerminalId)) {
                webPosSession = new WebPosSession(posTerminalId, null, userLogin, request.getLocale(), productStoreId, facilityId, currencyUomId, delegator, dispatcher, cart);
                session.setAttribute(&quot;webPosSession&quot;, webPosSession);
            } else {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57" iid="778039054AD853BB1C107DCE92D3DD12">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 62 of CursorStatement.java, the method invoke() invokes a SQL query built using potentially unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>CursorStatement.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/CursorStatement.java</FilePath>
<LineStart>62</LineStart>
<Snippet>            args[0] = &quot;DECLARE &quot; + cursorName + &quot; CURSOR FOR &quot; + args[0];
            System.err.println(&quot;query=&quot; + args[0]);
            if (stmt.execute((String) args[0])) {
                throw new SQLException(&quot;DECLARE returned a ResultSet&quot;);
            }</Snippet>
                            </Primary>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="9BC7AECB6A8528102AC3C502EDB4EBA8">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 1894 of DatabaseUtil.java, the method addColumn() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>1894</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(sql);
        } catch (SQLException e) {
            // if that failed try the alternate syntax real quick</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>575</LineStart>
<Snippet>        while (e.hasMoreElements()) {
            String name = e.nextElement();
            request.setAttribute(name, request.getParameter(name));
        }
    }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="C5087F69F04A0A28666D596221A28CB5">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>CommonEvents.java</FileName>
<FilePath>framework/common/src/org/ofbiz/common/CommonEvents.java</FilePath>
<LineStart>163</LineStart>
<Snippet>        Security security = (Security) request.getAttribute(&quot;security&quot;);
        GenericValue userLogin = (GenericValue) request.getSession().getAttribute(&quot;userLogin&quot;);
        String visitId = request.getParameter(&quot;visitId&quot;);
        if (visitId != null) request.setAttribute(&quot;visitId&quot;, visitId);
        if (security.hasPermission(&quot;SEND_CONTROL_APPLET&quot;, userLogin)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="9E5B797286C6A6A9128E50694ED92866">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>DataEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/data/DataEvents.java</FilePath>
<LineStart>136</LineStart>
<Snippet>            Map&lt;String, Object&gt; permSvcResp;
            try {
                permSvcResp = dispatcher.runSync(permissionService, permSvcCtx);
            } catch (GenericServiceException e) {
                Debug.logError(e, module);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="E8C7DD7B58A6902BA715039D92CB3053">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 3182 of DatabaseUtil.java, the method updateCharacterSetAndCollation() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>3182</LineStart>
<Snippet>                try {
                    stmt = connection.createStatement();
                    stmt.executeUpdate(sqlBuf.toString());
                } catch (SQLException e) {
                    String errMsg = &quot;SQL Exception while executing the following:\n&quot; + sqlBuf + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>575</LineStart>
<Snippet>        while (e.hasMoreElements()) {
            String name = e.nextElement();
            request.setAttribute(name, request.getParameter(name));
        }
    }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="22EE0FCAE22207F2060B965508B1A2C1">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2699 of DatabaseUtil.java, the method createDeclaredIndex() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2699</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(createIndexSql);
        } catch (SQLException e) {
            return &quot;SQL Exception while executing the following:\n&quot; + createIndexSql + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>575</LineStart>
<Snippet>        while (e.hasMoreElements()) {
            String name = e.nextElement();
            request.setAttribute(name, request.getParameter(name));
        }
    }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="047AEBAB5C45C15166A671EDAB7E0E65">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 363 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>363</LineStart>
<Snippet>            _ind = 1;
            if (specifyTypeAndConcur) {
                _ps = _connection.prepareStatement(sql, resultSetType, resultSetConcurrency);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>688</LineStart>
<Snippet>        
        // TODO: the code below here needs some cleanups
        String billToCustomerPartyId = request.getParameter(&quot;billToCustomerPartyId_o_0&quot;);
        if (UtilValidate.isEmpty(billToCustomerPartyId) &amp;&amp; UtilValidate.isEmpty(supplierPartyId)) {
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, UtilProperties.getMessage(resource_error, &quot;OrderCouldNotInitPurchaseOrder&quot;, locale));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="47B447CA7546335AAE784E5E1FC30478">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 366 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>366</LineStart>
<Snippet>                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {
                _ps = _connection.prepareStatement(sql);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] (def) _ps=&quot; + _ps, module);
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>WebPosEvents.java</FileName>
<FilePath>specialpurpose/webpos/src/org/ofbiz/webpos/WebPosEvents.java</FilePath>
<LineStart>113</LineStart>
<Snippet>
            if (UtilValidate.isNotEmpty(posTerminalId)) {
                webPosSession = new WebPosSession(posTerminalId, null, userLogin, request.getLocale(), productStoreId, facilityId, currencyUomId, delegator, dispatcher, cart);
                session.setAttribute(&quot;webPosSession&quot;, webPosSession);
            } else {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="AAD832FD9CC6C91716432C39650EAFD4">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>127</LineStart>
<Snippet>
            Object value = null;
            String[] paramArr = request.getParameterValues(name);
            if (paramArr != null) {
                if (paramArr.length &gt; 1) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="5EFF8D590514737894AFAEE06A5DA8FA">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 363 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>363</LineStart>
<Snippet>            _ind = 1;
            if (specifyTypeAndConcur) {
                _ps = _connection.prepareStatement(sql, resultSetType, resultSetConcurrency);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceEventHandler.java</FilePath>
<LineStart>337</LineStart>
<Snippet>                dispatcher.runAsync(serviceName, serviceContext);
            } else {
                result = dispatcher.runSync(serviceName, serviceContext);
            }
        } catch (ServiceAuthException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="EACDE02642ED68CB334D6F45D4E84095">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2826 of DatabaseUtil.java, the method deleteDeclaredIndex() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2826</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(deleteIndexSql);
        } catch (SQLException e) {
            return &quot;SQL Exception while executing the following:\n&quot; + deleteIndexSql + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilObject.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilObject.java</FilePath>
<LineStart>137</LineStart>
<Snippet>                ObjectInputStream ois = new ObjectInputStream(bis, Thread.currentThread().getContextClassLoader());
                try {
                    obj = ois.readObject();
                } catch (ClassNotFoundException e) {
                    Debug.logError(e, module);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="D5FD4603E578E40E465A2CDFC64775DE">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>TaskEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/task/TaskEvents.java</FilePath>
<LineStart>75</LineStart>
<Snippet>            Map&lt;String, ? extends Object&gt; context = UtilMisc.toMap(&quot;workEffortId&quot;, workEffortId, &quot;partyId&quot;, partyId, &quot;roleTypeId&quot;, roleTypeId,
                    &quot;fromDate&quot;, fromDate, &quot;result&quot;, parameterMap, &quot;userLogin&quot;, userLogin);
            result = dispatcher.runSync(&quot;wfCompleteAssignment&quot;, context);
            if (result.containsKey(ModelService.RESPOND_ERROR)) {
                request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, result.get(ModelService.ERROR_MESSAGE));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="4A9C5AAE075EDDFE6C362CF451671AEF">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingListEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppinglist/ShoppingListEvents.java</FilePath>
<LineStart>349</LineStart>
<Snippet>        Map&lt;String, Object&gt; result = null;
        try {
            result = dispatcher.runSync(&quot;updateShoppingListItem&quot;, serviceInMap);
        } catch (GenericServiceException e) {
            String errMsg = UtilProperties.getMessage(resource_error,&quot;shoppingListEvents.error_calling_update&quot;, locale) + &quot;: &quot;  + e.toString();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="CF1452C616DDC9B1E94808E87DFFC337">
                            <Category>SQL Injection</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>ContextFilter.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ContextFilter.java</FilePath>
<LineStart>485</LineStart>
<Snippet>        String serverId = (String) config.getServletContext().getAttribute(&quot;_serverId&quot;);
        if (serverId == null) {
            serverId = config.getServletContext().getInitParameter(&quot;ofbizServerName&quot;);
            config.getServletContext().setAttribute(&quot;_serverId&quot;, serverId);
        }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="B01C197836312ED47182329EE2E5B38F">
                            <Category>SQL Injection</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>ContextFilter.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ContextFilter.java</FilePath>
<LineStart>467</LineStart>
<Snippet>        while (initParamEnum.hasMoreElements()) {
            String initParamName = initParamEnum.nextElement();
            String initParamValue = config.getServletContext().getInitParameter(initParamName);
            if (Debug.verboseOn()) Debug.logVerbose(&quot;Adding web.xml context-param to application attribute with name [&quot; + initParamName + &quot;] and value [&quot; + initParamValue + &quot;]&quot;, module);
            config.getServletContext().setAttribute(initParamName, initParamValue);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="1E6BFBB17F4BEDA9C0EF4C5A7516BC90">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>OrderManagerEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/OrderManagerEvents.java</FilePath>
<LineStart>98</LineStart>
<Snippet>                    Map&lt;String, Object&gt; results = null;
                    try {
                        results = dispatcher.runSync(&quot;createPaymentFromPreference&quot;, UtilMisc.toMap(&quot;orderPaymentPreferenceId&quot;, ppref.get(&quot;orderPaymentPreferenceId&quot;),
                                &quot;paymentFromId&quot;, placingCustomer.getString(&quot;partyId&quot;), &quot;comments&quot;, &quot;Payment received offline and manually entered.&quot;));
                    } catch (GenericServiceException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="7358876BD0C52E92A967526C834AEEFD">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>ProductEvents.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/product/ProductEvents.java</FilePath>
<LineStart>804</LineStart>
<Snippet>        //Timestamp nowTimestamp = UtilDateTime.nowTimestamp();
        //GenericValue userLogin = (GenericValue) request.getSession().getAttribute(&quot;userLogin&quot;);
        String productId = request.getParameter(&quot;productId&quot;);
        String productFeatureId = request.getParameter(&quot;productFeatureId&quot;);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="273F266447E1A3C079EE83370056468E">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 363 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>363</LineStart>
<Snippet>            _ind = 1;
            if (specifyTypeAndConcur) {
                _ps = _connection.prepareStatement(sql, resultSetType, resultSetConcurrency);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {</Snippet>
                            </Primary>
                            <Source>
<FileName>WebPosEvents.java</FileName>
<FilePath>specialpurpose/webpos/src/org/ofbiz/webpos/WebPosEvents.java</FilePath>
<LineStart>113</LineStart>
<Snippet>
            if (UtilValidate.isNotEmpty(posTerminalId)) {
                webPosSession = new WebPosSession(posTerminalId, null, userLogin, request.getLocale(), productStoreId, facilityId, currencyUomId, delegator, dispatcher, cart);
                session.setAttribute(&quot;webPosSession&quot;, webPosSession);
            } else {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="C1530AB4665A75D4895C22DE9F14D828">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1994</LineStart>
<Snippet>                    appendOrderItemMap.put(&quot;shipGroupSeqId&quot;, shipGroupSeqId);
                    try {
                        Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;appendOrderItem&quot;, appendOrderItemMap);
                        request.setAttribute(&quot;shoppingCart&quot;, (ShoppingCart) result.get(&quot;shoppingCart&quot;));
                        ShoppingCartEvents.destroyCart(request, response);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="A2C7C5CA4A1CAD0F545E67AAAC020AF4">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>OrderEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/order/OrderEvents.java</FilePath>
<LineStart>58</LineStart>
<Snippet>        Delegator delegator = (Delegator) request.getAttribute(&quot;delegator&quot;);
        GenericValue userLogin = (GenericValue) session.getAttribute(&quot;userLogin&quot;);
        String dataResourceId = request.getParameter(&quot;dataResourceId&quot;);

        try {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="97F1CB6A0A38248A2E8FD86692604476">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>409</LineStart>
<Snippet>        }
        
        String frameContentId = request.getParameter(&quot;frameContentId&quot;);
        Delegator delegator = (Delegator) request.getAttribute(&quot;delegator&quot;);
        </Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="3F5FECCCA6E41CA627D729766271CFE7">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>287</LineStart>
<Snippet>                imgContext.put(&quot;rootDir&quot;, &quot;rootDir&quot;);
                if (Debug.infoOn()) Debug.logInfo(&quot;[UploadContentAndImage]imgContext &quot; + imgContext, module);
                Map&lt;String, Object&gt; imgResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, imgContext);
                isError = ModelService.RESPOND_ERROR.equals(imgResults.get(ModelService.RESPONSE_MESSAGE));
                if (isError) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="26DDFA68E796B4B85096A6480373B004">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>ICalWorker.java</FileName>
<FilePath>applications/workeffort/src/org/ofbiz/workeffort/workeffort/ICalWorker.java</FilePath>
<LineStart>305</LineStart>
<Snippet>
    protected static void setupRequest(HttpServletRequest request, HttpServletResponse response) {
        String path = request.getPathInfo();
        if (UtilValidate.isEmpty(path)) {
            path = &quot;/&quot;;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="0915F0C6431DC72BA70F43FEC4069CB2">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>563</LineStart>
<Snippet>        session.setAttribute(&quot;_CLIENT_FORWARDED_FOR_&quot;, request.getHeader(&quot;X-Forwarded-For&quot;));
        session.setAttribute(&quot;_CLIENT_REMOTE_ADDR_&quot;, request.getRemoteAddr());
        session.setAttribute(&quot;_CLIENT_REMOTE_HOST_&quot;, request.getRemoteHost());
        session.setAttribute(&quot;_CLIENT_REMOTE_USER_&quot;, request.getRemoteUser());
    }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="FB3AFB51901A11CAC7A60E57375EC4A4">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 366 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>366</LineStart>
<Snippet>                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {
                _ps = _connection.prepareStatement(sql);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] (def) _ps=&quot; + _ps, module);
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>CommonEvents.java</FileName>
<FilePath>framework/common/src/org/ofbiz/common/CommonEvents.java</FilePath>
<LineStart>231</LineStart>
<Snippet>    /** Simple event to set the users per-session currency uom value */
    public static String setSessionCurrencyUom(HttpServletRequest request, HttpServletResponse response) {
        String currencyUom = request.getParameter(&quot;currencyUom&quot;);
        if (UtilValidate.isNotEmpty(currencyUom)) {
            // update the session</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="F9547E725C366E8C5DB6485C612CFAAD">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 363 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>363</LineStart>
<Snippet>            _ind = 1;
            if (specifyTypeAndConcur) {
                _ps = _connection.prepareStatement(sql, resultSetType, resultSetConcurrency);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {</Snippet>
                            </Primary>
                            <Source>
<FileName>LoginWorker.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/LoginWorker.java</FilePath>
<LineStart>397</LineStart>
<Snippet>            // get the visit id to pass to the userLogin for history
            String visitId = VisitHandler.getVisitId(session);
            result = dispatcher.runSync(&quot;userLogin&quot;, UtilMisc.toMap(&quot;login.username&quot;, username, &quot;login.password&quot;, password, &quot;visitId&quot;, visitId, &quot;locale&quot;, UtilHttp.getLocale(request)));
        } catch (GenericServiceException e) {
            Debug.logError(e, &quot;Error calling userLogin service&quot;, module);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="D9DB6BC6E90BB125C5FC7072C43C08C1">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 1894 of DatabaseUtil.java, the method addColumn() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>1894</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(sql);
        } catch (SQLException e) {
            // if that failed try the alternate syntax real quick</Snippet>
                            </Primary>
                            <Source>
<FileName>CoreEvents.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/CoreEvents.java</FilePath>
<LineStart>412</LineStart>
<Snippet>        try {
            if (null!=request.getParameter(&quot;_RUN_SYNC_&quot;) &amp;&amp; request.getParameter(&quot;_RUN_SYNC_&quot;).equals(&quot;Y&quot;)) {
                syncServiceResult = dispatcher.runSync(serviceName, serviceContext);
            } else {
                dispatcher.schedule(jobName, poolName, serviceName, serviceContext, startTime, frequency, interval, count, endTime, maxRetry);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="C582E8B79DFEE270F2AC6FC8E1544069">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>RomeEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/RomeEventHandler.java</FilePath>
<LineStart>69</LineStart>
<Snippet>    public String invoke(Event event, RequestMap requestMap, HttpServletRequest request, HttpServletResponse response) throws EventHandlerException {
        // generate the main and entry links
        String entryLinkReq = request.getParameter(&quot;entryLinkReq&quot;);
        String mainLinkReq = request.getParameter(&quot;mainLinkReq&quot;);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="181E72A1F0B65E5CA8C5E1A583566ED9">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>WebPosEvents.java</FileName>
<FilePath>specialpurpose/webpos/src/org/ofbiz/webpos/WebPosEvents.java</FilePath>
<LineStart>175</LineStart>
<Snippet>                            String productStoreId = webPosSession.getProductStoreId();
                            try {
                                featureMap = dispatcher.runSync(&quot;getProductFeatureSet&quot;, UtilMisc.toMap(&quot;productId&quot;, productId));
                                Set&lt;String&gt; featureSet = UtilGenerics.cast(featureMap.get(&quot;featureSet&quot;));
                                if (UtilValidate.isNotEmpty(featureSet)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="18881BAB5FF402559E8998CA5F7EB6D8">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1527</LineStart>
<Snippet>        Locale locale = UtilHttp.getLocale(request);

        String productStoreId = request.getParameter(&quot;productStoreId&quot;);

        if (UtilValidate.isNotEmpty(productStoreId)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="4504144FF6AE6AA81E27F73ED01771D7">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>LoginWorker.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/LoginWorker.java</FilePath>
<LineStart>417</LineStart>
<Snippet>                Map&lt;String, Object&gt; resultPasswordChange = null;
                try {
                    resultPasswordChange = dispatcher.runSync(&quot;updatePassword&quot;, inMap);
                } catch (GenericServiceException e) {
                    Debug.logError(e, &quot;Error calling updatePassword service&quot;, module);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="02DDF759D2B02901668103938271DAC2">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>497</LineStart>
<Snippet>                    }
                    String formAction = &quot;/additemsurvey&quot;;
                    String nextPage = RequestHandler.getOverrideViewUri(request.getPathInfo());
                    if (nextPage != null) {
                        formAction = formAction + &quot;/&quot; + nextPage;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="2727B1B3D2E46F65560A7AF43B2C4D0E">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>DataEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/data/DataEvents.java</FilePath>
<LineStart>136</LineStart>
<Snippet>            Map&lt;String, Object&gt; permSvcResp;
            try {
                permSvcResp = dispatcher.runSync(permissionService, permSvcCtx);
            } catch (GenericServiceException e) {
                Debug.logError(e, module);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="BCDC0ADE9E70839B308D5F9D4C66BB7E">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>403</LineStart>
<Snippet>            if (UtilValidate.isNotEmpty(request.getParameter(&quot;frameExistContentId&quot;)) &amp;&amp; UtilValidate.isNotEmpty(request.getParameter(&quot;frameExistDataResourceId&quot;))) {
                session.setAttribute(&quot;frameExistContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
                session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            }
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;Required frame image content ID&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="4C56684143E12B46BF8F5C9649171D05">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>TrackingCodeEvents.java</FileName>
<FilePath>applications/marketing/src/org/ofbiz/marketing/tracking/TrackingCodeEvents.java</FilePath>
<LineStart>374</LineStart>
<Snippet>        if (UtilValidate.isEmpty(trackingCodeId)) trackingCodeId = request.getParameter(&quot;atc&quot;);
        if (UtilValidate.isEmpty(trackingCodeId)) {
            Cookie[] cookies = request.getCookies();
            if (cookies != null) {
                for (Cookie cookie : cookies) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="05F7B97B0E5F1062B0AF3F4A4CAD62C4">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>CoreEvents.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/CoreEvents.java</FilePath>
<LineStart>412</LineStart>
<Snippet>        try {
            if (null!=request.getParameter(&quot;_RUN_SYNC_&quot;) &amp;&amp; request.getParameter(&quot;_RUN_SYNC_&quot;).equals(&quot;Y&quot;)) {
                syncServiceResult = dispatcher.runSync(serviceName, serviceContext);
            } else {
                dispatcher.schedule(jobName, poolName, serviceName, serviceContext, startTime, frequency, interval, count, endTime, maxRetry);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="E63B9A630E7177BFFD75D251F7DF44B0">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>104</LineStart>
<Snippet>        persistMap.put(&quot;userLogin&quot;, userLogin);
        try {
            Map&lt;String, Object&gt; persistResult = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, persistMap);
            contentId = (String)persistResult.get(&quot;contentId&quot;);
            //request.setAttribute(&quot;contentId&quot;, contentId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="17D470DC6D3F46658E1E0C82D8630400">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 363 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>363</LineStart>
<Snippet>            _ind = 1;
            if (specifyTypeAndConcur) {
                _ps = _connection.prepareStatement(sql, resultSetType, resultSetConcurrency);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>620</LineStart>
<Snippet>        // finally request (w/ a fall back to default)
        if (localeObject == null) {
            localeObject = request != null ? request.getLocale() : null;
        }
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="9A46BDCA355C9AC3D9AE274CE4CF1D55">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>DataEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/data/DataEvents.java</FilePath>
<LineStart>323</LineStart>
<Snippet>        if (mode != null &amp;&amp; mode.equals(&quot;UPDATE&quot;)) {
            try {
                result = dispatcher.runSync(&quot;updateDataResource&quot;, serviceInMap);
            } catch (GenericServiceException e) {
                String errMsg = UtilProperties.getMessage(DataEvents.err_resource, &quot;dataEvents.error_call_update_service&quot;, locale);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="803F53BB8A634B941AE98DEAFD4D955C">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 363 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>363</LineStart>
<Snippet>            _ind = 1;
            if (specifyTypeAndConcur) {
                _ps = _connection.prepareStatement(sql, resultSetType, resultSetConcurrency);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilObject.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilObject.java</FilePath>
<LineStart>137</LineStart>
<Snippet>                ObjectInputStream ois = new ObjectInputStream(bis, Thread.currentThread().getContextClassLoader());
                try {
                    obj = ois.readObject();
                } catch (ClassNotFoundException e) {
                    Debug.logError(e, module);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="03EB3550762D4B36E7B1E4D65548B161">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2522 of DatabaseUtil.java, the method createPrimaryKey() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2522</LineStart>
<Snippet>            try {
                stmt = connection.createStatement();
                stmt.executeUpdate(sqlBuf.toString());
            } catch (SQLException e) {
                return &quot;SQL Exception while executing the following:\n&quot; + sqlBuf.toString() + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>CoreEvents.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/CoreEvents.java</FilePath>
<LineStart>412</LineStart>
<Snippet>        try {
            if (null!=request.getParameter(&quot;_RUN_SYNC_&quot;) &amp;&amp; request.getParameter(&quot;_RUN_SYNC_&quot;).equals(&quot;Y&quot;)) {
                syncServiceResult = dispatcher.runSync(serviceName, serviceContext);
            } else {
                dispatcher.schedule(jobName, poolName, serviceName, serviceContext, startTime, frequency, interval, count, endTime, maxRetry);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="A2C7C5CA4A1CAD0F545E67AAAC020AF5">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>OrderEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/order/OrderEvents.java</FilePath>
<LineStart>58</LineStart>
<Snippet>        Delegator delegator = (Delegator) request.getAttribute(&quot;delegator&quot;);
        GenericValue userLogin = (GenericValue) session.getAttribute(&quot;userLogin&quot;);
        String dataResourceId = request.getParameter(&quot;dataResourceId&quot;);

        try {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="693AD5866A0BE2886C41E8C17D6F9919">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>119</LineStart>
<Snippet>            contentRevisionMap.put(&quot;contentId&quot;, contentId);
            contentRevisionMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentRevisionAndItem&quot;, contentRevisionMap);
            keySet = result.keySet();
            iter = keySet.iterator();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="3FB48F4B88DF174BF1132A6B27E2DDE8">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>CmsEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/cms/CmsEvents.java</FilePath>
<LineStart>107</LineStart>
<Snippet>            pathInfo = overrideViewUri;
        } else {
            pathInfo = request.getPathInfo();
            if (targetRequest.equals(actualRequest) &amp;&amp; pathInfo != null) {
                // was called directly -- path info is everything after the request</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="5AADAE0CA361F5BB90549CDEFB5AF964">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>RequestHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/RequestHandler.java</FilePath>
<LineStart>128</LineStart>
<Snippet>        }

        String overrideViewUri = RequestHandler.getOverrideViewUri(request.getPathInfo());

        String requestMissingErrorMessage = &quot;Unknown request [&quot; + defaultRequestUri + &quot;]; this request does not exist or cannot be called directly.&quot;;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="3B9781549967FEA8740DC3F26EEA89A6">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>CommonEvents.java</FileName>
<FilePath>framework/common/src/org/ofbiz/common/CommonEvents.java</FilePath>
<LineStart>179</LineStart>
<Snippet>     * setting should be passed as a &quot;newLocale&quot; request parameter. */
    public static String setSessionLocale(HttpServletRequest request, HttpServletResponse response) {
        String localeString = request.getParameter(&quot;newLocale&quot;);
        if (UtilValidate.isNotEmpty(localeString)) {
            UtilHttp.setLocale(request, localeString);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="79D1F3C7DA7D0C0D2CDC4A4C31C41822">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>WebPosEvents.java</FileName>
<FilePath>specialpurpose/webpos/src/org/ofbiz/webpos/WebPosEvents.java</FilePath>
<LineStart>94</LineStart>
<Snippet>            GenericValue productStore = ProductStoreWorker.getProductStore(productStoreId, delegator);
            String facilityId = null;
            String currencyUomId = request.getParameter(&quot;currencyUomId&quot;);

            if (UtilValidate.isNotEmpty(productStore)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="A743F3F4FA317042882A3E2D2E15BC21">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2085 of DatabaseUtil.java, the method repairColumnSize() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2085</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(sql2);
        } catch (SQLException e) {
            String thisMsg = &quot;SQL Exception while executing the following:\n&quot; + sql2 + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>505</LineStart>
<Snippet>        Map&lt;String, Object&gt; ftlResults = null;
        try {
            ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
        } catch (ServiceAuthException e) {
            String msg = e.getMessage();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="06D6D91EE808E264C8B890AC62EAEA22">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 1894 of DatabaseUtil.java, the method addColumn() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>1894</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(sql);
        } catch (SQLException e) {
            // if that failed try the alternate syntax real quick</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceMultiEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceMultiEventHandler.java</FilePath>
<LineStart>308</LineStart>
<Snippet>                Map&lt;String, Object&gt; result = null;
                try {
                    result = dispatcher.runSync(serviceName, serviceContext);
                } catch (ServiceAuthException e) {
                    // not logging since the service engine already did</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="4863B487CE537324FC855C2AD411169D">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>WebPosEvents.java</FileName>
<FilePath>specialpurpose/webpos/src/org/ofbiz/webpos/WebPosEvents.java</FilePath>
<LineStart>94</LineStart>
<Snippet>            GenericValue productStore = ProductStoreWorker.getProductStore(productStoreId, delegator);
            String facilityId = null;
            String currencyUomId = request.getParameter(&quot;currencyUomId&quot;);

            if (UtilValidate.isNotEmpty(productStore)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="7F9E82268173B13411CB7E1DC09EA029">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 366 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>366</LineStart>
<Snippet>                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {
                _ps = _connection.prepareStatement(sql);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] (def) _ps=&quot; + _ps, module);
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>672</LineStart>
<Snippet>        HttpSession session = request.getSession();
        Locale locale = UtilHttp.getLocale(request);
        String supplierPartyId = request.getParameter(&quot;supplierPartyId_o_0&quot;);
        
        // check the preferred currency of the supplier, if set, use that for the cart, otherwise use system defaults.</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="76F20F99C38AFDA5950ED869F4FF819F">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>184</LineStart>
<Snippet>
    public static Map&lt;String, Object&gt; getPathInfoOnlyParameterMap(HttpServletRequest request, Set&lt;? extends String&gt; nameSet, Boolean onlyIncludeOrSkip) {
        return getPathInfoOnlyParameterMap(request.getPathInfo(), nameSet, onlyIncludeOrSkip);
    }
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="4CDF68E7445235675183DC93E6BD02F0">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>ShipmentEvents.java</FileName>
<FilePath>applications/product/src/org/ofbiz/shipment/shipment/ShipmentEvents.java</FilePath>
<LineStart>95</LineStart>
<Snippet>        GenericValue userLogin = (GenericValue)request.getSession().getAttribute(&quot;userLogin&quot;);

        String shipmentId = request.getParameter(&quot;shipmentIdReceived&quot;);
        String forceShipmentReceived = request.getParameter(&quot;forceShipmentReceived&quot;);
        if (UtilValidate.isNotEmpty(shipmentId) &amp;&amp; &quot;Y&quot;.equals(forceShipmentReceived)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="60085A54849664B8823B75C650813285">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>251</LineStart>
<Snippet>                txtContext.put(&quot;mapKey&quot;, &quot;ARTICLE&quot;);
                txtContext.put(&quot;dataTemplateTypeId&quot;, &quot;NONE&quot;);
                Map&lt;String, Object&gt; txtResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, txtContext);
                isError = ModelService.RESPOND_ERROR.equals(txtResults.get(ModelService.RESPONSE_MESSAGE));
                if (isError) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="7E70303C7A436CDAEDF05BCA301549CA">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 366 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>366</LineStart>
<Snippet>                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {
                _ps = _connection.prepareStatement(sql);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] (def) _ps=&quot; + _ps, module);
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>688</LineStart>
<Snippet>        
        // TODO: the code below here needs some cleanups
        String billToCustomerPartyId = request.getParameter(&quot;billToCustomerPartyId_o_0&quot;);
        if (UtilValidate.isEmpty(billToCustomerPartyId) &amp;&amp; UtilValidate.isEmpty(supplierPartyId)) {
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, UtilProperties.getMessage(resource_error, &quot;OrderCouldNotInitPurchaseOrder&quot;, locale));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="D3D429608F05BFB1DC8BA240AD68EC9A">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 363 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>363</LineStart>
<Snippet>            _ind = 1;
            if (specifyTypeAndConcur) {
                _ps = _connection.prepareStatement(sql, resultSetType, resultSetConcurrency);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>402</LineStart>
<Snippet>        if(UtilValidate.isEmpty(request.getParameter(&quot;frameContentId&quot;))) {
            if (UtilValidate.isNotEmpty(request.getParameter(&quot;frameExistContentId&quot;)) &amp;&amp; UtilValidate.isNotEmpty(request.getParameter(&quot;frameExistDataResourceId&quot;))) {
                session.setAttribute(&quot;frameExistContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
                session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="F6712E2C51A32E3825435D29A818E6B1">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 366 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>366</LineStart>
<Snippet>                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {
                _ps = _connection.prepareStatement(sql);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] (def) _ps=&quot; + _ps, module);
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>LoginWorker.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/LoginWorker.java</FilePath>
<LineStart>397</LineStart>
<Snippet>            // get the visit id to pass to the userLogin for history
            String visitId = VisitHandler.getVisitId(session);
            result = dispatcher.runSync(&quot;userLogin&quot;, UtilMisc.toMap(&quot;login.username&quot;, username, &quot;login.password&quot;, password, &quot;visitId&quot;, visitId, &quot;locale&quot;, UtilHttp.getLocale(request)));
        } catch (GenericServiceException e) {
            Debug.logError(e, &quot;Error calling userLogin service&quot;, module);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="1E628A65B40CDB1FC6DF5CC9D1B99952">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 366 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>366</LineStart>
<Snippet>                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {
                _ps = _connection.prepareStatement(sql);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] (def) _ps=&quot; + _ps, module);
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>348</LineStart>
<Snippet>        }
        String frameContentId = request.getParameter(&quot;frameContentId&quot;);
        String frameDataResourceId = request.getParameter(&quot;frameDataResourceId&quot;);
        
        if (UtilValidate.isEmpty(request.getParameter(&quot;imageWidth&quot;)) || UtilValidate.isEmpty(request.getParameter(&quot;imageHeight&quot;))) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="F2AEE4203867FECB4C8281E6CCB409B8">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>693</LineStart>
<Snippet>            return &quot;error&quot;;
        }
        String orderId = request.getParameter(&quot;orderId_o_0&quot;);
        // set the order id if supplied
        if (UtilValidate.isNotEmpty(orderId)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="B9C6542BFDC77585EDA69147213DF003">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CheckOutEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/CheckOutEvents.java</FilePath>
<LineStart>300</LineStart>
<Snippet>
        if (UtilValidate.isNotEmpty(request.getParameter(&quot;issuerId&quot;))) {
            request.setAttribute(&quot;issuerId&quot;, request.getParameter(&quot;issuerId&quot;));
        }
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="FE79E24F630F0AAA7B9CCB5C9D71CAB6">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>620</LineStart>
<Snippet>        // finally request (w/ a fall back to default)
        if (localeObject == null) {
            localeObject = request != null ? request.getLocale() : null;
        }
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="AC897AEB482BB12BEFE280BD0AEDA930">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>182</LineStart>
<Snippet>                }
                if (UtilValidate.isNotEmpty(map.get(&quot;contentAssocTypeId&quot;))) {
                    ftlResults = dispatcher.runSync(&quot;createContentAssoc&quot;, map);
                    isError = ModelService.RESPOND_ERROR.equals(ftlResults.get(ModelService.RESPONSE_MESSAGE));
                    if (isError) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="2186203FB06FC78C7F71509C0AB0D2B7">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1994</LineStart>
<Snippet>                    appendOrderItemMap.put(&quot;shipGroupSeqId&quot;, shipGroupSeqId);
                    try {
                        Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;appendOrderItem&quot;, appendOrderItemMap);
                        request.setAttribute(&quot;shoppingCart&quot;, (ShoppingCart) result.get(&quot;shoppingCart&quot;));
                        ShoppingCartEvents.destroyCart(request, response);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="68FE2AA563005B3C7741C700F6937E8F">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2826 of DatabaseUtil.java, the method deleteDeclaredIndex() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2826</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(deleteIndexSql);
        } catch (SQLException e) {
            return &quot;SQL Exception while executing the following:\n&quot; + deleteIndexSql + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>104</LineStart>
<Snippet>        persistMap.put(&quot;userLogin&quot;, userLogin);
        try {
            Map&lt;String, Object&gt; persistResult = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, persistMap);
            contentId = (String)persistResult.get(&quot;contentId&quot;);
            //request.setAttribute(&quot;contentId&quot;, contentId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="D7826852E622A58ADC6CCEC8691290D3">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 363 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>363</LineStart>
<Snippet>            _ind = 1;
            if (specifyTypeAndConcur) {
                _ps = _connection.prepareStatement(sql, resultSetType, resultSetConcurrency);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {</Snippet>
                            </Primary>
                            <Source>
<FileName>WebPosEvents.java</FileName>
<FilePath>specialpurpose/webpos/src/org/ofbiz/webpos/WebPosEvents.java</FilePath>
<LineStart>94</LineStart>
<Snippet>            GenericValue productStore = ProductStoreWorker.getProductStore(productStoreId, delegator);
            String facilityId = null;
            String currencyUomId = request.getParameter(&quot;currencyUomId&quot;);

            if (UtilValidate.isNotEmpty(productStore)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="1F06F4A4F28227BE1182C16C0A15CBC6">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 1985 of DatabaseUtil.java, the method renameColumn() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>1985</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(sql);
        } catch (SQLException e) {
            return &quot;SQL Exception while executing the following:\n&quot; + sql + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>CoreEvents.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/CoreEvents.java</FilePath>
<LineStart>412</LineStart>
<Snippet>        try {
            if (null!=request.getParameter(&quot;_RUN_SYNC_&quot;) &amp;&amp; request.getParameter(&quot;_RUN_SYNC_&quot;).equals(&quot;Y&quot;)) {
                syncServiceResult = dispatcher.runSync(serviceName, serviceContext);
            } else {
                dispatcher.schedule(jobName, poolName, serviceName, serviceContext, startTime, frequency, interval, count, endTime, maxRetry);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="F53AA509042B962A7AAC252B4887C29F">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1354</LineStart>
<Snippet>        ShoppingCart cart = null;
        try {
            Map&lt;String, Object&gt; outMap = dispatcher.runSync(&quot;loadCartFromQuote&quot;,
                    UtilMisc.&lt;String, Object&gt;toMap(&quot;quoteId&quot;, quoteId,
                            &quot;applyQuoteAdjustments&quot;, &quot;true&quot;,</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="1C8FCB68247D8866BFE428A6ACEF72C1">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>150</LineStart>
<Snippet>            String contentAssocTypeId = (String)passedParams.get(&quot;contentAssocTypeId&quot;);
            ftlContext.put(&quot;contentAssocTypeId&quot;, null); // Don't post assoc at this time
            Map&lt;String, Object&gt; ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
            boolean isError = ModelService.RESPOND_ERROR.equals(ftlResults.get(ModelService.RESPONSE_MESSAGE));
            if (isError) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="7FEB352703C513BF199E6EEB367D2855">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2826 of DatabaseUtil.java, the method deleteDeclaredIndex() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2826</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(deleteIndexSql);
        } catch (SQLException e) {
            return &quot;SQL Exception while executing the following:\n&quot; + deleteIndexSql + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>575</LineStart>
<Snippet>        while (e.hasMoreElements()) {
            String name = e.nextElement();
            request.setAttribute(name, request.getParameter(name));
        }
    }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="D069B7A6FCF639A3F4DD2D27D77E34D3">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>312</LineStart>
<Snippet>            contentCtx.put(&quot;fromDate&quot;, UtilDateTime.nowTimestamp());
            contentCtx.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; contentResult = dispatcher.runSync(&quot;createContent&quot;, contentCtx);
            contentId = contentResult.get(&quot;contentId&quot;).toString();
        } catch (Exception e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="7AB58321841EE54B4010A4433BCF5AC3">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>LayoutEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/layout/LayoutEvents.java</FilePath>
<LineStart>552</LineStart>
<Snippet>            context.put(&quot;textData&quot;, paramMap.get(&quot;textData&quot;));
            context.put(&quot;contentAssocTypeId&quot;, null);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, context);
            boolean isError = ModelService.RESPOND_ERROR.equals(result.get(ModelService.RESPONSE_MESSAGE));
            if (isError) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="EA29789CC716146B634ACE79EC0B37DD">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 366 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>366</LineStart>
<Snippet>                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {
                _ps = _connection.prepareStatement(sql);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] (def) _ps=&quot; + _ps, module);
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>563</LineStart>
<Snippet>        session.setAttribute(&quot;_CLIENT_FORWARDED_FOR_&quot;, request.getHeader(&quot;X-Forwarded-For&quot;));
        session.setAttribute(&quot;_CLIENT_REMOTE_ADDR_&quot;, request.getRemoteAddr());
        session.setAttribute(&quot;_CLIENT_REMOTE_HOST_&quot;, request.getRemoteHost());
        session.setAttribute(&quot;_CLIENT_REMOTE_USER_&quot;, request.getRemoteUser());
    }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="3446B5EC91BB0D1B3C68ECF491CE7BF0">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>688</LineStart>
<Snippet>        
        // TODO: the code below here needs some cleanups
        String billToCustomerPartyId = request.getParameter(&quot;billToCustomerPartyId_o_0&quot;);
        if (UtilValidate.isEmpty(billToCustomerPartyId) &amp;&amp; UtilValidate.isEmpty(supplierPartyId)) {
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, UtilProperties.getMessage(resource_error, &quot;OrderCouldNotInitPurchaseOrder&quot;, locale));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="44F386CAC199951222E9DBA471B56498">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>SearchEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/search/SearchEvents.java</FilePath>
<LineStart>60</LineStart>
<Snippet>        serviceInMap.put(&quot;contentId&quot;, siteId);
        try {
            result = dispatcher.runSync(&quot;indexTree&quot;, serviceInMap);
        } catch (GenericServiceException e) {
            String errorMsg = &quot;Error calling the indexTree service.&quot; + e.toString();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="9A54F283C1F8EA97A18E28AAE6D63ED2">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>CheckOutEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/CheckOutEvents.java</FilePath>
<LineStart>384</LineStart>
<Snippet>        if (UtilValidate.isNotEmpty(taxAuthPartyGeoIds)) {
            try {
                Map&lt;String, Object&gt; createCustomerTaxAuthInfoResult = dispatcher.runSync(&quot;createCustomerTaxAuthInfo&quot;,
                        UtilMisc.toMap(&quot;partyId&quot;, cart.getPartyId(), &quot;taxAuthPartyGeoIds&quot;, taxAuthPartyGeoIds, &quot;partyTaxId&quot;, partyTaxId, &quot;isExempt&quot;, isExempt));
                ServiceUtil.getMessages(request, createCustomerTaxAuthInfoResult, null);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="ADF9BAD020D29E3192A922D10822026B">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2085 of DatabaseUtil.java, the method repairColumnSize() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2085</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(sql2);
        } catch (SQLException e) {
            String thisMsg = &quot;SQL Exception while executing the following:\n&quot; + sql2 + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilObject.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilObject.java</FilePath>
<LineStart>137</LineStart>
<Snippet>                ObjectInputStream ois = new ObjectInputStream(bis, Thread.currentThread().getContextClassLoader());
                try {
                    obj = ois.readObject();
                } catch (ClassNotFoundException e) {
                    Debug.logError(e, module);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="4348DC635886A94C5F3A28C0884C148F">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 1922 of DatabaseUtil.java, the method addColumn() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>1922</LineStart>
<Snippet>            try {
                stmt = connection.createStatement();
                stmt.executeUpdate(sql2);
            } catch (SQLException e2) {
                // if this also fails report original error, not this error...</Snippet>
                            </Primary>
                            <Source>
<FileName>CoreEvents.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/CoreEvents.java</FilePath>
<LineStart>412</LineStart>
<Snippet>        try {
            if (null!=request.getParameter(&quot;_RUN_SYNC_&quot;) &amp;&amp; request.getParameter(&quot;_RUN_SYNC_&quot;).equals(&quot;Y&quot;)) {
                syncServiceResult = dispatcher.runSync(serviceName, serviceContext);
            } else {
                dispatcher.schedule(jobName, poolName, serviceName, serviceContext, startTime, frequency, interval, count, endTime, maxRetry);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="0D7149B5C29B3016C24E77DA4D7CA920">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>409</LineStart>
<Snippet>        }
        
        String frameContentId = request.getParameter(&quot;frameContentId&quot;);
        Delegator delegator = (Delegator) request.getAttribute(&quot;delegator&quot;);
        </Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="BBDF01102956BCE9FD1CEF8B2EB32A63">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>OrderManagerEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/OrderManagerEvents.java</FilePath>
<LineStart>222</LineStart>
<Snippet>                    Map&lt;String, Object&gt; results = null;
                    try {
                        results = dispatcher.runSync(&quot;createPaymentFromPreference&quot;, UtilMisc.toMap(&quot;userLogin&quot;, userLogin,
                                &quot;orderPaymentPreferenceId&quot;, paymentPreference.get(&quot;orderPaymentPreferenceId&quot;), &quot;paymentRefNum&quot;, paymentReference,
                                &quot;paymentFromId&quot;, placingCustomer.getString(&quot;partyId&quot;), &quot;comments&quot;, &quot;Payment received offline and manually entered.&quot;));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="4B779972D7428982D19F6509F7330DD5">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>CheckOutEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/CheckOutEvents.java</FilePath>
<LineStart>131</LineStart>
<Snippet>            if (UtilValidate.isNotEmpty(taxAuthPartyGeoIds)) {
                try {
                    Map&lt;String, ? extends Object&gt; createCustomerTaxAuthInfoResult = dispatcher.runSync(&quot;createCustomerTaxAuthInfo&quot;,
                            UtilMisc.&lt;String, Object&gt;toMap(&quot;partyId&quot;, cart.getPartyId(), &quot;taxAuthPartyGeoIds&quot;, taxAuthPartyGeoIds, &quot;partyTaxId&quot;, partyTaxId, &quot;isExempt&quot;, isExempt, &quot;userLogin&quot;, userLogin));
                    ServiceUtil.getMessages(request, createCustomerTaxAuthInfoResult, null);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="CB8921EB6C4CF5F48E72534CA7657E81">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>OrderManagerEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/OrderManagerEvents.java</FilePath>
<LineStart>222</LineStart>
<Snippet>                    Map&lt;String, Object&gt; results = null;
                    try {
                        results = dispatcher.runSync(&quot;createPaymentFromPreference&quot;, UtilMisc.toMap(&quot;userLogin&quot;, userLogin,
                                &quot;orderPaymentPreferenceId&quot;, paymentPreference.get(&quot;orderPaymentPreferenceId&quot;), &quot;paymentRefNum&quot;, paymentReference,
                                &quot;paymentFromId&quot;, placingCustomer.getString(&quot;partyId&quot;), &quot;comments&quot;, &quot;Payment received offline and manually entered.&quot;));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="37F799EE410B4309A2A0DED66FE4BCFA">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>LoginWorker.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/LoginWorker.java</FilePath>
<LineStart>264</LineStart>
<Snippet>
                // keep the previous request name in the session
                session.setAttribute(&quot;_PREVIOUS_REQUEST_&quot;, request.getPathInfo());

                // NOTE: not using the old _PREVIOUS_PARAMS_ attribute at all because it was a security hole as it was used to put data in the URL (never encrypted) that was originally in a form field that may have been encrypted</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="B0686DC4DAA7D1BCB3D408585153B12A">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>ShipmentEvents.java</FileName>
<FilePath>applications/product/src/org/ofbiz/shipment/shipment/ShipmentEvents.java</FilePath>
<LineStart>50</LineStart>
<Snippet>        String shipmentId = request.getParameter(&quot;shipmentId&quot;);
        String shipmentRouteSegmentId = request.getParameter(&quot;shipmentRouteSegmentId&quot;);
        String shipmentPackageSeqId = request.getParameter(&quot;shipmentPackageSeqId&quot;);

        GenericValue shipmentPackageRouteSeg = null;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="24040902528931A19C2CDE39F62A504D">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 366 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>366</LineStart>
<Snippet>                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {
                _ps = _connection.prepareStatement(sql);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] (def) _ps=&quot; + _ps, module);
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>945</LineStart>
<Snippet>            newCart = cartList.remove(cartIndex);
        } else {
            String productStoreId = request.getParameter(&quot;productStoreId&quot;);
            if (UtilValidate.isNotEmpty(productStoreId)) {
                session.setAttribute(&quot;productStoreId&quot;, productStoreId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="F5C2489D0D1E0D5B0374F875A1FDC260">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>ProductionRunEvents.java</FileName>
<FilePath>applications/manufacturing/src/org/ofbiz/manufacturing/jobshopmgt/ProductionRunEvents.java</FilePath>
<LineStart>94</LineStart>
<Snippet>            inputMap.put(&quot;lotId&quot;, parameters.get(&quot;lotId&quot;));
            inputMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;productionRunDeclareAndProduce&quot;, inputMap);
            if (ServiceUtil.isError(result)) {
                request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, ServiceUtil.getErrorMessage(result));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="A5D1A22D0928D1659299BC9F2A960246">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 1894 of DatabaseUtil.java, the method addColumn() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>1894</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(sql);
        } catch (SQLException e) {
            // if that failed try the alternate syntax real quick</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceEventHandler.java</FilePath>
<LineStart>337</LineStart>
<Snippet>                dispatcher.runAsync(serviceName, serviceContext);
            } else {
                result = dispatcher.runSync(serviceName, serviceContext);
            }
        } catch (ServiceAuthException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="7358876BD0C52E92A967526C834AEEFE">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>ProductEvents.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/product/ProductEvents.java</FilePath>
<LineStart>804</LineStart>
<Snippet>        //Timestamp nowTimestamp = UtilDateTime.nowTimestamp();
        //GenericValue userLogin = (GenericValue) request.getSession().getAttribute(&quot;userLogin&quot;);
        String productId = request.getParameter(&quot;productId&quot;);
        String productFeatureId = request.getParameter(&quot;productFeatureId&quot;);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="F39CEAA634F660D2F4567A54E0442DF9">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>556</LineStart>
<Snippet>
        session.setAttribute(&quot;_WEBAPP_NAME_&quot;, UtilHttp.getApplicationName(request));
        session.setAttribute(&quot;_CLIENT_LOCALE_&quot;, request.getLocale());
        session.setAttribute(&quot;_CLIENT_REQUEST_&quot;, fullRequestUrl.toString());
        session.setAttribute(&quot;_CLIENT_USER_AGENT_&quot;, request.getHeader(&quot;User-Agent&quot;) != null ? request.getHeader(&quot;User-Agent&quot;) : &quot;&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="9BBA8E81999464B50FF3C8BAEFA332BF">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UrlServletHelper.java</FileName>
<FilePath>framework/common/src/org/ofbiz/common/UrlServletHelper.java</FilePath>
<LineStart>128</LineStart>
<Snippet>        }
        if (UtilValidate.isNotEmpty(httpRequest.getParameter(&quot;viewSort&quot;))) {
            viewSort = httpRequest.getParameter(&quot;viewSort&quot;);
        }
        if (UtilValidate.isNotEmpty(httpRequest.getParameter(&quot;searchString&quot;))) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="DCCDF90B3F65CA81DB1DB1493526EF85">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceEventHandler.java</FilePath>
<LineStart>271</LineStart>
<Snippet>                    // if the service modelParam has allow-html=&quot;any&quot; then get this direct from the request instead of in the parameters Map so there will be no canonicalization possibly messing things up
                    if (&quot;any&quot;.equals(modelParam.allowHtml)) {
                        value = request.getParameter(name);
                    } else {
                        // use the rawParametersMap from UtilHttp in order to also get pathInfo parameters, do canonicalization, etc</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="D8CCCAF5DDD40B5AD44749EE64FAF2E2">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>620</LineStart>
<Snippet>        // finally request (w/ a fall back to default)
        if (localeObject == null) {
            localeObject = request != null ? request.getLocale() : null;
        }
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="2C520CCEE0545FE31691122CEC8558F8">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>559</LineStart>
<Snippet>        session.setAttribute(&quot;_CLIENT_REQUEST_&quot;, fullRequestUrl.toString());
        session.setAttribute(&quot;_CLIENT_USER_AGENT_&quot;, request.getHeader(&quot;User-Agent&quot;) != null ? request.getHeader(&quot;User-Agent&quot;) : &quot;&quot;);
        session.setAttribute(&quot;_CLIENT_REFERER_&quot;, request.getHeader(&quot;Referer&quot;) != null ? request.getHeader(&quot;Referer&quot;) : &quot;&quot;);

        session.setAttribute(&quot;_CLIENT_FORWARDED_FOR_&quot;, request.getHeader(&quot;X-Forwarded-For&quot;));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="0E4E89BD93DC9635D04358BF81DFB519">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 1894 of DatabaseUtil.java, the method addColumn() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>1894</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(sql);
        } catch (SQLException e) {
            // if that failed try the alternate syntax real quick</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>505</LineStart>
<Snippet>        Map&lt;String, Object&gt; ftlResults = null;
        try {
            ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
        } catch (ServiceAuthException e) {
            String msg = e.getMessage();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="B01C197836312ED47182329EE2E5B390">
                            <Category>SQL Injection</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>ContextFilter.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ContextFilter.java</FilePath>
<LineStart>467</LineStart>
<Snippet>        while (initParamEnum.hasMoreElements()) {
            String initParamName = initParamEnum.nextElement();
            String initParamValue = config.getServletContext().getInitParameter(initParamName);
            if (Debug.verboseOn()) Debug.logVerbose(&quot;Adding web.xml context-param to application attribute with name [&quot; + initParamName + &quot;] and value [&quot; + initParamValue + &quot;]&quot;, module);
            config.getServletContext().setAttribute(initParamName, initParamValue);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="E7C40F9DE73750AB37D34940EABAF363">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>287</LineStart>
<Snippet>                imgContext.put(&quot;rootDir&quot;, &quot;rootDir&quot;);
                if (Debug.infoOn()) Debug.logInfo(&quot;[UploadContentAndImage]imgContext &quot; + imgContext, module);
                Map&lt;String, Object&gt; imgResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, imgContext);
                isError = ModelService.RESPOND_ERROR.equals(imgResults.get(ModelService.RESPONSE_MESSAGE));
                if (isError) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="2C617584970C8583929BCC5DC9272C9E">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1354</LineStart>
<Snippet>        ShoppingCart cart = null;
        try {
            Map&lt;String, Object&gt; outMap = dispatcher.runSync(&quot;loadCartFromQuote&quot;,
                    UtilMisc.&lt;String, Object&gt;toMap(&quot;quoteId&quot;, quoteId,
                            &quot;applyQuoteAdjustments&quot;, &quot;true&quot;,</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="128C3DD3B16DFB826BEB6908A546DECB">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>234</LineStart>
<Snippet>
    public static Map&lt;String, Object&gt; getUrlOnlyParameterMap(HttpServletRequest request) {
        return getUrlOnlyParameterMap(request.getQueryString(), request.getPathInfo());
    }
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="F07B56AF02A8A0A349A929BD630426E3">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2044 of DatabaseUtil.java, the method repairColumnSize() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2044</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            int changed = stmt.executeUpdate(sql1);
            if (Debug.infoOn()) Debug.logInfo(&quot;[moveData] &quot; + changed + &quot; records updated&quot;, module);
        } catch (SQLException e) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CoreEvents.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/CoreEvents.java</FilePath>
<LineStart>412</LineStart>
<Snippet>        try {
            if (null!=request.getParameter(&quot;_RUN_SYNC_&quot;) &amp;&amp; request.getParameter(&quot;_RUN_SYNC_&quot;).equals(&quot;Y&quot;)) {
                syncServiceResult = dispatcher.runSync(serviceName, serviceContext);
            } else {
                dispatcher.schedule(jobName, poolName, serviceName, serviceContext, startTime, frequency, interval, count, endTime, maxRetry);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="9CEB4F70253791C7F6E842C351954685">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>672</LineStart>
<Snippet>        HttpSession session = request.getSession();
        Locale locale = UtilHttp.getLocale(request);
        String supplierPartyId = request.getParameter(&quot;supplierPartyId_o_0&quot;);
        
        // check the preferred currency of the supplier, if set, use that for the cart, otherwise use system defaults.</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="B01D5302D58EF24576EAB132FE2EB177">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>402</LineStart>
<Snippet>        if(UtilValidate.isEmpty(request.getParameter(&quot;frameContentId&quot;))) {
            if (UtilValidate.isNotEmpty(request.getParameter(&quot;frameExistContentId&quot;)) &amp;&amp; UtilValidate.isNotEmpty(request.getParameter(&quot;frameExistDataResourceId&quot;))) {
                session.setAttribute(&quot;frameExistContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
                session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="D43C3B588550B09C0F73C5A96485047E">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>LoginEvents.java</FileName>
<FilePath>applications/securityext/src/org/ofbiz/securityext/login/LoginEvents.java</FilePath>
<LineStart>77</LineStart>
<Snippet>
            String username = request.getParameter(&quot;USERNAME&quot;);
            String password = request.getParameter(&quot;PASSWORD&quot;);

            if ((username != null) &amp;&amp; (&quot;true&quot;.equalsIgnoreCase(UtilProperties.getPropertyValue(&quot;security.properties&quot;, &quot;username.lowercase&quot;)))) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="6BCCC70C7FE249B7F162F7D182054878">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 1985 of DatabaseUtil.java, the method renameColumn() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>1985</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(sql);
        } catch (SQLException e) {
            return &quot;SQL Exception while executing the following:\n&quot; + sql + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>575</LineStart>
<Snippet>        while (e.hasMoreElements()) {
            String name = e.nextElement();
            request.setAttribute(name, request.getParameter(name));
        }
    }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="ABAE61BCBE00B47CB61EFD66A03A1341">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CatalogUrlServlet.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/category/CatalogUrlServlet.java</FilePath>
<LineStart>80</LineStart>
<Snippet>        Delegator delegator = (Delegator) getServletContext().getAttribute(&quot;delegator&quot;);

        String pathInfo = request.getPathInfo();
        List&lt;String&gt; pathElements = StringUtil.split(pathInfo, &quot;/&quot;);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="6879A1E9839A2332B348C1B6A64A4B19">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>303</LineStart>
<Snippet>            dataResourceCtx.put(&quot;mimeTypeId&quot;, &quot;image/png&quot;);
            dataResourceCtx.put(&quot;isPublic&quot;, &quot;Y&quot;);
            Map&lt;String, Object&gt; dataResourceResult = dispatcher.runSync(&quot;createDataResource&quot;, dataResourceCtx);
            dataResourceId = dataResourceResult.get(&quot;dataResourceId&quot;).toString();
            //create content</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="CCB236DBE8B9BED7A2B0B1BB0591332D">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 366 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>366</LineStart>
<Snippet>                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {
                _ps = _connection.prepareStatement(sql);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] (def) _ps=&quot; + _ps, module);
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>505</LineStart>
<Snippet>        Map&lt;String, Object&gt; ftlResults = null;
        try {
            ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
        } catch (ServiceAuthException e) {
            String msg = e.getMessage();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="9B0F647B35CA48DFF2CE7553ADB39594">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>AbstractOFBizAuthenticationHandler.java</FileName>
<FilePath>specialpurpose/ldap/src/org/ofbiz/ldap/commons/AbstractOFBizAuthenticationHandler.java</FilePath>
<LineStart>129</LineStart>
<Snippet>
        try {
            loginResult = dispatcher.runSync(&quot;userLogin&quot;, UtilMisc.toMap(&quot;login.username&quot;, username, &quot;login.password&quot;, password, &quot;visitId&quot;, visitId, &quot;locale&quot;, UtilHttp.getLocale(request)));
        } catch (GenericServiceException e) {
            throw new GenericServiceException(e.getLocalizedMessage());</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="3F5FECCCA6E41CA627D729766271CFE6">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>287</LineStart>
<Snippet>                imgContext.put(&quot;rootDir&quot;, &quot;rootDir&quot;);
                if (Debug.infoOn()) Debug.logInfo(&quot;[UploadContentAndImage]imgContext &quot; + imgContext, module);
                Map&lt;String, Object&gt; imgResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, imgContext);
                isError = ModelService.RESPOND_ERROR.equals(imgResults.get(ModelService.RESPONSE_MESSAGE));
                if (isError) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="06789F8051A35F7C23FE99BAB0EAA621">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 1771 of DatabaseUtil.java, the method createTable() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>1771</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(sqlBuf.toString());
        } catch (SQLException e) {
            return &quot;SQL Exception while executing the following:\n&quot; + sqlBuf.toString() + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceEventHandler.java</FilePath>
<LineStart>337</LineStart>
<Snippet>                dispatcher.runAsync(serviceName, serviceContext);
            } else {
                result = dispatcher.runSync(serviceName, serviceContext);
            }
        } catch (ServiceAuthException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="CBAB49B7C78B5F220639482BCE61F1D7">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>WebPosEvents.java</FileName>
<FilePath>specialpurpose/webpos/src/org/ofbiz/webpos/WebPosEvents.java</FilePath>
<LineStart>58</LineStart>
<Snippet>        
        // get the posTerminalId
        String posTerminalId = (String) request.getParameter(&quot;posTerminalId&quot;);
        session.removeAttribute(&quot;shoppingCart&quot;);
        session.removeAttribute(&quot;webPosSession&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="F4F58617ECAED393AF5EEB9432D0434F">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 363 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>363</LineStart>
<Snippet>            _ind = 1;
            if (specifyTypeAndConcur) {
                _ps = _connection.prepareStatement(sql, resultSetType, resultSetConcurrency);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {</Snippet>
                            </Primary>
                            <Source>
<FileName>RequestHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/RequestHandler.java</FilePath>
<LineStart>128</LineStart>
<Snippet>        }

        String overrideViewUri = RequestHandler.getOverrideViewUri(request.getPathInfo());

        String requestMissingErrorMessage = &quot;Unknown request [&quot; + defaultRequestUri + &quot;]; this request does not exist or cannot be called directly.&quot;;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="A943E5DE0FE49B0888339F930DC9E02A">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>UrlServletHelper.java</FileName>
<FilePath>framework/common/src/org/ofbiz/common/UrlServletHelper.java</FilePath>
<LineStart>122</LineStart>
<Snippet>        
        if (UtilValidate.isNotEmpty(httpRequest.getParameter(&quot;viewIndex&quot;))) {
            viewIndex = httpRequest.getParameter(&quot;viewIndex&quot;);
        }
        if (UtilValidate.isNotEmpty(httpRequest.getParameter(&quot;viewSize&quot;))) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="FA499E0ADA39D73AE25E5A1CBB90C055">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 1922 of DatabaseUtil.java, the method addColumn() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>1922</LineStart>
<Snippet>            try {
                stmt = connection.createStatement();
                stmt.executeUpdate(sql2);
            } catch (SQLException e2) {
                // if this also fails report original error, not this error...</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>119</LineStart>
<Snippet>            contentRevisionMap.put(&quot;contentId&quot;, contentId);
            contentRevisionMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentRevisionAndItem&quot;, contentRevisionMap);
            keySet = result.keySet();
            iter = keySet.iterator();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="5144D17CF7F542B3B02E0ACA4547F1D2">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ProductEvents.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/product/ProductEvents.java</FilePath>
<LineStart>805</LineStart>
<Snippet>        //GenericValue userLogin = (GenericValue) request.getSession().getAttribute(&quot;userLogin&quot;);
        String productId = request.getParameter(&quot;productId&quot;);
        String productFeatureId = request.getParameter(&quot;productFeatureId&quot;);

        if (UtilValidate.isEmpty(productId) || UtilValidate.isEmpty(productFeatureId)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="D932A1386E12264BB14C0093D942B594">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CoreEvents.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/CoreEvents.java</FilePath>
<LineStart>516</LineStart>
<Snippet>    public static String runService(HttpServletRequest request, HttpServletResponse response) {
        // get the mode and service name
        String serviceName = request.getParameter(&quot;serviceName&quot;);
        String mode = request.getParameter(&quot;mode&quot;);
        Locale locale = UtilHttp.getLocale(request);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="02DDF759D2B02901668103938271DAC1">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>497</LineStart>
<Snippet>                    }
                    String formAction = &quot;/additemsurvey&quot;;
                    String nextPage = RequestHandler.getOverrideViewUri(request.getPathInfo());
                    if (nextPage != null) {
                        formAction = formAction + &quot;/&quot; + nextPage;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="48D9ED66C55AE0813B58A5D8A4A4486D">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>590</LineStart>
<Snippet>    public static StringBuffer getFullRequestUrl(HttpServletRequest request) {
        StringBuffer requestUrl = UtilHttp.getServerRootUrl(request);
        requestUrl.append(request.getRequestURI());
        if (request.getQueryString() != null) {
            requestUrl.append(&quot;?&quot; + request.getQueryString());</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="28F04DFB2230E5055946BD6962CB82FC">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 1771 of DatabaseUtil.java, the method createTable() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>1771</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(sqlBuf.toString());
        } catch (SQLException e) {
            return &quot;SQL Exception while executing the following:\n&quot; + sqlBuf.toString() + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceMultiEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceMultiEventHandler.java</FilePath>
<LineStart>308</LineStart>
<Snippet>                Map&lt;String, Object&gt; result = null;
                try {
                    result = dispatcher.runSync(serviceName, serviceContext);
                } catch (ServiceAuthException e) {
                    // not logging since the service engine already did</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="A9F2D048AF6DBA1966E19245C8A77F1B">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>303</LineStart>
<Snippet>            dataResourceCtx.put(&quot;mimeTypeId&quot;, &quot;image/png&quot;);
            dataResourceCtx.put(&quot;isPublic&quot;, &quot;Y&quot;);
            Map&lt;String, Object&gt; dataResourceResult = dispatcher.runSync(&quot;createDataResource&quot;, dataResourceCtx);
            dataResourceId = dataResourceResult.get(&quot;dataResourceId&quot;).toString();
            //create content</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="AB05C4BE1C040D9EAAEE081E5F9A13CD">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>348</LineStart>
<Snippet>        }
        String frameContentId = request.getParameter(&quot;frameContentId&quot;);
        String frameDataResourceId = request.getParameter(&quot;frameDataResourceId&quot;);
        
        if (UtilValidate.isEmpty(request.getParameter(&quot;imageWidth&quot;)) || UtilValidate.isEmpty(request.getParameter(&quot;imageHeight&quot;))) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="B9711151F2B91960AD0518F051FAC531">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 1894 of DatabaseUtil.java, the method addColumn() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>1894</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(sql);
        } catch (SQLException e) {
            // if that failed try the alternate syntax real quick</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>119</LineStart>
<Snippet>            contentRevisionMap.put(&quot;contentId&quot;, contentId);
            contentRevisionMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentRevisionAndItem&quot;, contentRevisionMap);
            keySet = result.keySet();
            iter = keySet.iterator();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="38A365CFD8E6E8200A24B08185F865CD">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 363 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>363</LineStart>
<Snippet>            _ind = 1;
            if (specifyTypeAndConcur) {
                _ps = _connection.prepareStatement(sql, resultSetType, resultSetConcurrency);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>303</LineStart>
<Snippet>            dataResourceCtx.put(&quot;mimeTypeId&quot;, &quot;image/png&quot;);
            dataResourceCtx.put(&quot;isPublic&quot;, &quot;Y&quot;);
            Map&lt;String, Object&gt; dataResourceResult = dispatcher.runSync(&quot;createDataResource&quot;, dataResourceCtx);
            dataResourceId = dataResourceResult.get(&quot;dataResourceId&quot;).toString();
            //create content</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="9A253D72B2724ED295ADD9A3D6872168">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 3048 of DatabaseUtil.java, the method deleteForeignKeyIndex() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>3048</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(deleteIndexSql);
        } catch (SQLException e) {
            return &quot;SQL Exception while executing the following:\n&quot; + deleteIndexSql + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>CoreEvents.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/CoreEvents.java</FilePath>
<LineStart>412</LineStart>
<Snippet>        try {
            if (null!=request.getParameter(&quot;_RUN_SYNC_&quot;) &amp;&amp; request.getParameter(&quot;_RUN_SYNC_&quot;).equals(&quot;Y&quot;)) {
                syncServiceResult = dispatcher.runSync(serviceName, serviceContext);
            } else {
                dispatcher.schedule(jobName, poolName, serviceName, serviceContext, startTime, frequency, interval, count, endTime, maxRetry);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="91A9A2B79A57989E223A344641832E93">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 366 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>366</LineStart>
<Snippet>                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {
                _ps = _connection.prepareStatement(sql);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] (def) _ps=&quot; + _ps, module);
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>TrackingCodeEvents.java</FileName>
<FilePath>applications/marketing/src/org/ofbiz/marketing/tracking/TrackingCodeEvents.java</FilePath>
<LineStart>93</LineStart>
<Snippet>     */
    public static String checkPartnerTrackingCodeUrlParam(HttpServletRequest request, HttpServletResponse response) {
        String trackingCodeId = request.getParameter(&quot;ptc&quot;);

        if (UtilValidate.isNotEmpty(trackingCodeId)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="5909F07C01B6C492C59316363956D2E1">
                            <Category>SQL Injection</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ContextFilter.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ContextFilter.java</FilePath>
<LineStart>485</LineStart>
<Snippet>        String serverId = (String) config.getServletContext().getAttribute(&quot;_serverId&quot;);
        if (serverId == null) {
            serverId = config.getServletContext().getInitParameter(&quot;ofbizServerName&quot;);
            config.getServletContext().setAttribute(&quot;_serverId&quot;, serverId);
        }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="5B4DEF2BFE720F5BFE0AE52148A562B7">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1388</LineStart>
<Snippet>        ShoppingCart cart = null;
        try {
            Map&lt;String, Object&gt; outMap = dispatcher.runSync(&quot;loadCartFromOrder&quot;,
                                                UtilMisc.&lt;String, Object&gt;toMap(&quot;orderId&quot;, orderId,
                                                        &quot;skipProductChecks&quot;, Boolean.TRUE, // the products have already been checked in the order, no need to check their validity again</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="360D6D805CA5C4435CB3858CDADCB7AA">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 363 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>363</LineStart>
<Snippet>            _ind = 1;
            if (specifyTypeAndConcur) {
                _ps = _connection.prepareStatement(sql, resultSetType, resultSetConcurrency);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1535</LineStart>
<Snippet>
        // TODO: re-factor and move this inside the ShoppingCart constructor
        String orderMode = request.getParameter(&quot;orderMode&quot;);
        if (orderMode != null) {
            cart.setOrderType(orderMode);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="262BADC5F31EB35BADE817535150EEB2">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>PayPalEvents.java</FileName>
<FilePath>applications/accounting/src/org/ofbiz/accounting/thirdparty/paypal/PayPalEvents.java</FilePath>
<LineStart>497</LineStart>
<Snippet>        try {
            String comment = UtilProperties.getMessage(resource, &quot;AccountingPaymentReceiveViaPayPal&quot;, locale);
            results = dispatcher.runSync(&quot;createPaymentFromPreference&quot;, UtilMisc.toMap(&quot;userLogin&quot;, userLogin,
                    &quot;orderPaymentPreferenceId&quot;, paymentPreference.get(&quot;orderPaymentPreferenceId&quot;), &quot;comments&quot;, comment));
        } catch (GenericServiceException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="8E08C060F3D346C9B34EF1A7162BCA82">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 366 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>366</LineStart>
<Snippet>                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {
                _ps = _connection.prepareStatement(sql);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] (def) _ps=&quot; + _ps, module);
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>558</LineStart>
<Snippet>        session.setAttribute(&quot;_CLIENT_LOCALE_&quot;, request.getLocale());
        session.setAttribute(&quot;_CLIENT_REQUEST_&quot;, fullRequestUrl.toString());
        session.setAttribute(&quot;_CLIENT_USER_AGENT_&quot;, request.getHeader(&quot;User-Agent&quot;) != null ? request.getHeader(&quot;User-Agent&quot;) : &quot;&quot;);
        session.setAttribute(&quot;_CLIENT_REFERER_&quot;, request.getHeader(&quot;Referer&quot;) != null ? request.getHeader(&quot;Referer&quot;) : &quot;&quot;);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="8C4C1CEB441AA8EBBC703A731048148F">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 3182 of DatabaseUtil.java, the method updateCharacterSetAndCollation() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>3182</LineStart>
<Snippet>                try {
                    stmt = connection.createStatement();
                    stmt.executeUpdate(sqlBuf.toString());
                } catch (SQLException e) {
                    String errMsg = &quot;SQL Exception while executing the following:\n&quot; + sqlBuf + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>104</LineStart>
<Snippet>        persistMap.put(&quot;userLogin&quot;, userLogin);
        try {
            Map&lt;String, Object&gt; persistResult = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, persistMap);
            contentId = (String)persistResult.get(&quot;contentId&quot;);
            //request.setAttribute(&quot;contentId&quot;, contentId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="921068EA47BF75C0DD44406BBCB4F4A6">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>RomeEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/RomeEventHandler.java</FilePath>
<LineStart>69</LineStart>
<Snippet>    public String invoke(Event event, RequestMap requestMap, HttpServletRequest request, HttpServletResponse response) throws EventHandlerException {
        // generate the main and entry links
        String entryLinkReq = request.getParameter(&quot;entryLinkReq&quot;);
        String mainLinkReq = request.getParameter(&quot;mainLinkReq&quot;);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="D8CCCAF5DDD40B5AD44749EE64FAF2E1">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>620</LineStart>
<Snippet>        // finally request (w/ a fall back to default)
        if (localeObject == null) {
            localeObject = request != null ? request.getLocale() : null;
        }
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="562CB3AADB601B296E4F2FF7DCFA792F">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>EbayEvents.java</FileName>
<FilePath>specialpurpose/ebaystore/src/org/ofbiz/ebaystore/EbayEvents.java</FilePath>
<LineStart>280</LineStart>
<Snippet>                String siteCode = apiContext.getSite().name();
                if (UtilValidate.isNotEmpty(session.getAttribute(&quot;itemListings_&quot;.concat(siteCode)))) {
                    request.setAttribute(&quot;productStoreId&quot;, request.getParameter(&quot;productStoreId&quot;));
                    return &quot;prepare&quot;;
                }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="B3FF522F2D820AAA59A88FFCA59BEC44">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 363 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>363</LineStart>
<Snippet>            _ind = 1;
            if (specifyTypeAndConcur) {
                _ps = _connection.prepareStatement(sql, resultSetType, resultSetConcurrency);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>268</LineStart>
<Snippet>        if (!&quot;image/png&quot;.equals(mimType)) {
            session.setAttribute(&quot;frameContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
            session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;The selected image type is incorrect, please select the image type *.PNG to upload.&quot;);
            return &quot;error&quot;;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="A2850054386052D16D5B77E9E96DC4CC">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>WebPosEvents.java</FileName>
<FilePath>specialpurpose/webpos/src/org/ofbiz/webpos/WebPosEvents.java</FilePath>
<LineStart>175</LineStart>
<Snippet>                            String productStoreId = webPosSession.getProductStoreId();
                            try {
                                featureMap = dispatcher.runSync(&quot;getProductFeatureSet&quot;, UtilMisc.toMap(&quot;productId&quot;, productId));
                                Set&lt;String&gt; featureSet = UtilGenerics.cast(featureMap.get(&quot;featureSet&quot;));
                                if (UtilValidate.isNotEmpty(featureSet)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="A9F2D048AF6DBA1966E19245C8A77F1C">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>303</LineStart>
<Snippet>            dataResourceCtx.put(&quot;mimeTypeId&quot;, &quot;image/png&quot;);
            dataResourceCtx.put(&quot;isPublic&quot;, &quot;Y&quot;);
            Map&lt;String, Object&gt; dataResourceResult = dispatcher.runSync(&quot;createDataResource&quot;, dataResourceCtx);
            dataResourceId = dataResourceResult.get(&quot;dataResourceId&quot;).toString();
            //create content</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="8FD29701BE10FFFBCDDC601DF8FEABB8">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 1922 of DatabaseUtil.java, the method addColumn() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>1922</LineStart>
<Snippet>            try {
                stmt = connection.createStatement();
                stmt.executeUpdate(sql2);
            } catch (SQLException e2) {
                // if this also fails report original error, not this error...</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceEventHandler.java</FilePath>
<LineStart>337</LineStart>
<Snippet>                dispatcher.runAsync(serviceName, serviceContext);
            } else {
                result = dispatcher.runSync(serviceName, serviceContext);
            }
        } catch (ServiceAuthException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="F1D4E44EDFC2CB1E2FF1325C0CA5ECD3">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>127</LineStart>
<Snippet>
            Object value = null;
            String[] paramArr = request.getParameterValues(name);
            if (paramArr != null) {
                if (paramArr.length &gt; 1) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="AC124C38906BB27AB3CAAF9A8326E2A9">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>LoginWorker.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/LoginWorker.java</FilePath>
<LineStart>264</LineStart>
<Snippet>
                // keep the previous request name in the session
                session.setAttribute(&quot;_PREVIOUS_REQUEST_&quot;, request.getPathInfo());

                // NOTE: not using the old _PREVIOUS_PARAMS_ attribute at all because it was a security hole as it was used to put data in the URL (never encrypted) that was originally in a form field that may have been encrypted</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="DEF49D732AFD6494B397D14192509C00">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>347</LineStart>
<Snippet>            return &quot;error&quot;;
        }
        String frameContentId = request.getParameter(&quot;frameContentId&quot;);
        String frameDataResourceId = request.getParameter(&quot;frameDataResourceId&quot;);
        </Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="1C044DECE9F9C5B1F61FE04780BACA8E">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1499</LineStart>
<Snippet>        String custRequestId = null;
        try {
            result = dispatcher.runSync(&quot;createCustRequestFromCart&quot;,
                    UtilMisc.toMap(&quot;cart&quot;, cart,
                            &quot;userLogin&quot;, userLogin));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="EF01803F1E387DE5ACE74A2EEBB4D5F9">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ICalWorker.java</FileName>
<FilePath>applications/workeffort/src/org/ofbiz/workeffort/workeffort/ICalWorker.java</FilePath>
<LineStart>285</LineStart>
<Snippet>        HttpSession session = request.getSession();
        LocalDispatcher dispatcher = (LocalDispatcher) request.getAttribute(&quot;dispatcher&quot;);
        Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;userLogin&quot;, serviceMap);
        if (ServiceUtil.isError(result) || ServiceUtil.isFailure(result)) {
            return;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="22BAF0B1CFF4A4213B008EE4995B910E">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>WebShoppingCart.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/WebShoppingCart.java</FilePath>
<LineStart>48</LineStart>
<Snippet>                WebSiteWorker.getWebSiteId(request), (locale != null ? locale : ProductStoreWorker.getStoreLocale(request)),
                (currencyUom != null ? currencyUom : ProductStoreWorker.getStoreCurrencyUomId(request)),
                request.getParameter(&quot;billToCustomerPartyId&quot;),
                (request.getParameter(&quot;supplierPartyId&quot;) != null ? request.getParameter(&quot;supplierPartyId&quot;) : request.getParameter(&quot;billFromVendorPartyId&quot;)));
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="CA966FF0495CA5E7EA012F6FF1D5D758">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>WebPosEvents.java</FileName>
<FilePath>specialpurpose/webpos/src/org/ofbiz/webpos/WebPosEvents.java</FilePath>
<LineStart>113</LineStart>
<Snippet>
            if (UtilValidate.isNotEmpty(posTerminalId)) {
                webPosSession = new WebPosSession(posTerminalId, null, userLogin, request.getLocale(), productStoreId, facilityId, currencyUomId, delegator, dispatcher, cart);
                session.setAttribute(&quot;webPosSession&quot;, webPosSession);
            } else {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="076613530F2AC112338A570025F6E202">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 363 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>363</LineStart>
<Snippet>            _ind = 1;
            if (specifyTypeAndConcur) {
                _ps = _connection.prepareStatement(sql, resultSetType, resultSetConcurrency);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>505</LineStart>
<Snippet>        Map&lt;String, Object&gt; ftlResults = null;
        try {
            ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
        } catch (ServiceAuthException e) {
            String msg = e.getMessage();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="41C3BC8168FF0953A9BF79414CFA12F7">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>ExpressCheckoutEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/thirdparty/paypal/ExpressCheckoutEvents.java</FilePath>
<LineStart>158</LineStart>
<Snippet>            Map&lt;String, Object&gt; result = null;
            try {
                result = dispatcher.runSync(serviceName, inMap);
            } catch (GenericServiceException e) {
                request.setAttribute(&quot;_EVENT_MESSAGE_&quot;, UtilProperties.getMessage(resourceErr, &quot;AccountingPayPalCommunicationError&quot;, locale));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="5DB8FB0D7285FEFF2E97C11EC58C7844">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2443 of DatabaseUtil.java, the method deleteForeignKey() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2443</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(sqlBuf.toString());
        } catch (SQLException e) {
            return &quot;SQL Exception while executing the following:\n&quot; + sqlBuf.toString() + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>575</LineStart>
<Snippet>        while (e.hasMoreElements()) {
            String name = e.nextElement();
            request.setAttribute(name, request.getParameter(name));
        }
    }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="92504CBC3B129DF97D0E9E468A42234F">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>558</LineStart>
<Snippet>        session.setAttribute(&quot;_CLIENT_LOCALE_&quot;, request.getLocale());
        session.setAttribute(&quot;_CLIENT_REQUEST_&quot;, fullRequestUrl.toString());
        session.setAttribute(&quot;_CLIENT_USER_AGENT_&quot;, request.getHeader(&quot;User-Agent&quot;) != null ? request.getHeader(&quot;User-Agent&quot;) : &quot;&quot;);
        session.setAttribute(&quot;_CLIENT_REFERER_&quot;, request.getHeader(&quot;Referer&quot;) != null ? request.getHeader(&quot;Referer&quot;) : &quot;&quot;);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="199CBB4B090E55574B26FB4B80DE3454">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>403</LineStart>
<Snippet>            if (UtilValidate.isNotEmpty(request.getParameter(&quot;frameExistContentId&quot;)) &amp;&amp; UtilValidate.isNotEmpty(request.getParameter(&quot;frameExistDataResourceId&quot;))) {
                session.setAttribute(&quot;frameExistContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
                session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            }
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;Required frame image content ID&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="4A9C5AAE075EDDFE6C362CF451671AF0">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingListEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppinglist/ShoppingListEvents.java</FilePath>
<LineStart>349</LineStart>
<Snippet>        Map&lt;String, Object&gt; result = null;
        try {
            result = dispatcher.runSync(&quot;updateShoppingListItem&quot;, serviceInMap);
        } catch (GenericServiceException e) {
            String errMsg = UtilProperties.getMessage(resource_error,&quot;shoppingListEvents.error_calling_update&quot;, locale) + &quot;: &quot;  + e.toString();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="0EB95C8F0900E45ACC0067E9691E6B39">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>268</LineStart>
<Snippet>        if (!&quot;image/png&quot;.equals(mimType)) {
            session.setAttribute(&quot;frameContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
            session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;The selected image type is incorrect, please select the image type *.PNG to upload.&quot;);
            return &quot;error&quot;;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="681EFD76D7D9AF632EED65B56E9BB8DE">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>402</LineStart>
<Snippet>        if(UtilValidate.isEmpty(request.getParameter(&quot;frameContentId&quot;))) {
            if (UtilValidate.isNotEmpty(request.getParameter(&quot;frameExistContentId&quot;)) &amp;&amp; UtilValidate.isNotEmpty(request.getParameter(&quot;frameExistDataResourceId&quot;))) {
                session.setAttribute(&quot;frameExistContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
                session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="241A7E474E2F3B504254FD57D7A3AD39">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2522 of DatabaseUtil.java, the method createPrimaryKey() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2522</LineStart>
<Snippet>            try {
                stmt = connection.createStatement();
                stmt.executeUpdate(sqlBuf.toString());
            } catch (SQLException e) {
                return &quot;SQL Exception while executing the following:\n&quot; + sqlBuf.toString() + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>104</LineStart>
<Snippet>        persistMap.put(&quot;userLogin&quot;, userLogin);
        try {
            Map&lt;String, Object&gt; persistResult = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, persistMap);
            contentId = (String)persistResult.get(&quot;contentId&quot;);
            //request.setAttribute(&quot;contentId&quot;, contentId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="7A07B3975EB9411CECE29BA1A066A8C4">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 1771 of DatabaseUtil.java, the method createTable() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>1771</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(sqlBuf.toString());
        } catch (SQLException e) {
            return &quot;SQL Exception while executing the following:\n&quot; + sqlBuf.toString() + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>CoreEvents.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/CoreEvents.java</FilePath>
<LineStart>412</LineStart>
<Snippet>        try {
            if (null!=request.getParameter(&quot;_RUN_SYNC_&quot;) &amp;&amp; request.getParameter(&quot;_RUN_SYNC_&quot;).equals(&quot;Y&quot;)) {
                syncServiceResult = dispatcher.runSync(serviceName, serviceContext);
            } else {
                dispatcher.schedule(jobName, poolName, serviceName, serviceContext, startTime, frequency, interval, count, endTime, maxRetry);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="B5153EC5CBB288648FC7A15D500CCE31">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1535</LineStart>
<Snippet>
        // TODO: re-factor and move this inside the ShoppingCart constructor
        String orderMode = request.getParameter(&quot;orderMode&quot;);
        if (orderMode != null) {
            cart.setOrderType(orderMode);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="C830D515A0147B5E9ADD2951BF4FED23">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>LoginWorker.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/LoginWorker.java</FilePath>
<LineStart>417</LineStart>
<Snippet>                Map&lt;String, Object&gt; resultPasswordChange = null;
                try {
                    resultPasswordChange = dispatcher.runSync(&quot;updatePassword&quot;, inMap);
                } catch (GenericServiceException e) {
                    Debug.logError(e, &quot;Error calling updatePassword service&quot;, module);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="DA9C6AFFD82684D8189B86A9EC698F29">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ContentManagementEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/ContentManagementEvents.java</FilePath>
<LineStart>288</LineStart>
<Snippet>                        serviceIn.put(&quot;targetOperationList&quot;, targetOperationList);
                        serviceIn.put(&quot;contentPurposeList&quot;, contentPurposeList);
                        results = dispatcher.runSync(&quot;createContentAssoc&quot;, serviceIn);
                        responseMessage = (String)results.get(ModelService.RESPONSE_MESSAGE);
                        if (UtilValidate.isNotEmpty(responseMessage)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="59070C088F553997E38956F96F484E00">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>ShipmentEvents.java</FileName>
<FilePath>applications/product/src/org/ofbiz/shipment/shipment/ShipmentEvents.java</FilePath>
<LineStart>48</LineStart>
<Snippet>        Delegator delegator = (Delegator) request.getAttribute(&quot;delegator&quot;);

        String shipmentId = request.getParameter(&quot;shipmentId&quot;);
        String shipmentRouteSegmentId = request.getParameter(&quot;shipmentRouteSegmentId&quot;);
        String shipmentPackageSeqId = request.getParameter(&quot;shipmentPackageSeqId&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="A6EDCB4B453C9672CDAB003CDAEF821A">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2044 of DatabaseUtil.java, the method repairColumnSize() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2044</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            int changed = stmt.executeUpdate(sql1);
            if (Debug.infoOn()) Debug.logInfo(&quot;[moveData] &quot; + changed + &quot; records updated&quot;, module);
        } catch (SQLException e) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>104</LineStart>
<Snippet>        persistMap.put(&quot;userLogin&quot;, userLogin);
        try {
            Map&lt;String, Object&gt; persistResult = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, persistMap);
            contentId = (String)persistResult.get(&quot;contentId&quot;);
            //request.setAttribute(&quot;contentId&quot;, contentId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="1C044DECE9F9C5B1F61FE04780BACA8F">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1499</LineStart>
<Snippet>        String custRequestId = null;
        try {
            result = dispatcher.runSync(&quot;createCustRequestFromCart&quot;,
                    UtilMisc.toMap(&quot;cart&quot;, cart,
                            &quot;userLogin&quot;, userLogin));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="60085A54849664B8823B75C650813286">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>251</LineStart>
<Snippet>                txtContext.put(&quot;mapKey&quot;, &quot;ARTICLE&quot;);
                txtContext.put(&quot;dataTemplateTypeId&quot;, &quot;NONE&quot;);
                Map&lt;String, Object&gt; txtResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, txtContext);
                isError = ModelService.RESPOND_ERROR.equals(txtResults.get(ModelService.RESPONSE_MESSAGE));
                if (isError) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="F41DF895073DE4E6B89D88EF179D23CA">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>505</LineStart>
<Snippet>        Map&lt;String, Object&gt; ftlResults = null;
        try {
            ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
        } catch (ServiceAuthException e) {
            String msg = e.getMessage();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="02C3FFE65D6D4EA4E8852A9329B932CE">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2917 of DatabaseUtil.java, the method createForeignKeyIndex() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2917</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(createIndexSql);
        } catch (SQLException e) {
            return &quot;SQL Exception while executing the following:\n&quot; + createIndexSql + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>CoreEvents.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/CoreEvents.java</FilePath>
<LineStart>412</LineStart>
<Snippet>        try {
            if (null!=request.getParameter(&quot;_RUN_SYNC_&quot;) &amp;&amp; request.getParameter(&quot;_RUN_SYNC_&quot;).equals(&quot;Y&quot;)) {
                syncServiceResult = dispatcher.runSync(serviceName, serviceContext);
            } else {
                dispatcher.schedule(jobName, poolName, serviceName, serviceContext, startTime, frequency, interval, count, endTime, maxRetry);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="0C873BD1BD369F128FE5BDC1AC1842C8">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CheckOutEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/CheckOutEvents.java</FilePath>
<LineStart>384</LineStart>
<Snippet>        if (UtilValidate.isNotEmpty(taxAuthPartyGeoIds)) {
            try {
                Map&lt;String, Object&gt; createCustomerTaxAuthInfoResult = dispatcher.runSync(&quot;createCustomerTaxAuthInfo&quot;,
                        UtilMisc.toMap(&quot;partyId&quot;, cart.getPartyId(), &quot;taxAuthPartyGeoIds&quot;, taxAuthPartyGeoIds, &quot;partyTaxId&quot;, partyTaxId, &quot;isExempt&quot;, isExempt));
                ServiceUtil.getMessages(request, createCustomerTaxAuthInfoResult, null);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="F88142B7F4833D2B25291041CD54B9D8">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>GlEvents.java</FileName>
<FilePath>applications/accounting/src/org/ofbiz/accounting/GlEvents.java</FilePath>
<LineStart>86</LineStart>
<Snippet>    Map&lt;String, Object&gt; glReconResult = null;
    try {
        glReconResult = dispatcher.runSync(&quot;createGlReconciliation&quot;, fieldMap); //create GlReconciliation for the glAccountId
        if (ServiceUtil.isError(glReconResult)) {
            return &quot;error&quot;;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="E2A8CE1CAA43694D479CC647A84BBD98">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 3182 of DatabaseUtil.java, the method updateCharacterSetAndCollation() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>3182</LineStart>
<Snippet>                try {
                    stmt = connection.createStatement();
                    stmt.executeUpdate(sqlBuf.toString());
                } catch (SQLException e) {
                    String errMsg = &quot;SQL Exception while executing the following:\n&quot; + sqlBuf + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceMultiEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceMultiEventHandler.java</FilePath>
<LineStart>308</LineStart>
<Snippet>                Map&lt;String, Object&gt; result = null;
                try {
                    result = dispatcher.runSync(serviceName, serviceContext);
                } catch (ServiceAuthException e) {
                    // not logging since the service engine already did</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="B721F92129E00EC545DDC318DE70A80C">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ShipmentEvents.java</FileName>
<FilePath>applications/product/src/org/ofbiz/shipment/shipment/ShipmentEvents.java</FilePath>
<LineStart>49</LineStart>
<Snippet>
        String shipmentId = request.getParameter(&quot;shipmentId&quot;);
        String shipmentRouteSegmentId = request.getParameter(&quot;shipmentRouteSegmentId&quot;);
        String shipmentPackageSeqId = request.getParameter(&quot;shipmentPackageSeqId&quot;);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="CA966FF0495CA5E7EA012F6FF1D5D757">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>WebPosEvents.java</FileName>
<FilePath>specialpurpose/webpos/src/org/ofbiz/webpos/WebPosEvents.java</FilePath>
<LineStart>108</LineStart>
<Snippet>
            if (UtilValidate.isEmpty(cart)) {
                cart = new ShoppingCart(delegator, productStoreId, request.getLocale(), currencyUomId);
                session.setAttribute(&quot;shoppingCart&quot;, cart);
            }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="B3FF522F2D820AAA59A88FFCA59BEC43">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 363 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>363</LineStart>
<Snippet>            _ind = 1;
            if (specifyTypeAndConcur) {
                _ps = _connection.prepareStatement(sql, resultSetType, resultSetConcurrency);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>262</LineStart>
<Snippet>        if (UtilValidate.isEmpty(imageName) || UtilValidate.isEmpty(imageData)) {
            session.setAttribute(&quot;frameContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
            session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;There is no frame image, please select the image type *.PNG  uploading.&quot;);
            return &quot;error&quot;;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="B9C6542BFDC77585EDA69147213DF004">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CheckOutEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/CheckOutEvents.java</FilePath>
<LineStart>300</LineStart>
<Snippet>
        if (UtilValidate.isNotEmpty(request.getParameter(&quot;issuerId&quot;))) {
            request.setAttribute(&quot;issuerId&quot;, request.getParameter(&quot;issuerId&quot;));
        }
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="CE90238A7D64C029B5584E3015780C4F">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>575</LineStart>
<Snippet>        while (e.hasMoreElements()) {
            String name = e.nextElement();
            request.setAttribute(name, request.getParameter(name));
        }
    }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="664B20CCC499FF034ABD0E184FA22B77">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2699 of DatabaseUtil.java, the method createDeclaredIndex() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2699</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(createIndexSql);
        } catch (SQLException e) {
            return &quot;SQL Exception while executing the following:\n&quot; + createIndexSql + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>104</LineStart>
<Snippet>        persistMap.put(&quot;userLogin&quot;, userLogin);
        try {
            Map&lt;String, Object&gt; persistResult = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, persistMap);
            contentId = (String)persistResult.get(&quot;contentId&quot;);
            //request.setAttribute(&quot;contentId&quot;, contentId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="E65FE26BE91A20286E5D8781896C23D5">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>TrackingCodeEvents.java</FileName>
<FilePath>applications/marketing/src/org/ofbiz/marketing/tracking/TrackingCodeEvents.java</FilePath>
<LineStart>372</LineStart>
<Snippet>
        String trackingCodeId = request.getParameter(&quot;autoTrackingCode&quot;);
        if (UtilValidate.isEmpty(trackingCodeId)) trackingCodeId = request.getParameter(&quot;atc&quot;);
        if (UtilValidate.isEmpty(trackingCodeId)) {
            Cookie[] cookies = request.getCookies();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="F45D781635B8D1A866F66137E83681EC">
                            <Category>SQL Injection</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 363 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>363</LineStart>
<Snippet>            _ind = 1;
            if (specifyTypeAndConcur) {
                _ps = _connection.prepareStatement(sql, resultSetType, resultSetConcurrency);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {</Snippet>
                            </Primary>
                            <Source>
<FileName>ContextFilter.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ContextFilter.java</FilePath>
<LineStart>467</LineStart>
<Snippet>        while (initParamEnum.hasMoreElements()) {
            String initParamName = initParamEnum.nextElement();
            String initParamValue = config.getServletContext().getInitParameter(initParamName);
            if (Debug.verboseOn()) Debug.logVerbose(&quot;Adding web.xml context-param to application attribute with name [&quot; + initParamName + &quot;] and value [&quot; + initParamValue + &quot;]&quot;, module);
            config.getServletContext().setAttribute(initParamName, initParamValue);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="D9EC9DD2605EFC1FC154D46DE0ACF79A">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>LoginWorker.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/LoginWorker.java</FilePath>
<LineStart>397</LineStart>
<Snippet>            // get the visit id to pass to the userLogin for history
            String visitId = VisitHandler.getVisitId(session);
            result = dispatcher.runSync(&quot;userLogin&quot;, UtilMisc.toMap(&quot;login.username&quot;, username, &quot;login.password&quot;, password, &quot;visitId&quot;, visitId, &quot;locale&quot;, UtilHttp.getLocale(request)));
        } catch (GenericServiceException e) {
            Debug.logError(e, &quot;Error calling userLogin service&quot;, module);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="1359845824A134D22982DFC3CCE3DA9C">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>RomeEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/RomeEventHandler.java</FilePath>
<LineStart>70</LineStart>
<Snippet>        // generate the main and entry links
        String entryLinkReq = request.getParameter(&quot;entryLinkReq&quot;);
        String mainLinkReq = request.getParameter(&quot;mainLinkReq&quot;);

        // create the links; but the query string must be created by the service</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="AD8D5A7CA11B493C13080A4A90BE9760">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>505</LineStart>
<Snippet>        Map&lt;String, Object&gt; ftlResults = null;
        try {
            ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
        } catch (ServiceAuthException e) {
            String msg = e.getMessage();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="5909F07C01B6C492C59316363956D2E2">
                            <Category>SQL Injection</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ContextFilter.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ContextFilter.java</FilePath>
<LineStart>485</LineStart>
<Snippet>        String serverId = (String) config.getServletContext().getAttribute(&quot;_serverId&quot;);
        if (serverId == null) {
            serverId = config.getServletContext().getInitParameter(&quot;ofbizServerName&quot;);
            config.getServletContext().setAttribute(&quot;_serverId&quot;, serverId);
        }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57" iid="511D2F2FEDE5FDC4EC37D52D8585A69E">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 3127 of DatabaseUtil.java, the method updateCharacterSetAndCollation() invokes a SQL query built using potentially unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>3127</LineStart>
<Snippet>            try {
                stmt = connection.createStatement();
                stmt.executeUpdate(sqlTableBuf.toString());
            } catch (SQLException e) {
                String errMsg = &quot;SQL Exception while executing the following:\n&quot; + sqlTableBuf + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="3741B75590B8E0303448913FEE2A3807">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2609 of DatabaseUtil.java, the method deletePrimaryKey() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2609</LineStart>
<Snippet>            try {
                stmt = connection.createStatement();
                stmt.executeUpdate(sqlBuf.toString());
            } catch (SQLException e) {
                String errMsg = &quot;SQL Exception while executing the following:\n&quot; + sqlBuf.toString() + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>104</LineStart>
<Snippet>        persistMap.put(&quot;userLogin&quot;, userLogin);
        try {
            Map&lt;String, Object&gt; persistResult = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, persistMap);
            contentId = (String)persistResult.get(&quot;contentId&quot;);
            //request.setAttribute(&quot;contentId&quot;, contentId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="D0E8F0FD6C942D1D76EB6E38D460A5F4">
                            <Category>SQL Injection</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ContextFilter.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ContextFilter.java</FilePath>
<LineStart>389</LineStart>
<Snippet>        }
        // get the unique name of this dispatcher
        String dispatcherName = servletContext.getInitParameter(&quot;localDispatcherName&quot;);

        if (dispatcherName == null) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="7389E8CC798BB92653F3725702A99C3B">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>ProductEvents.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/product/ProductEvents.java</FilePath>
<LineStart>805</LineStart>
<Snippet>        //GenericValue userLogin = (GenericValue) request.getSession().getAttribute(&quot;userLogin&quot;);
        String productId = request.getParameter(&quot;productId&quot;);
        String productFeatureId = request.getParameter(&quot;productFeatureId&quot;);

        if (UtilValidate.isEmpty(productId) || UtilValidate.isEmpty(productFeatureId)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="4F443E0B74F78C81C6FA4BF20CBE610F">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 3048 of DatabaseUtil.java, the method deleteForeignKeyIndex() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>3048</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(deleteIndexSql);
        } catch (SQLException e) {
            return &quot;SQL Exception while executing the following:\n&quot; + deleteIndexSql + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>505</LineStart>
<Snippet>        Map&lt;String, Object&gt; ftlResults = null;
        try {
            ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
        } catch (ServiceAuthException e) {
            String msg = e.getMessage();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="AE4AEA981D8641B1640A65B972E8D0C3">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2917 of DatabaseUtil.java, the method createForeignKeyIndex() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2917</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(createIndexSql);
        } catch (SQLException e) {
            return &quot;SQL Exception while executing the following:\n&quot; + createIndexSql + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>505</LineStart>
<Snippet>        Map&lt;String, Object&gt; ftlResults = null;
        try {
            ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
        } catch (ServiceAuthException e) {
            String msg = e.getMessage();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="764719D6BE718CB99A0F5C68EF7EA088">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilObject.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilObject.java</FilePath>
<LineStart>137</LineStart>
<Snippet>                ObjectInputStream ois = new ObjectInputStream(bis, Thread.currentThread().getContextClassLoader());
                try {
                    obj = ois.readObject();
                } catch (ClassNotFoundException e) {
                    Debug.logError(e, module);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="41C3BC8168FF0953A9BF79414CFA12F6">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>ExpressCheckoutEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/thirdparty/paypal/ExpressCheckoutEvents.java</FilePath>
<LineStart>158</LineStart>
<Snippet>            Map&lt;String, Object&gt; result = null;
            try {
                result = dispatcher.runSync(serviceName, inMap);
            } catch (GenericServiceException e) {
                request.setAttribute(&quot;_EVENT_MESSAGE_&quot;, UtilProperties.getMessage(resourceErr, &quot;AccountingPayPalCommunicationError&quot;, locale));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="D54174BBD67EE93098183CB0F6EA4E0A">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>TrackingCodeEvents.java</FileName>
<FilePath>applications/marketing/src/org/ofbiz/marketing/tracking/TrackingCodeEvents.java</FilePath>
<LineStart>93</LineStart>
<Snippet>     */
    public static String checkPartnerTrackingCodeUrlParam(HttpServletRequest request, HttpServletResponse response) {
        String trackingCodeId = request.getParameter(&quot;ptc&quot;);

        if (UtilValidate.isNotEmpty(trackingCodeId)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="2BF0B9ABF4B1CCEB57CE0B7CC28D20BB">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2264 of DatabaseUtil.java, the method createForeignKey() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2264</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(sqlBuf.toString());
        } catch (SQLException e) {
            return &quot;SQL Exception while executing the following:\n&quot; + sqlBuf.toString() + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceMultiEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceMultiEventHandler.java</FilePath>
<LineStart>308</LineStart>
<Snippet>                Map&lt;String, Object&gt; result = null;
                try {
                    result = dispatcher.runSync(serviceName, serviceContext);
                } catch (ServiceAuthException e) {
                    // not logging since the service engine already did</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="BBDF01102956BCE9FD1CEF8B2EB32A62">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>OrderManagerEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/OrderManagerEvents.java</FilePath>
<LineStart>222</LineStart>
<Snippet>                    Map&lt;String, Object&gt; results = null;
                    try {
                        results = dispatcher.runSync(&quot;createPaymentFromPreference&quot;, UtilMisc.toMap(&quot;userLogin&quot;, userLogin,
                                &quot;orderPaymentPreferenceId&quot;, paymentPreference.get(&quot;orderPaymentPreferenceId&quot;), &quot;paymentRefNum&quot;, paymentReference,
                                &quot;paymentFromId&quot;, placingCustomer.getString(&quot;partyId&quot;), &quot;comments&quot;, &quot;Payment received offline and manually entered.&quot;));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="B7405A3AA550E513D00A05211958DECC">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2609 of DatabaseUtil.java, the method deletePrimaryKey() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2609</LineStart>
<Snippet>            try {
                stmt = connection.createStatement();
                stmt.executeUpdate(sqlBuf.toString());
            } catch (SQLException e) {
                String errMsg = &quot;SQL Exception while executing the following:\n&quot; + sqlBuf.toString() + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>575</LineStart>
<Snippet>        while (e.hasMoreElements()) {
            String name = e.nextElement();
            request.setAttribute(name, request.getParameter(name));
        }
    }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="45A13ADFD91B8F527A17DBF18B71D70E">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>LayoutEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/layout/LayoutEvents.java</FilePath>
<LineStart>483</LineStart>
<Snippet>                Debug.logVerbose(&quot;in createSubContent, context:&quot; + context, module);
            }
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, context);
            boolean isError = ModelService.RESPOND_ERROR.equals(result.get(ModelService.RESPONSE_MESSAGE));
            if (isError) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="63A0E305567F5F69A6016A07D362F631">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingListEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppinglist/ShoppingListEvents.java</FilePath>
<LineStart>349</LineStart>
<Snippet>        Map&lt;String, Object&gt; result = null;
        try {
            result = dispatcher.runSync(&quot;updateShoppingListItem&quot;, serviceInMap);
        } catch (GenericServiceException e) {
            String errMsg = UtilProperties.getMessage(resource_error,&quot;shoppingListEvents.error_calling_update&quot;, locale) + &quot;: &quot;  + e.toString();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="A67C251D4740A41CFF3D89C8D1AECD77">
                            <Category>SQL Injection</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ContextFilter.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ContextFilter.java</FilePath>
<LineStart>467</LineStart>
<Snippet>        while (initParamEnum.hasMoreElements()) {
            String initParamName = initParamEnum.nextElement();
            String initParamValue = config.getServletContext().getInitParameter(initParamName);
            if (Debug.verboseOn()) Debug.logVerbose(&quot;Adding web.xml context-param to application attribute with name [&quot; + initParamName + &quot;] and value [&quot; + initParamValue + &quot;]&quot;, module);
            config.getServletContext().setAttribute(initParamName, initParamValue);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="5DE0626989C502FFDF82DD02322F68A3">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>CheckOutEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/CheckOutEvents.java</FilePath>
<LineStart>300</LineStart>
<Snippet>
        if (UtilValidate.isNotEmpty(request.getParameter(&quot;issuerId&quot;))) {
            request.setAttribute(&quot;issuerId&quot;, request.getParameter(&quot;issuerId&quot;));
        }
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="EDB7FD4CB773D1DC58C452FD797BBE35">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 363 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>363</LineStart>
<Snippet>            _ind = 1;
            if (specifyTypeAndConcur) {
                _ps = _connection.prepareStatement(sql, resultSetType, resultSetConcurrency);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>261</LineStart>
<Snippet>        ByteBuffer imageData = (ByteBuffer) tempFile.get(&quot;imageData&quot;);
        if (UtilValidate.isEmpty(imageName) || UtilValidate.isEmpty(imageData)) {
            session.setAttribute(&quot;frameContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
            session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;There is no frame image, please select the image type *.PNG  uploading.&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="1CC25FBEAAA7CF1F019C5D77B4652AF0">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2085 of DatabaseUtil.java, the method repairColumnSize() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2085</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(sql2);
        } catch (SQLException e) {
            String thisMsg = &quot;SQL Exception while executing the following:\n&quot; + sql2 + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>CoreEvents.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/CoreEvents.java</FilePath>
<LineStart>412</LineStart>
<Snippet>        try {
            if (null!=request.getParameter(&quot;_RUN_SYNC_&quot;) &amp;&amp; request.getParameter(&quot;_RUN_SYNC_&quot;).equals(&quot;Y&quot;)) {
                syncServiceResult = dispatcher.runSync(serviceName, serviceContext);
            } else {
                dispatcher.schedule(jobName, poolName, serviceName, serviceContext, startTime, frequency, interval, count, endTime, maxRetry);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="C575400735875F4239D52C8E78FD3870">
                            <Category>SQL Injection</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 366 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>366</LineStart>
<Snippet>                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {
                _ps = _connection.prepareStatement(sql);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] (def) _ps=&quot; + _ps, module);
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>ContextFilter.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ContextFilter.java</FilePath>
<LineStart>485</LineStart>
<Snippet>        String serverId = (String) config.getServletContext().getAttribute(&quot;_serverId&quot;);
        if (serverId == null) {
            serverId = config.getServletContext().getInitParameter(&quot;ofbizServerName&quot;);
            config.getServletContext().setAttribute(&quot;_serverId&quot;, serverId);
        }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="DA744635D516597EC2E12A582A21FE36">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>CoreEvents.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/CoreEvents.java</FilePath>
<LineStart>516</LineStart>
<Snippet>    public static String runService(HttpServletRequest request, HttpServletResponse response) {
        // get the mode and service name
        String serviceName = request.getParameter(&quot;serviceName&quot;);
        String mode = request.getParameter(&quot;mode&quot;);
        Locale locale = UtilHttp.getLocale(request);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="8DB35CFF164E4D5F999E3F8AA5B3142E">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 3048 of DatabaseUtil.java, the method deleteForeignKeyIndex() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>3048</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(deleteIndexSql);
        } catch (SQLException e) {
            return &quot;SQL Exception while executing the following:\n&quot; + deleteIndexSql + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceMultiEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceMultiEventHandler.java</FilePath>
<LineStart>308</LineStart>
<Snippet>                Map&lt;String, Object&gt; result = null;
                try {
                    result = dispatcher.runSync(serviceName, serviceContext);
                } catch (ServiceAuthException e) {
                    // not logging since the service engine already did</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="4E8205D999E0510CE689933407821A71">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>LoginEvents.java</FileName>
<FilePath>applications/securityext/src/org/ofbiz/securityext/login/LoginEvents.java</FilePath>
<LineStart>76</LineStart>
<Snippet>        if (userLogin == null) {

            String username = request.getParameter(&quot;USERNAME&quot;);
            String password = request.getParameter(&quot;PASSWORD&quot;);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="4B673A45-9AD5-4CBA-945B-11A3702CDF57" iid="477DACC3A5929083B121282F3908F144">
                            <Category>SQL Injection</Category>
                            <Folder>Low</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 439 of SQLProcessor.java, the method executeUpdate() invokes a SQL query built using potentially unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Low</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>439</LineStart>
<Snippet>        try {
            stmt = _connection.createStatement();
            return stmt.executeUpdate(sql);
        } catch (SQLException sqle) {
            // passing on this exception as nested, no need to log it here: Debug.logError(sqle, &quot;SQLProcessor.executeUpdate(sql) : ERROR : &quot;, module);</Snippet>
                            </Primary>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="740D15924CCFBB75080E35B4C9B25A16">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 1894 of DatabaseUtil.java, the method addColumn() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>1894</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(sql);
        } catch (SQLException e) {
            // if that failed try the alternate syntax real quick</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilObject.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilObject.java</FilePath>
<LineStart>137</LineStart>
<Snippet>                ObjectInputStream ois = new ObjectInputStream(bis, Thread.currentThread().getContextClassLoader());
                try {
                    obj = ois.readObject();
                } catch (ClassNotFoundException e) {
                    Debug.logError(e, module);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="ED0DBEDF46050C53CE8AD8A90D5E162C">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>182</LineStart>
<Snippet>                }
                if (UtilValidate.isNotEmpty(map.get(&quot;contentAssocTypeId&quot;))) {
                    ftlResults = dispatcher.runSync(&quot;createContentAssoc&quot;, map);
                    isError = ModelService.RESPOND_ERROR.equals(ftlResults.get(ModelService.RESPONSE_MESSAGE));
                    if (isError) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="9C9F43D63C9238B40860AD0931ED83B8">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>GenericWebEvent.java</FileName>
<FilePath>framework/webtools/src/org/ofbiz/webtools/GenericWebEvent.java</FilePath>
<LineStart>135</LineStart>
<Snippet>            }

            String fval = request.getParameter(field.getName());
            if (UtilValidate.isNotEmpty(fval)) {
                try {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="C97314435E6EBEE18AAE16B8D0D50139">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>CommonEvents.java</FileName>
<FilePath>framework/common/src/org/ofbiz/common/CommonEvents.java</FilePath>
<LineStart>231</LineStart>
<Snippet>    /** Simple event to set the users per-session currency uom value */
    public static String setSessionCurrencyUom(HttpServletRequest request, HttpServletResponse response) {
        String currencyUom = request.getParameter(&quot;currencyUom&quot;);
        if (UtilValidate.isNotEmpty(currencyUom)) {
            // update the session</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="9A54F283C1F8EA97A18E28AAE6D63ED1">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>CheckOutEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/CheckOutEvents.java</FilePath>
<LineStart>384</LineStart>
<Snippet>        if (UtilValidate.isNotEmpty(taxAuthPartyGeoIds)) {
            try {
                Map&lt;String, Object&gt; createCustomerTaxAuthInfoResult = dispatcher.runSync(&quot;createCustomerTaxAuthInfo&quot;,
                        UtilMisc.toMap(&quot;partyId&quot;, cart.getPartyId(), &quot;taxAuthPartyGeoIds&quot;, taxAuthPartyGeoIds, &quot;partyTaxId&quot;, partyTaxId, &quot;isExempt&quot;, isExempt));
                ServiceUtil.getMessages(request, createCustomerTaxAuthInfoResult, null);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="51EE1002DE653648A3308D3A7914F53A">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceMultiEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceMultiEventHandler.java</FilePath>
<LineStart>308</LineStart>
<Snippet>                Map&lt;String, Object&gt; result = null;
                try {
                    result = dispatcher.runSync(serviceName, serviceContext);
                } catch (ServiceAuthException e) {
                    // not logging since the service engine already did</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="2E6ACCC60E063CA4C32996334D276811">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 366 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>366</LineStart>
<Snippet>                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {
                _ps = _connection.prepareStatement(sql);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] (def) _ps=&quot; + _ps, module);
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>WebPosEvents.java</FileName>
<FilePath>specialpurpose/webpos/src/org/ofbiz/webpos/WebPosEvents.java</FilePath>
<LineStart>58</LineStart>
<Snippet>        
        // get the posTerminalId
        String posTerminalId = (String) request.getParameter(&quot;posTerminalId&quot;);
        session.removeAttribute(&quot;shoppingCart&quot;);
        session.removeAttribute(&quot;webPosSession&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="6ED40AFB049B81A4CB1BF2A202B59113">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>GoogleBaseSearchEvents.java</FileName>
<FilePath>specialpurpose/googlebase/src/org/ofbiz/googlebase/GoogleBaseSearchEvents.java</FilePath>
<LineStart>122</LineStart>
<Snippet>                    inMap.put(&quot;productStoreId&quot;, productStoreId);
                    inMap.put(&quot;allowRecommended&quot;, allowRecommended);
                    Map&lt;String, Object&gt; exportResult = dispatcher.runSync(&quot;exportToGoogle&quot;, inMap);
                    if (ServiceUtil.isError(exportResult)) {
                        List&lt;String&gt; errorMessages = UtilGenerics.checkList(exportResult.get(ModelService.ERROR_MESSAGE_LIST), String.class);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="414FC24A9C21085D609F6F45B3FE404D">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 366 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>366</LineStart>
<Snippet>                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {
                _ps = _connection.prepareStatement(sql);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] (def) _ps=&quot; + _ps, module);
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>119</LineStart>
<Snippet>            contentRevisionMap.put(&quot;contentId&quot;, contentId);
            contentRevisionMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentRevisionAndItem&quot;, contentRevisionMap);
            keySet = result.keySet();
            iter = keySet.iterator();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="41003840E1C3EF0F32DF2D53CDD2A81E">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 363 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>363</LineStart>
<Snippet>            _ind = 1;
            if (specifyTypeAndConcur) {
                _ps = _connection.prepareStatement(sql, resultSetType, resultSetConcurrency);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>127</LineStart>
<Snippet>
            Object value = null;
            String[] paramArr = request.getParameterValues(name);
            if (paramArr != null) {
                if (paramArr.length &gt; 1) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="69D2F186F053C93D52CC13B1C4831776">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UrlServletHelper.java</FileName>
<FilePath>framework/common/src/org/ofbiz/common/UrlServletHelper.java</FilePath>
<LineStart>131</LineStart>
<Snippet>        }
        if (UtilValidate.isNotEmpty(httpRequest.getParameter(&quot;searchString&quot;))) {
            searchString = httpRequest.getParameter(&quot;searchString&quot;);
        }
        </Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="1C49162AA528AEDE3CFA37DF69DC145F">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CommonEvents.java</FileName>
<FilePath>framework/common/src/org/ofbiz/common/CommonEvents.java</FilePath>
<LineStart>231</LineStart>
<Snippet>    /** Simple event to set the users per-session currency uom value */
    public static String setSessionCurrencyUom(HttpServletRequest request, HttpServletResponse response) {
        String currencyUom = request.getParameter(&quot;currencyUom&quot;);
        if (UtilValidate.isNotEmpty(currencyUom)) {
            // update the session</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="8E21F2049841AE4D7AD69E13C3396CDC">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingListEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppinglist/ShoppingListEvents.java</FilePath>
<LineStart>78</LineStart>
<Snippet>        GenericValue userLogin = (GenericValue) request.getSession().getAttribute(&quot;userLogin&quot;);

        String shoppingListId = request.getParameter(&quot;shoppingListId&quot;);
        String shoppingListTypeId = request.getParameter(&quot;shoppingListTypeId&quot;);
        String selectedCartItems[] = request.getParameterValues(&quot;selectedItem&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="DF8050397E6FDFE80027D146444E155F">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>590</LineStart>
<Snippet>    public static StringBuffer getFullRequestUrl(HttpServletRequest request) {
        StringBuffer requestUrl = UtilHttp.getServerRootUrl(request);
        requestUrl.append(request.getRequestURI());
        if (request.getQueryString() != null) {
            requestUrl.append(&quot;?&quot; + request.getQueryString());</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="DDCB16B715EEC4AAD936B59509D5A3DC">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>347</LineStart>
<Snippet>            return &quot;error&quot;;
        }
        String frameContentId = request.getParameter(&quot;frameContentId&quot;);
        String frameDataResourceId = request.getParameter(&quot;frameDataResourceId&quot;);
        </Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="8E21F2049841AE4D7AD69E13C3396CDB">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingListEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppinglist/ShoppingListEvents.java</FilePath>
<LineStart>78</LineStart>
<Snippet>        GenericValue userLogin = (GenericValue) request.getSession().getAttribute(&quot;userLogin&quot;);

        String shoppingListId = request.getParameter(&quot;shoppingListId&quot;);
        String shoppingListTypeId = request.getParameter(&quot;shoppingListTypeId&quot;);
        String selectedCartItems[] = request.getParameterValues(&quot;selectedItem&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="CA0A4C34695127659F1D352F14F3122E">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 363 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>363</LineStart>
<Snippet>            _ind = 1;
            if (specifyTypeAndConcur) {
                _ps = _connection.prepareStatement(sql, resultSetType, resultSetConcurrency);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>562</LineStart>
<Snippet>
        session.setAttribute(&quot;_CLIENT_FORWARDED_FOR_&quot;, request.getHeader(&quot;X-Forwarded-For&quot;));
        session.setAttribute(&quot;_CLIENT_REMOTE_ADDR_&quot;, request.getRemoteAddr());
        session.setAttribute(&quot;_CLIENT_REMOTE_HOST_&quot;, request.getRemoteHost());
        session.setAttribute(&quot;_CLIENT_REMOTE_USER_&quot;, request.getRemoteUser());</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="AC124C38906BB27AB3CAAF9A8326E2AA">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>LoginWorker.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/LoginWorker.java</FilePath>
<LineStart>264</LineStart>
<Snippet>
                // keep the previous request name in the session
                session.setAttribute(&quot;_PREVIOUS_REQUEST_&quot;, request.getPathInfo());

                // NOTE: not using the old _PREVIOUS_PARAMS_ attribute at all because it was a security hole as it was used to put data in the URL (never encrypted) that was originally in a form field that may have been encrypted</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="40428B53A00F82C23F07917655CB2F54">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>DataEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/data/DataEvents.java</FilePath>
<LineStart>323</LineStart>
<Snippet>        if (mode != null &amp;&amp; mode.equals(&quot;UPDATE&quot;)) {
            try {
                result = dispatcher.runSync(&quot;updateDataResource&quot;, serviceInMap);
            } catch (GenericServiceException e) {
                String errMsg = UtilProperties.getMessage(DataEvents.err_resource, &quot;dataEvents.error_call_update_service&quot;, locale);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="099F1F4FB89AA66790DFAB2CC58E24D5">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>945</LineStart>
<Snippet>            newCart = cartList.remove(cartIndex);
        } else {
            String productStoreId = request.getParameter(&quot;productStoreId&quot;);
            if (UtilValidate.isNotEmpty(productStoreId)) {
                session.setAttribute(&quot;productStoreId&quot;, productStoreId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="1C0788CD544484BC9A6367180A97CC47">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>251</LineStart>
<Snippet>                txtContext.put(&quot;mapKey&quot;, &quot;ARTICLE&quot;);
                txtContext.put(&quot;dataTemplateTypeId&quot;, &quot;NONE&quot;);
                Map&lt;String, Object&gt; txtResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, txtContext);
                isError = ModelService.RESPOND_ERROR.equals(txtResults.get(ModelService.RESPONSE_MESSAGE));
                if (isError) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="63CE323BB2EAF69E27C0590248C8B352">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 3048 of DatabaseUtil.java, the method deleteForeignKeyIndex() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>3048</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(deleteIndexSql);
        } catch (SQLException e) {
            return &quot;SQL Exception while executing the following:\n&quot; + deleteIndexSql + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilObject.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilObject.java</FilePath>
<LineStart>137</LineStart>
<Snippet>                ObjectInputStream ois = new ObjectInputStream(bis, Thread.currentThread().getContextClassLoader());
                try {
                    obj = ois.readObject();
                } catch (ClassNotFoundException e) {
                    Debug.logError(e, module);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="2C25F171638587CCDBEEF5169B475368">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 363 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>363</LineStart>
<Snippet>            _ind = 1;
            if (specifyTypeAndConcur) {
                _ps = _connection.prepareStatement(sql, resultSetType, resultSetConcurrency);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>564</LineStart>
<Snippet>        session.setAttribute(&quot;_CLIENT_REMOTE_ADDR_&quot;, request.getRemoteAddr());
        session.setAttribute(&quot;_CLIENT_REMOTE_HOST_&quot;, request.getRemoteHost());
        session.setAttribute(&quot;_CLIENT_REMOTE_USER_&quot;, request.getRemoteUser());
    }
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="61EE5CA97A5118E8751DF2C74D092B0D">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1469</LineStart>
<Snippet>        String quoteId = null;
        try {
            result = dispatcher.runSync(&quot;createQuoteFromCart&quot;,
                    UtilMisc.toMap(&quot;cart&quot;, cart,
                            &quot;userLogin&quot;, userLogin));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="AB05C4BE1C040D9EAAEE081E5F9A13CC">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>348</LineStart>
<Snippet>        }
        String frameContentId = request.getParameter(&quot;frameContentId&quot;);
        String frameDataResourceId = request.getParameter(&quot;frameDataResourceId&quot;);
        
        if (UtilValidate.isEmpty(request.getParameter(&quot;imageWidth&quot;)) || UtilValidate.isEmpty(request.getParameter(&quot;imageHeight&quot;))) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="92504CBC3B129DF97D0E9E468A422350">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>558</LineStart>
<Snippet>        session.setAttribute(&quot;_CLIENT_LOCALE_&quot;, request.getLocale());
        session.setAttribute(&quot;_CLIENT_REQUEST_&quot;, fullRequestUrl.toString());
        session.setAttribute(&quot;_CLIENT_USER_AGENT_&quot;, request.getHeader(&quot;User-Agent&quot;) != null ? request.getHeader(&quot;User-Agent&quot;) : &quot;&quot;);
        session.setAttribute(&quot;_CLIENT_REFERER_&quot;, request.getHeader(&quot;Referer&quot;) != null ? request.getHeader(&quot;Referer&quot;) : &quot;&quot;);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="91905E9CE710B884F406A97301DA57D0">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2522 of DatabaseUtil.java, the method createPrimaryKey() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2522</LineStart>
<Snippet>            try {
                stmt = connection.createStatement();
                stmt.executeUpdate(sqlBuf.toString());
            } catch (SQLException e) {
                return &quot;SQL Exception while executing the following:\n&quot; + sqlBuf.toString() + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilObject.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilObject.java</FilePath>
<LineStart>137</LineStart>
<Snippet>                ObjectInputStream ois = new ObjectInputStream(bis, Thread.currentThread().getContextClassLoader());
                try {
                    obj = ois.readObject();
                } catch (ClassNotFoundException e) {
                    Debug.logError(e, module);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="5DC3B0082746CDED22DFA7BD0ABB20A2">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 366 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>366</LineStart>
<Snippet>                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {
                _ps = _connection.prepareStatement(sql);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] (def) _ps=&quot; + _ps, module);
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>LoginEvents.java</FileName>
<FilePath>applications/securityext/src/org/ofbiz/securityext/login/LoginEvents.java</FilePath>
<LineStart>76</LineStart>
<Snippet>        if (userLogin == null) {

            String username = request.getParameter(&quot;USERNAME&quot;);
            String password = request.getParameter(&quot;PASSWORD&quot;);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="07C35A45AF0BE513C921449428F88594">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ICalWorker.java</FileName>
<FilePath>applications/workeffort/src/org/ofbiz/workeffort/workeffort/ICalWorker.java</FilePath>
<LineStart>305</LineStart>
<Snippet>
    protected static void setupRequest(HttpServletRequest request, HttpServletResponse response) {
        String path = request.getPathInfo();
        if (UtilValidate.isEmpty(path)) {
            path = &quot;/&quot;;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="22D8FE24F7D99C76472C31EA71688282">
                            <Category>SQL Injection</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 366 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>366</LineStart>
<Snippet>                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {
                _ps = _connection.prepareStatement(sql);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] (def) _ps=&quot; + _ps, module);
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>ContextFilter.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ContextFilter.java</FilePath>
<LineStart>467</LineStart>
<Snippet>        while (initParamEnum.hasMoreElements()) {
            String initParamName = initParamEnum.nextElement();
            String initParamValue = config.getServletContext().getInitParameter(initParamName);
            if (Debug.verboseOn()) Debug.logVerbose(&quot;Adding web.xml context-param to application attribute with name [&quot; + initParamName + &quot;] and value [&quot; + initParamValue + &quot;]&quot;, module);
            config.getServletContext().setAttribute(initParamName, initParamValue);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="7C94F62630874E885AE8F061842C8734">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 1985 of DatabaseUtil.java, the method renameColumn() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>1985</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(sql);
        } catch (SQLException e) {
            return &quot;SQL Exception while executing the following:\n&quot; + sql + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceMultiEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceMultiEventHandler.java</FilePath>
<LineStart>308</LineStart>
<Snippet>                Map&lt;String, Object&gt; result = null;
                try {
                    result = dispatcher.runSync(serviceName, serviceContext);
                } catch (ServiceAuthException e) {
                    // not logging since the service engine already did</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="047A5507C08398E671FCAA9A575C32A1">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UrlServletHelper.java</FileName>
<FilePath>framework/common/src/org/ofbiz/common/UrlServletHelper.java</FilePath>
<LineStart>125</LineStart>
<Snippet>        }
        if (UtilValidate.isNotEmpty(httpRequest.getParameter(&quot;viewSize&quot;))) {
            viewSize = httpRequest.getParameter(&quot;viewSize&quot;);
        }
        if (UtilValidate.isNotEmpty(httpRequest.getParameter(&quot;viewSort&quot;))) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="76F20F99C38AFDA5950ED869F4FF81A0">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>184</LineStart>
<Snippet>
    public static Map&lt;String, Object&gt; getPathInfoOnlyParameterMap(HttpServletRequest request, Set&lt;? extends String&gt; nameSet, Boolean onlyIncludeOrSkip) {
        return getPathInfoOnlyParameterMap(request.getPathInfo(), nameSet, onlyIncludeOrSkip);
    }
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="D6CA1C1AD898E241AB794E08953EB7D1">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2522 of DatabaseUtil.java, the method createPrimaryKey() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2522</LineStart>
<Snippet>            try {
                stmt = connection.createStatement();
                stmt.executeUpdate(sqlBuf.toString());
            } catch (SQLException e) {
                return &quot;SQL Exception while executing the following:\n&quot; + sqlBuf.toString() + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceEventHandler.java</FilePath>
<LineStart>337</LineStart>
<Snippet>                dispatcher.runAsync(serviceName, serviceContext);
            } else {
                result = dispatcher.runSync(serviceName, serviceContext);
            }
        } catch (ServiceAuthException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="471584983CF45F24C38FF93FADDA0BF1">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceMultiEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceMultiEventHandler.java</FilePath>
<LineStart>308</LineStart>
<Snippet>                Map&lt;String, Object&gt; result = null;
                try {
                    result = dispatcher.runSync(serviceName, serviceContext);
                } catch (ServiceAuthException e) {
                    // not logging since the service engine already did</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="8150CB673AFD37E7E14ADF73D184BB86">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2443 of DatabaseUtil.java, the method deleteForeignKey() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2443</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(sqlBuf.toString());
        } catch (SQLException e) {
            return &quot;SQL Exception while executing the following:\n&quot; + sqlBuf.toString() + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilObject.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilObject.java</FilePath>
<LineStart>137</LineStart>
<Snippet>                ObjectInputStream ois = new ObjectInputStream(bis, Thread.currentThread().getContextClassLoader());
                try {
                    obj = ois.readObject();
                } catch (ClassNotFoundException e) {
                    Debug.logError(e, module);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="CDE7DE75619C4F60CFE87061BA6AE113">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>348</LineStart>
<Snippet>        }
        String frameContentId = request.getParameter(&quot;frameContentId&quot;);
        String frameDataResourceId = request.getParameter(&quot;frameDataResourceId&quot;);
        
        if (UtilValidate.isEmpty(request.getParameter(&quot;imageWidth&quot;)) || UtilValidate.isEmpty(request.getParameter(&quot;imageHeight&quot;))) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="1F705ED724954FF1836979B005E09F7A">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 3048 of DatabaseUtil.java, the method deleteForeignKeyIndex() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>3048</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(deleteIndexSql);
        } catch (SQLException e) {
            return &quot;SQL Exception while executing the following:\n&quot; + deleteIndexSql + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceEventHandler.java</FilePath>
<LineStart>337</LineStart>
<Snippet>                dispatcher.runAsync(serviceName, serviceContext);
            } else {
                result = dispatcher.runSync(serviceName, serviceContext);
            }
        } catch (ServiceAuthException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="9D6B48D6B60B3F659E9ACC0E35175C1B">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 1922 of DatabaseUtil.java, the method addColumn() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>1922</LineStart>
<Snippet>            try {
                stmt = connection.createStatement();
                stmt.executeUpdate(sql2);
            } catch (SQLException e2) {
                // if this also fails report original error, not this error...</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>575</LineStart>
<Snippet>        while (e.hasMoreElements()) {
            String name = e.nextElement();
            request.setAttribute(name, request.getParameter(name));
        }
    }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="D96AB8C223006E9EF9A9CB522D3046D2">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>CheckOutEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/CheckOutEvents.java</FilePath>
<LineStart>466</LineStart>
<Snippet>        }
        
        String issuerId = request.getParameter(&quot;issuerId&quot;);
        if (UtilValidate.isNotEmpty(issuerId)) {
            request.setAttribute(&quot;issuerId&quot;, issuerId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="3CA864942F902AF3C931DF7FE07BBDA8">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>OrderEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/order/OrderEvents.java</FilePath>
<LineStart>125</LineStart>
<Snippet>                        contextMap.put(&quot;userLogin&quot;, userLogin);
                        try {
                            resultMap = dispatcher.runSync(&quot;cancelOrderItem&quot;, contextMap);

                            if (ServiceUtil.isError(resultMap)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="EE0E9AF1E932695B554FC440FFDFD892">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 366 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>366</LineStart>
<Snippet>                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {
                _ps = _connection.prepareStatement(sql);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] (def) _ps=&quot; + _ps, module);
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>403</LineStart>
<Snippet>            if (UtilValidate.isNotEmpty(request.getParameter(&quot;frameExistContentId&quot;)) &amp;&amp; UtilValidate.isNotEmpty(request.getParameter(&quot;frameExistDataResourceId&quot;))) {
                session.setAttribute(&quot;frameExistContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
                session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            }
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;Required frame image content ID&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="975DC2958BA4C38C625959D7F343E30A">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>104</LineStart>
<Snippet>        persistMap.put(&quot;userLogin&quot;, userLogin);
        try {
            Map&lt;String, Object&gt; persistResult = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, persistMap);
            contentId = (String)persistResult.get(&quot;contentId&quot;);
            //request.setAttribute(&quot;contentId&quot;, contentId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="F9786DF758D3C873282DD69D56C1004E">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 366 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>366</LineStart>
<Snippet>                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {
                _ps = _connection.prepareStatement(sql);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] (def) _ps=&quot; + _ps, module);
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilObject.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilObject.java</FilePath>
<LineStart>137</LineStart>
<Snippet>                ObjectInputStream ois = new ObjectInputStream(bis, Thread.currentThread().getContextClassLoader());
                try {
                    obj = ois.readObject();
                } catch (ClassNotFoundException e) {
                    Debug.logError(e, module);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="047A5507C08398E671FCAA9A575C32A0">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UrlServletHelper.java</FileName>
<FilePath>framework/common/src/org/ofbiz/common/UrlServletHelper.java</FilePath>
<LineStart>125</LineStart>
<Snippet>        }
        if (UtilValidate.isNotEmpty(httpRequest.getParameter(&quot;viewSize&quot;))) {
            viewSize = httpRequest.getParameter(&quot;viewSize&quot;);
        }
        if (UtilValidate.isNotEmpty(httpRequest.getParameter(&quot;viewSort&quot;))) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="FDA1342F79AE99E5B7F161AB63BE3EAD">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingListEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppinglist/ShoppingListEvents.java</FilePath>
<LineStart>78</LineStart>
<Snippet>        GenericValue userLogin = (GenericValue) request.getSession().getAttribute(&quot;userLogin&quot;);

        String shoppingListId = request.getParameter(&quot;shoppingListId&quot;);
        String shoppingListTypeId = request.getParameter(&quot;shoppingListTypeId&quot;);
        String selectedCartItems[] = request.getParameterValues(&quot;selectedItem&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="F53093ABB1C62217D91463E364A3F1D4">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 3182 of DatabaseUtil.java, the method updateCharacterSetAndCollation() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>3182</LineStart>
<Snippet>                try {
                    stmt = connection.createStatement();
                    stmt.executeUpdate(sqlBuf.toString());
                } catch (SQLException e) {
                    String errMsg = &quot;SQL Exception while executing the following:\n&quot; + sqlBuf + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>119</LineStart>
<Snippet>            contentRevisionMap.put(&quot;contentId&quot;, contentId);
            contentRevisionMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentRevisionAndItem&quot;, contentRevisionMap);
            keySet = result.keySet();
            iter = keySet.iterator();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="DD2A56684B0F1DB97C4E87E169408E2E">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>575</LineStart>
<Snippet>        while (e.hasMoreElements()) {
            String name = e.nextElement();
            request.setAttribute(name, request.getParameter(name));
        }
    }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="2DD3C8476488DC65ADF1D6E98458F161">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 363 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>363</LineStart>
<Snippet>            _ind = 1;
            if (specifyTypeAndConcur) {
                _ps = _connection.prepareStatement(sql, resultSetType, resultSetConcurrency);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>347</LineStart>
<Snippet>            return &quot;error&quot;;
        }
        String frameContentId = request.getParameter(&quot;frameContentId&quot;);
        String frameDataResourceId = request.getParameter(&quot;frameDataResourceId&quot;);
        </Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="1AA50EB62BAB0B7AF4267A480BD55009">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>LayoutEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/layout/LayoutEvents.java</FilePath>
<LineStart>114</LineStart>
<Snippet>            }

            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, context);
            //Debug.logVerbose(&quot;in createLayoutImage, result:&quot; + result, module);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="4E629D010D9F6A580CB59089B5B68202">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2264 of DatabaseUtil.java, the method createForeignKey() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2264</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(sqlBuf.toString());
        } catch (SQLException e) {
            return &quot;SQL Exception while executing the following:\n&quot; + sqlBuf.toString() + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceEventHandler.java</FilePath>
<LineStart>337</LineStart>
<Snippet>                dispatcher.runAsync(serviceName, serviceContext);
            } else {
                result = dispatcher.runSync(serviceName, serviceContext);
            }
        } catch (ServiceAuthException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="FDA1342F79AE99E5B7F161AB63BE3EAC">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingListEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppinglist/ShoppingListEvents.java</FilePath>
<LineStart>78</LineStart>
<Snippet>        GenericValue userLogin = (GenericValue) request.getSession().getAttribute(&quot;userLogin&quot;);

        String shoppingListId = request.getParameter(&quot;shoppingListId&quot;);
        String shoppingListTypeId = request.getParameter(&quot;shoppingListTypeId&quot;);
        String selectedCartItems[] = request.getParameterValues(&quot;selectedItem&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="D5AC88B4A56E0FA5D37EF820F23FFB32">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2609 of DatabaseUtil.java, the method deletePrimaryKey() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2609</LineStart>
<Snippet>            try {
                stmt = connection.createStatement();
                stmt.executeUpdate(sqlBuf.toString());
            } catch (SQLException e) {
                String errMsg = &quot;SQL Exception while executing the following:\n&quot; + sqlBuf.toString() + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilObject.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilObject.java</FilePath>
<LineStart>137</LineStart>
<Snippet>                ObjectInputStream ois = new ObjectInputStream(bis, Thread.currentThread().getContextClassLoader());
                try {
                    obj = ois.readObject();
                } catch (ClassNotFoundException e) {
                    Debug.logError(e, module);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="89B0A324A8155EBD67B29FCB130A704E">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 366 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>366</LineStart>
<Snippet>                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {
                _ps = _connection.prepareStatement(sql);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] (def) _ps=&quot; + _ps, module);
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>RequestHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/RequestHandler.java</FilePath>
<LineStart>128</LineStart>
<Snippet>        }

        String overrideViewUri = RequestHandler.getOverrideViewUri(request.getPathInfo());

        String requestMissingErrorMessage = &quot;Unknown request [&quot; + defaultRequestUri + &quot;]; this request does not exist or cannot be called directly.&quot;;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="9F7D3D606B9FBF87E3B8C9BDCDD200D2">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 366 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>366</LineStart>
<Snippet>                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {
                _ps = _connection.prepareStatement(sql);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] (def) _ps=&quot; + _ps, module);
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>184</LineStart>
<Snippet>
    public static Map&lt;String, Object&gt; getPathInfoOnlyParameterMap(HttpServletRequest request, Set&lt;? extends String&gt; nameSet, Boolean onlyIncludeOrSkip) {
        return getPathInfoOnlyParameterMap(request.getPathInfo(), nameSet, onlyIncludeOrSkip);
    }
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="4CDF68E7445235675183DC93E6BD02F1">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>ShipmentEvents.java</FileName>
<FilePath>applications/product/src/org/ofbiz/shipment/shipment/ShipmentEvents.java</FilePath>
<LineStart>95</LineStart>
<Snippet>        GenericValue userLogin = (GenericValue)request.getSession().getAttribute(&quot;userLogin&quot;);

        String shipmentId = request.getParameter(&quot;shipmentIdReceived&quot;);
        String forceShipmentReceived = request.getParameter(&quot;forceShipmentReceived&quot;);
        if (UtilValidate.isNotEmpty(shipmentId) &amp;&amp; &quot;Y&quot;.equals(forceShipmentReceived)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="41151FC2F785FDA01395395C73F48AE1">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UrlServletHelper.java</FileName>
<FilePath>framework/common/src/org/ofbiz/common/UrlServletHelper.java</FilePath>
<LineStart>122</LineStart>
<Snippet>        
        if (UtilValidate.isNotEmpty(httpRequest.getParameter(&quot;viewIndex&quot;))) {
            viewIndex = httpRequest.getParameter(&quot;viewIndex&quot;);
        }
        if (UtilValidate.isNotEmpty(httpRequest.getParameter(&quot;viewSize&quot;))) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="084B7FDEA7EDF6713DDF32FFA0139BAD">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>SearchEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/search/SearchEvents.java</FilePath>
<LineStart>60</LineStart>
<Snippet>        serviceInMap.put(&quot;contentId&quot;, siteId);
        try {
            result = dispatcher.runSync(&quot;indexTree&quot;, serviceInMap);
        } catch (GenericServiceException e) {
            String errorMsg = &quot;Error calling the indexTree service.&quot; + e.toString();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="1C49162AA528AEDE3CFA37DF69DC1460">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CommonEvents.java</FileName>
<FilePath>framework/common/src/org/ofbiz/common/CommonEvents.java</FilePath>
<LineStart>231</LineStart>
<Snippet>    /** Simple event to set the users per-session currency uom value */
    public static String setSessionCurrencyUom(HttpServletRequest request, HttpServletResponse response) {
        String currencyUom = request.getParameter(&quot;currencyUom&quot;);
        if (UtilValidate.isNotEmpty(currencyUom)) {
            // update the session</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="75B87D6D14F7818837761D52591A7CF7">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CheckOutEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/CheckOutEvents.java</FilePath>
<LineStart>131</LineStart>
<Snippet>            if (UtilValidate.isNotEmpty(taxAuthPartyGeoIds)) {
                try {
                    Map&lt;String, ? extends Object&gt; createCustomerTaxAuthInfoResult = dispatcher.runSync(&quot;createCustomerTaxAuthInfo&quot;,
                            UtilMisc.&lt;String, Object&gt;toMap(&quot;partyId&quot;, cart.getPartyId(), &quot;taxAuthPartyGeoIds&quot;, taxAuthPartyGeoIds, &quot;partyTaxId&quot;, partyTaxId, &quot;isExempt&quot;, isExempt, &quot;userLogin&quot;, userLogin));
                    ServiceUtil.getMessages(request, createCustomerTaxAuthInfoResult, null);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="9C9BAA55DC420AE5223550EE590DC39B">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 363 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>363</LineStart>
<Snippet>            _ind = 1;
            if (specifyTypeAndConcur) {
                _ps = _connection.prepareStatement(sql, resultSetType, resultSetConcurrency);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>563</LineStart>
<Snippet>        session.setAttribute(&quot;_CLIENT_FORWARDED_FOR_&quot;, request.getHeader(&quot;X-Forwarded-For&quot;));
        session.setAttribute(&quot;_CLIENT_REMOTE_ADDR_&quot;, request.getRemoteAddr());
        session.setAttribute(&quot;_CLIENT_REMOTE_HOST_&quot;, request.getRemoteHost());
        session.setAttribute(&quot;_CLIENT_REMOTE_USER_&quot;, request.getRemoteUser());
    }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="9B6133180B4DED2774A285DA2A6AE25A">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>945</LineStart>
<Snippet>            newCart = cartList.remove(cartIndex);
        } else {
            String productStoreId = request.getParameter(&quot;productStoreId&quot;);
            if (UtilValidate.isNotEmpty(productStoreId)) {
                session.setAttribute(&quot;productStoreId&quot;, productStoreId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="D9EC9DD2605EFC1FC154D46DE0ACF799">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>LoginWorker.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/LoginWorker.java</FilePath>
<LineStart>397</LineStart>
<Snippet>            // get the visit id to pass to the userLogin for history
            String visitId = VisitHandler.getVisitId(session);
            result = dispatcher.runSync(&quot;userLogin&quot;, UtilMisc.toMap(&quot;login.username&quot;, username, &quot;login.password&quot;, password, &quot;visitId&quot;, visitId, &quot;locale&quot;, UtilHttp.getLocale(request)));
        } catch (GenericServiceException e) {
            Debug.logError(e, &quot;Error calling userLogin service&quot;, module);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="5F7C9EB4FAE0BF6C8D28E6B78B700BD8">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>563</LineStart>
<Snippet>        session.setAttribute(&quot;_CLIENT_FORWARDED_FOR_&quot;, request.getHeader(&quot;X-Forwarded-For&quot;));
        session.setAttribute(&quot;_CLIENT_REMOTE_ADDR_&quot;, request.getRemoteAddr());
        session.setAttribute(&quot;_CLIENT_REMOTE_HOST_&quot;, request.getRemoteHost());
        session.setAttribute(&quot;_CLIENT_REMOTE_USER_&quot;, request.getRemoteUser());
    }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="80D97909422933A1E8F3910EBDBF40E7">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2699 of DatabaseUtil.java, the method createDeclaredIndex() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2699</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(createIndexSql);
        } catch (SQLException e) {
            return &quot;SQL Exception while executing the following:\n&quot; + createIndexSql + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>CoreEvents.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/CoreEvents.java</FilePath>
<LineStart>412</LineStart>
<Snippet>        try {
            if (null!=request.getParameter(&quot;_RUN_SYNC_&quot;) &amp;&amp; request.getParameter(&quot;_RUN_SYNC_&quot;).equals(&quot;Y&quot;)) {
                syncServiceResult = dispatcher.runSync(serviceName, serviceContext);
            } else {
                dispatcher.schedule(jobName, poolName, serviceName, serviceContext, startTime, frequency, interval, count, endTime, maxRetry);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="FED98A1830DBCC26DE94FDD4E8CF50C5">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>562</LineStart>
<Snippet>
        session.setAttribute(&quot;_CLIENT_FORWARDED_FOR_&quot;, request.getHeader(&quot;X-Forwarded-For&quot;));
        session.setAttribute(&quot;_CLIENT_REMOTE_ADDR_&quot;, request.getRemoteAddr());
        session.setAttribute(&quot;_CLIENT_REMOTE_HOST_&quot;, request.getRemoteHost());
        session.setAttribute(&quot;_CLIENT_REMOTE_USER_&quot;, request.getRemoteUser());</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="1D17B190AB2CE8869AACA12A76BB89C3">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceEventHandler.java</FilePath>
<LineStart>271</LineStart>
<Snippet>                    // if the service modelParam has allow-html=&quot;any&quot; then get this direct from the request instead of in the parameters Map so there will be no canonicalization possibly messing things up
                    if (&quot;any&quot;.equals(modelParam.allowHtml)) {
                        value = request.getParameter(name);
                    } else {
                        // use the rawParametersMap from UtilHttp in order to also get pathInfo parameters, do canonicalization, etc</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="33004C385FF6840201B01CB645C15F7C">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 366 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>366</LineStart>
<Snippet>                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {
                _ps = _connection.prepareStatement(sql);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] (def) _ps=&quot; + _ps, module);
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>127</LineStart>
<Snippet>
            Object value = null;
            String[] paramArr = request.getParameterValues(name);
            if (paramArr != null) {
                if (paramArr.length &gt; 1) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="4CD63B8CFE9BDFC5EFF9F61EF5583C7D">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>LoginWorker.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/LoginWorker.java</FilePath>
<LineStart>397</LineStart>
<Snippet>            // get the visit id to pass to the userLogin for history
            String visitId = VisitHandler.getVisitId(session);
            result = dispatcher.runSync(&quot;userLogin&quot;, UtilMisc.toMap(&quot;login.username&quot;, username, &quot;login.password&quot;, password, &quot;visitId&quot;, visitId, &quot;locale&quot;, UtilHttp.getLocale(request)));
        } catch (GenericServiceException e) {
            Debug.logError(e, &quot;Error calling userLogin service&quot;, module);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="1AE8BDD51D4F1CB98D9B98C777A42CBB">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2917 of DatabaseUtil.java, the method createForeignKeyIndex() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2917</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(createIndexSql);
        } catch (SQLException e) {
            return &quot;SQL Exception while executing the following:\n&quot; + createIndexSql + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>104</LineStart>
<Snippet>        persistMap.put(&quot;userLogin&quot;, userLogin);
        try {
            Map&lt;String, Object&gt; persistResult = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, persistMap);
            contentId = (String)persistResult.get(&quot;contentId&quot;);
            //request.setAttribute(&quot;contentId&quot;, contentId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="B6035C749E1C4CB8CC02409C3EA44E25">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2699 of DatabaseUtil.java, the method createDeclaredIndex() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2699</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(createIndexSql);
        } catch (SQLException e) {
            return &quot;SQL Exception while executing the following:\n&quot; + createIndexSql + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceMultiEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceMultiEventHandler.java</FilePath>
<LineStart>308</LineStart>
<Snippet>                Map&lt;String, Object&gt; result = null;
                try {
                    result = dispatcher.runSync(serviceName, serviceContext);
                } catch (ServiceAuthException e) {
                    // not logging since the service engine already did</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="F2F412F6EA50BD94CF6E0313EC564277">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 366 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>366</LineStart>
<Snippet>                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {
                _ps = _connection.prepareStatement(sql);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] (def) _ps=&quot; + _ps, module);
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>559</LineStart>
<Snippet>        session.setAttribute(&quot;_CLIENT_REQUEST_&quot;, fullRequestUrl.toString());
        session.setAttribute(&quot;_CLIENT_USER_AGENT_&quot;, request.getHeader(&quot;User-Agent&quot;) != null ? request.getHeader(&quot;User-Agent&quot;) : &quot;&quot;);
        session.setAttribute(&quot;_CLIENT_REFERER_&quot;, request.getHeader(&quot;Referer&quot;) != null ? request.getHeader(&quot;Referer&quot;) : &quot;&quot;);

        session.setAttribute(&quot;_CLIENT_FORWARDED_FOR_&quot;, request.getHeader(&quot;X-Forwarded-For&quot;));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="A67C251D4740A41CFF3D89C8D1AECD78">
                            <Category>SQL Injection</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ContextFilter.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ContextFilter.java</FilePath>
<LineStart>467</LineStart>
<Snippet>        while (initParamEnum.hasMoreElements()) {
            String initParamName = initParamEnum.nextElement();
            String initParamValue = config.getServletContext().getInitParameter(initParamName);
            if (Debug.verboseOn()) Debug.logVerbose(&quot;Adding web.xml context-param to application attribute with name [&quot; + initParamName + &quot;] and value [&quot; + initParamValue + &quot;]&quot;, module);
            config.getServletContext().setAttribute(initParamName, initParamValue);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="3AD1FD3EEFB6287849865E26E04CF8A3">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>261</LineStart>
<Snippet>        ByteBuffer imageData = (ByteBuffer) tempFile.get(&quot;imageData&quot;);
        if (UtilValidate.isEmpty(imageName) || UtilValidate.isEmpty(imageData)) {
            session.setAttribute(&quot;frameContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
            session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;There is no frame image, please select the image type *.PNG  uploading.&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="DDCB16B715EEC4AAD936B59509D5A3DB">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>347</LineStart>
<Snippet>            return &quot;error&quot;;
        }
        String frameContentId = request.getParameter(&quot;frameContentId&quot;);
        String frameDataResourceId = request.getParameter(&quot;frameDataResourceId&quot;);
        </Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="D13FF5FBDC63086EACB929B15F812D46">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 1771 of DatabaseUtil.java, the method createTable() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>1771</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(sqlBuf.toString());
        } catch (SQLException e) {
            return &quot;SQL Exception while executing the following:\n&quot; + sqlBuf.toString() + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>119</LineStart>
<Snippet>            contentRevisionMap.put(&quot;contentId&quot;, contentId);
            contentRevisionMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentRevisionAndItem&quot;, contentRevisionMap);
            keySet = result.keySet();
            iter = keySet.iterator();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="5BA141E472062FB6BA88C9365FE907F7">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>LoginEvents.java</FileName>
<FilePath>applications/securityext/src/org/ofbiz/securityext/login/LoginEvents.java</FilePath>
<LineStart>76</LineStart>
<Snippet>        if (userLogin == null) {

            String username = request.getParameter(&quot;USERNAME&quot;);
            String password = request.getParameter(&quot;PASSWORD&quot;);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="26DDFA68E796B4B85096A6480373B005">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>ICalWorker.java</FileName>
<FilePath>applications/workeffort/src/org/ofbiz/workeffort/workeffort/ICalWorker.java</FilePath>
<LineStart>305</LineStart>
<Snippet>
    protected static void setupRequest(HttpServletRequest request, HttpServletResponse response) {
        String path = request.getPathInfo();
        if (UtilValidate.isEmpty(path)) {
            path = &quot;/&quot;;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="DCCDF90B3F65CA81DB1DB1493526EF86">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceEventHandler.java</FilePath>
<LineStart>271</LineStart>
<Snippet>                    // if the service modelParam has allow-html=&quot;any&quot; then get this direct from the request instead of in the parameters Map so there will be no canonicalization possibly messing things up
                    if (&quot;any&quot;.equals(modelParam.allowHtml)) {
                        value = request.getParameter(name);
                    } else {
                        // use the rawParametersMap from UtilHttp in order to also get pathInfo parameters, do canonicalization, etc</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="9C9F43D63C9238B40860AD0931ED83BA">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>GenericWebEvent.java</FileName>
<FilePath>framework/webtools/src/org/ofbiz/webtools/GenericWebEvent.java</FilePath>
<LineStart>183</LineStart>
<Snippet>            }

            String fval = request.getParameter(field.getName());
            if (UtilValidate.isNotEmpty(fval)) {
                try {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="ED0DBEDF46050C53CE8AD8A90D5E162B">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>182</LineStart>
<Snippet>                }
                if (UtilValidate.isNotEmpty(map.get(&quot;contentAssocTypeId&quot;))) {
                    ftlResults = dispatcher.runSync(&quot;createContentAssoc&quot;, map);
                    isError = ModelService.RESPOND_ERROR.equals(ftlResults.get(ModelService.RESPONSE_MESSAGE));
                    if (isError) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="5D2609A1EA631ACAB9114E08D78829EB">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2085 of DatabaseUtil.java, the method repairColumnSize() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2085</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(sql2);
        } catch (SQLException e) {
            String thisMsg = &quot;SQL Exception while executing the following:\n&quot; + sql2 + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceEventHandler.java</FilePath>
<LineStart>337</LineStart>
<Snippet>                dispatcher.runAsync(serviceName, serviceContext);
            } else {
                result = dispatcher.runSync(serviceName, serviceContext);
            }
        } catch (ServiceAuthException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="C29A5CE13A6CDC695BCCAC8FDF9FD796">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>EbayEvents.java</FileName>
<FilePath>specialpurpose/ebaystore/src/org/ofbiz/ebaystore/EbayEvents.java</FilePath>
<LineStart>280</LineStart>
<Snippet>                String siteCode = apiContext.getSite().name();
                if (UtilValidate.isNotEmpty(session.getAttribute(&quot;itemListings_&quot;.concat(siteCode)))) {
                    request.setAttribute(&quot;productStoreId&quot;, request.getParameter(&quot;productStoreId&quot;));
                    return &quot;prepare&quot;;
                }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="69FC18C7B314C1E92FEB05451B640F84">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2917 of DatabaseUtil.java, the method createForeignKeyIndex() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2917</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(createIndexSql);
        } catch (SQLException e) {
            return &quot;SQL Exception while executing the following:\n&quot; + createIndexSql + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilObject.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilObject.java</FilePath>
<LineStart>137</LineStart>
<Snippet>                ObjectInputStream ois = new ObjectInputStream(bis, Thread.currentThread().getContextClassLoader());
                try {
                    obj = ois.readObject();
                } catch (ClassNotFoundException e) {
                    Debug.logError(e, module);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="5A743F9F37CE593EB1C5242772C10E4E">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 1985 of DatabaseUtil.java, the method renameColumn() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>1985</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(sql);
        } catch (SQLException e) {
            return &quot;SQL Exception while executing the following:\n&quot; + sql + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>505</LineStart>
<Snippet>        Map&lt;String, Object&gt; ftlResults = null;
        try {
            ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
        } catch (ServiceAuthException e) {
            String msg = e.getMessage();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="6104C0CEDBB041576A7E8667C6FE34AD">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>562</LineStart>
<Snippet>
        session.setAttribute(&quot;_CLIENT_FORWARDED_FOR_&quot;, request.getHeader(&quot;X-Forwarded-For&quot;));
        session.setAttribute(&quot;_CLIENT_REMOTE_ADDR_&quot;, request.getRemoteAddr());
        session.setAttribute(&quot;_CLIENT_REMOTE_HOST_&quot;, request.getRemoteHost());
        session.setAttribute(&quot;_CLIENT_REMOTE_USER_&quot;, request.getRemoteUser());</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="4092C99CA692A1715A31B0CDE85E5BFB">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 363 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>363</LineStart>
<Snippet>            _ind = 1;
            if (specifyTypeAndConcur) {
                _ps = _connection.prepareStatement(sql, resultSetType, resultSetConcurrency);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {</Snippet>
                            </Primary>
                            <Source>
<FileName>FindServices.java</FileName>
<FilePath>framework/common/src/org/ofbiz/common/FindServices.java</FilePath>
<LineStart>503</LineStart>
<Snippet>        Map&lt;String, Object&gt; executeResult = null;
        try {
            executeResult = dispatcher.runSync(&quot;executeFind&quot;, UtilMisc.toMap(&quot;entityName&quot;, entityName, &quot;orderByList&quot;, orderByList,
                                                                             &quot;fieldList&quot;, fieldList, &quot;entityConditionList&quot;, exprList,
                                                                             &quot;noConditionFind&quot;, noConditionFind, &quot;distinct&quot;, distinct,</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="F76110CC3286857A4CC6DDD3DCA3EC24">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 366 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>366</LineStart>
<Snippet>                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {
                _ps = _connection.prepareStatement(sql);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] (def) _ps=&quot; + _ps, module);
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1535</LineStart>
<Snippet>
        // TODO: re-factor and move this inside the ShoppingCart constructor
        String orderMode = request.getParameter(&quot;orderMode&quot;);
        if (orderMode != null) {
            cart.setOrderType(orderMode);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="4B779972D7428982D19F6509F7330DD4">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>CheckOutEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/CheckOutEvents.java</FilePath>
<LineStart>131</LineStart>
<Snippet>            if (UtilValidate.isNotEmpty(taxAuthPartyGeoIds)) {
                try {
                    Map&lt;String, ? extends Object&gt; createCustomerTaxAuthInfoResult = dispatcher.runSync(&quot;createCustomerTaxAuthInfo&quot;,
                            UtilMisc.&lt;String, Object&gt;toMap(&quot;partyId&quot;, cart.getPartyId(), &quot;taxAuthPartyGeoIds&quot;, taxAuthPartyGeoIds, &quot;partyTaxId&quot;, partyTaxId, &quot;isExempt&quot;, isExempt, &quot;userLogin&quot;, userLogin));
                    ServiceUtil.getMessages(request, createCustomerTaxAuthInfoResult, null);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="2ECC175905F162C84E758982B6308374">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1327</LineStart>
<Snippet>        ShoppingCart cart = null;
        try {
            Map&lt;String, Object&gt; outMap = dispatcher.runSync(&quot;loadCartFromShoppingList&quot;,
                    UtilMisc.&lt;String, Object&gt;toMap(&quot;shoppingListId&quot;, shoppingListId,
                    &quot;userLogin&quot;, userLogin));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="E63B9A630E7177BFFD75D251F7DF44B1">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>104</LineStart>
<Snippet>        persistMap.put(&quot;userLogin&quot;, userLogin);
        try {
            Map&lt;String, Object&gt; persistResult = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, persistMap);
            contentId = (String)persistResult.get(&quot;contentId&quot;);
            //request.setAttribute(&quot;contentId&quot;, contentId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="FD8C9F9E5C3C8DA76A3AE6E452676F94">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>592</LineStart>
<Snippet>        requestUrl.append(request.getRequestURI());
        if (request.getQueryString() != null) {
            requestUrl.append(&quot;?&quot; + request.getQueryString());
        }
        return requestUrl;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="986C12D91967952A7CB3BBBAABE5228C">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 363 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>363</LineStart>
<Snippet>            _ind = 1;
            if (specifyTypeAndConcur) {
                _ps = _connection.prepareStatement(sql, resultSetType, resultSetConcurrency);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {</Snippet>
                            </Primary>
                            <Source>
<FileName>WebPosEvents.java</FileName>
<FilePath>specialpurpose/webpos/src/org/ofbiz/webpos/WebPosEvents.java</FilePath>
<LineStart>58</LineStart>
<Snippet>        
        // get the posTerminalId
        String posTerminalId = (String) request.getParameter(&quot;posTerminalId&quot;);
        session.removeAttribute(&quot;shoppingCart&quot;);
        session.removeAttribute(&quot;webPosSession&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="0E32BB8C9F795EA56A6FD88CFBA8FE63">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>WebShoppingCart.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/WebShoppingCart.java</FilePath>
<LineStart>49</LineStart>
<Snippet>                (currencyUom != null ? currencyUom : ProductStoreWorker.getStoreCurrencyUomId(request)),
                request.getParameter(&quot;billToCustomerPartyId&quot;),
                (request.getParameter(&quot;supplierPartyId&quot;) != null ? request.getParameter(&quot;supplierPartyId&quot;) : request.getParameter(&quot;billFromVendorPartyId&quot;)));

        HttpSession session = request.getSession(true);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="D5FDC2E1A51471580B19482794293B24">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CommonEvents.java</FileName>
<FilePath>framework/common/src/org/ofbiz/common/CommonEvents.java</FilePath>
<LineStart>163</LineStart>
<Snippet>        Security security = (Security) request.getAttribute(&quot;security&quot;);
        GenericValue userLogin = (GenericValue) request.getSession().getAttribute(&quot;userLogin&quot;);
        String visitId = request.getParameter(&quot;visitId&quot;);
        if (visitId != null) request.setAttribute(&quot;visitId&quot;, visitId);
        if (security.hasPermission(&quot;SEND_CONTROL_APPLET&quot;, userLogin)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="5144D17CF7F542B3B02E0ACA4547F1D3">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ProductEvents.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/product/ProductEvents.java</FilePath>
<LineStart>805</LineStart>
<Snippet>        //GenericValue userLogin = (GenericValue) request.getSession().getAttribute(&quot;userLogin&quot;);
        String productId = request.getParameter(&quot;productId&quot;);
        String productFeatureId = request.getParameter(&quot;productFeatureId&quot;);

        if (UtilValidate.isEmpty(productId) || UtilValidate.isEmpty(productFeatureId)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="11B9EBCFEA8FF301AE7A56884EDD05C8">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>262</LineStart>
<Snippet>        if (UtilValidate.isEmpty(imageName) || UtilValidate.isEmpty(imageData)) {
            session.setAttribute(&quot;frameContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
            session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;There is no frame image, please select the image type *.PNG  uploading.&quot;);
            return &quot;error&quot;;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="11B9EBCFEA8FF301AE7A56884EDD05C9">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>268</LineStart>
<Snippet>        if (!&quot;image/png&quot;.equals(mimType)) {
            session.setAttribute(&quot;frameContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
            session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;The selected image type is incorrect, please select the image type *.PNG to upload.&quot;);
            return &quot;error&quot;;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="F344989BE3AE77BDC138844FED80B49C">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>CatalogUrlServlet.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/category/CatalogUrlServlet.java</FilePath>
<LineStart>80</LineStart>
<Snippet>        Delegator delegator = (Delegator) getServletContext().getAttribute(&quot;delegator&quot;);

        String pathInfo = request.getPathInfo();
        List&lt;String&gt; pathElements = StringUtil.split(pathInfo, &quot;/&quot;);
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="27B15DBE87F6524164F30B67DF911623">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>150</LineStart>
<Snippet>            String contentAssocTypeId = (String)passedParams.get(&quot;contentAssocTypeId&quot;);
            ftlContext.put(&quot;contentAssocTypeId&quot;, null); // Don't post assoc at this time
            Map&lt;String, Object&gt; ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
            boolean isError = ModelService.RESPOND_ERROR.equals(ftlResults.get(ModelService.RESPONSE_MESSAGE));
            if (isError) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="8DDE93C4DE55DB76C9D6D20B756283F9">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 363 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>363</LineStart>
<Snippet>            _ind = 1;
            if (specifyTypeAndConcur) {
                _ps = _connection.prepareStatement(sql, resultSetType, resultSetConcurrency);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>561</LineStart>
<Snippet>        session.setAttribute(&quot;_CLIENT_REFERER_&quot;, request.getHeader(&quot;Referer&quot;) != null ? request.getHeader(&quot;Referer&quot;) : &quot;&quot;);

        session.setAttribute(&quot;_CLIENT_FORWARDED_FOR_&quot;, request.getHeader(&quot;X-Forwarded-For&quot;));
        session.setAttribute(&quot;_CLIENT_REMOTE_ADDR_&quot;, request.getRemoteAddr());
        session.setAttribute(&quot;_CLIENT_REMOTE_HOST_&quot;, request.getRemoteHost());</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="F88142B7F4833D2B25291041CD54B9D7">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>GlEvents.java</FileName>
<FilePath>applications/accounting/src/org/ofbiz/accounting/GlEvents.java</FilePath>
<LineStart>86</LineStart>
<Snippet>    Map&lt;String, Object&gt; glReconResult = null;
    try {
        glReconResult = dispatcher.runSync(&quot;createGlReconciliation&quot;, fieldMap); //create GlReconciliation for the glAccountId
        if (ServiceUtil.isError(glReconResult)) {
            return &quot;error&quot;;</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="D8DF13B632DAADC30BE68BF0F8CA4CDE">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 363 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>363</LineStart>
<Snippet>            _ind = 1;
            if (specifyTypeAndConcur) {
                _ps = _connection.prepareStatement(sql, resultSetType, resultSetConcurrency);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {</Snippet>
                            </Primary>
                            <Source>
<FileName>CommonEvents.java</FileName>
<FilePath>framework/common/src/org/ofbiz/common/CommonEvents.java</FilePath>
<LineStart>231</LineStart>
<Snippet>    /** Simple event to set the users per-session currency uom value */
    public static String setSessionCurrencyUom(HttpServletRequest request, HttpServletResponse response) {
        String currencyUom = request.getParameter(&quot;currencyUom&quot;);
        if (UtilValidate.isNotEmpty(currencyUom)) {
            // update the session</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="3CA864942F902AF3C931DF7FE07BBDA7">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>OrderEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/order/OrderEvents.java</FilePath>
<LineStart>125</LineStart>
<Snippet>                        contextMap.put(&quot;userLogin&quot;, userLogin);
                        try {
                            resultMap = dispatcher.runSync(&quot;cancelOrderItem&quot;, contextMap);

                            if (ServiceUtil.isError(resultMap)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="E712FAA3A5848DF5909F447E08776EE4">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 363 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>363</LineStart>
<Snippet>            _ind = 1;
            if (specifyTypeAndConcur) {
                _ps = _connection.prepareStatement(sql, resultSetType, resultSetConcurrency);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1527</LineStart>
<Snippet>        Locale locale = UtilHttp.getLocale(request);

        String productStoreId = request.getParameter(&quot;productStoreId&quot;);

        if (UtilValidate.isNotEmpty(productStoreId)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="E8D84D5DB2E7CF216DC7296BC0D791FF">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>GenericWebEvent.java</FileName>
<FilePath>framework/webtools/src/org/ofbiz/webtools/GenericWebEvent.java</FilePath>
<LineStart>135</LineStart>
<Snippet>            }

            String fval = request.getParameter(field.getName());
            if (UtilValidate.isNotEmpty(fval)) {
                try {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="9D9A953C1395325A77B33718EF38FF71">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>WebPosEvents.java</FileName>
<FilePath>specialpurpose/webpos/src/org/ofbiz/webpos/WebPosEvents.java</FilePath>
<LineStart>180</LineStart>
<Snippet>                                    request.setAttribute(&quot;featureSet&quot;, featureSet);
                                    try {
                                        variantTreeMap = dispatcher.runSync(&quot;getProductVariantTree&quot;, 
                                                         UtilMisc.toMap(&quot;productId&quot;, productId, &quot;featureOrder&quot;, featureSet, &quot;productStoreId&quot;, productStoreId));
                                        Map&lt;String, Object&gt; variantTree = UtilGenerics.cast(variantTreeMap.get(&quot;variantTree&quot;));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="C30927321708001EE06D75ABD0F58CE4">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>234</LineStart>
<Snippet>
    public static Map&lt;String, Object&gt; getUrlOnlyParameterMap(HttpServletRequest request) {
        return getUrlOnlyParameterMap(request.getQueryString(), request.getPathInfo());
    }
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="AC6D70E306CF7D5056D88BD402B449C6">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>TrackingCodeEvents.java</FileName>
<FilePath>applications/marketing/src/org/ofbiz/marketing/tracking/TrackingCodeEvents.java</FilePath>
<LineStart>372</LineStart>
<Snippet>
        String trackingCodeId = request.getParameter(&quot;autoTrackingCode&quot;);
        if (UtilValidate.isEmpty(trackingCodeId)) trackingCodeId = request.getParameter(&quot;atc&quot;);
        if (UtilValidate.isEmpty(trackingCodeId)) {
            Cookie[] cookies = request.getCookies();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="A34812E0BB1A8FA1DECC20DC6CDE03E8">
                            <Category>SQL Injection</Category>
                            <Folder>High</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>High</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>ContextFilter.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/control/ContextFilter.java</FilePath>
<LineStart>389</LineStart>
<Snippet>        }
        // get the unique name of this dispatcher
        String dispatcherName = servletContext.getInitParameter(&quot;localDispatcherName&quot;);

        if (dispatcherName == null) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="85E7B58E8C31A7F86151A2D1B45CF6D4">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>TrackingCodeEvents.java</FileName>
<FilePath>applications/marketing/src/org/ofbiz/marketing/tracking/TrackingCodeEvents.java</FilePath>
<LineStart>371</LineStart>
<Snippet>        java.sql.Timestamp nowStamp = UtilDateTime.nowTimestamp();

        String trackingCodeId = request.getParameter(&quot;autoTrackingCode&quot;);
        if (UtilValidate.isEmpty(trackingCodeId)) trackingCodeId = request.getParameter(&quot;atc&quot;);
        if (UtilValidate.isEmpty(trackingCodeId)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="5B4DEF2BFE720F5BFE0AE52148A562B6">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1388</LineStart>
<Snippet>        ShoppingCart cart = null;
        try {
            Map&lt;String, Object&gt; outMap = dispatcher.runSync(&quot;loadCartFromOrder&quot;,
                                                UtilMisc.&lt;String, Object&gt;toMap(&quot;orderId&quot;, orderId,
                                                        &quot;skipProductChecks&quot;, Boolean.TRUE, // the products have already been checked in the order, no need to check their validity again</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="85E7B58E8C31A7F86151A2D1B45CF6D3">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>TrackingCodeEvents.java</FileName>
<FilePath>applications/marketing/src/org/ofbiz/marketing/tracking/TrackingCodeEvents.java</FilePath>
<LineStart>371</LineStart>
<Snippet>        java.sql.Timestamp nowStamp = UtilDateTime.nowTimestamp();

        String trackingCodeId = request.getParameter(&quot;autoTrackingCode&quot;);
        if (UtilValidate.isEmpty(trackingCodeId)) trackingCodeId = request.getParameter(&quot;atc&quot;);
        if (UtilValidate.isEmpty(trackingCodeId)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="14CBA9020783DC8238FEE9E7895042CC">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ShipmentEvents.java</FileName>
<FilePath>applications/product/src/org/ofbiz/shipment/shipment/ShipmentEvents.java</FilePath>
<LineStart>48</LineStart>
<Snippet>        Delegator delegator = (Delegator) request.getAttribute(&quot;delegator&quot;);

        String shipmentId = request.getParameter(&quot;shipmentId&quot;);
        String shipmentRouteSegmentId = request.getParameter(&quot;shipmentRouteSegmentId&quot;);
        String shipmentPackageSeqId = request.getParameter(&quot;shipmentPackageSeqId&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="95EE709FAAF952B573DDA665162916AE">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceEventHandler.java</FilePath>
<LineStart>337</LineStart>
<Snippet>                dispatcher.runAsync(serviceName, serviceContext);
            } else {
                result = dispatcher.runSync(serviceName, serviceContext);
            }
        } catch (ServiceAuthException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="FB778AD7ACFF0BD1405051846F819610">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2443 of DatabaseUtil.java, the method deleteForeignKey() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2443</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(sqlBuf.toString());
        } catch (SQLException e) {
            return &quot;SQL Exception while executing the following:\n&quot; + sqlBuf.toString() + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>119</LineStart>
<Snippet>            contentRevisionMap.put(&quot;contentId&quot;, contentId);
            contentRevisionMap.put(&quot;userLogin&quot;, userLogin);
            Map&lt;String, Object&gt; result = dispatcher.runSync(&quot;persistContentRevisionAndItem&quot;, contentRevisionMap);
            keySet = result.keySet();
            iter = keySet.iterator();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="03C00471CB96CF9AF6C62BB3F4DDBEB5">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2917 of DatabaseUtil.java, the method createForeignKeyIndex() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2917</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(createIndexSql);
        } catch (SQLException e) {
            return &quot;SQL Exception while executing the following:\n&quot; + createIndexSql + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceEventHandler.java</FilePath>
<LineStart>337</LineStart>
<Snippet>                dispatcher.runAsync(serviceName, serviceContext);
            } else {
                result = dispatcher.runSync(serviceName, serviceContext);
            }
        } catch (ServiceAuthException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="550DA3C231E58FEDC75CACEBAA7920E0">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceEventHandler.java</FilePath>
<LineStart>337</LineStart>
<Snippet>                dispatcher.runAsync(serviceName, serviceContext);
            } else {
                result = dispatcher.runSync(serviceName, serviceContext);
            }
        } catch (ServiceAuthException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="A943E5DE0FE49B0888339F930DC9E02B">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>UrlServletHelper.java</FileName>
<FilePath>framework/common/src/org/ofbiz/common/UrlServletHelper.java</FilePath>
<LineStart>122</LineStart>
<Snippet>        
        if (UtilValidate.isNotEmpty(httpRequest.getParameter(&quot;viewIndex&quot;))) {
            viewIndex = httpRequest.getParameter(&quot;viewIndex&quot;);
        }
        if (UtilValidate.isNotEmpty(httpRequest.getParameter(&quot;viewSize&quot;))) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="53C60CA79CF130A3B6F4E907E884C01B">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>561</LineStart>
<Snippet>        session.setAttribute(&quot;_CLIENT_REFERER_&quot;, request.getHeader(&quot;Referer&quot;) != null ? request.getHeader(&quot;Referer&quot;) : &quot;&quot;);

        session.setAttribute(&quot;_CLIENT_FORWARDED_FOR_&quot;, request.getHeader(&quot;X-Forwarded-For&quot;));
        session.setAttribute(&quot;_CLIENT_REMOTE_ADDR_&quot;, request.getRemoteAddr());
        session.setAttribute(&quot;_CLIENT_REMOTE_HOST_&quot;, request.getRemoteHost());</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="49E1D441B2F9AE300A1C9B81CF667E5D">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 363 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>363</LineStart>
<Snippet>            _ind = 1;
            if (specifyTypeAndConcur) {
                _ps = _connection.prepareStatement(sql, resultSetType, resultSetConcurrency);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>556</LineStart>
<Snippet>
        session.setAttribute(&quot;_WEBAPP_NAME_&quot;, UtilHttp.getApplicationName(request));
        session.setAttribute(&quot;_CLIENT_LOCALE_&quot;, request.getLocale());
        session.setAttribute(&quot;_CLIENT_REQUEST_&quot;, fullRequestUrl.toString());
        session.setAttribute(&quot;_CLIENT_USER_AGENT_&quot;, request.getHeader(&quot;User-Agent&quot;) != null ? request.getHeader(&quot;User-Agent&quot;) : &quot;&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="6E21CA1A463387B8C9611C046E6CC5FC">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 1894 of DatabaseUtil.java, the method addColumn() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>1894</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(sql);
        } catch (SQLException e) {
            // if that failed try the alternate syntax real quick</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>104</LineStart>
<Snippet>        persistMap.put(&quot;userLogin&quot;, userLogin);
        try {
            Map&lt;String, Object&gt; persistResult = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, persistMap);
            contentId = (String)persistResult.get(&quot;contentId&quot;);
            //request.setAttribute(&quot;contentId&quot;, contentId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="F0CBD4121CD3E9AE309F5A20180336AE">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2699 of DatabaseUtil.java, the method createDeclaredIndex() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2699</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(createIndexSql);
        } catch (SQLException e) {
            return &quot;SQL Exception while executing the following:\n&quot; + createIndexSql + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilObject.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilObject.java</FilePath>
<LineStart>137</LineStart>
<Snippet>                ObjectInputStream ois = new ObjectInputStream(bis, Thread.currentThread().getContextClassLoader());
                try {
                    obj = ois.readObject();
                } catch (ClassNotFoundException e) {
                    Debug.logError(e, module);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="368C1193595D015E27CBB48D8A262366">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>DataEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/data/DataEvents.java</FilePath>
<LineStart>334</LineStart>
<Snippet>            mode = &quot;CREATE&quot;;
            try {
                result = dispatcher.runSync(&quot;createDataResource&quot;, serviceInMap);
            } catch (GenericServiceException e) {
                String errMsg = UtilProperties.getMessage(DataEvents.err_resource, &quot;dataEvents.error_call_create_service&quot;, locale);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="5BFE34F8F27F02DFE49AB3EB7F42074A">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>TrackingCodeEvents.java</FileName>
<FilePath>applications/marketing/src/org/ofbiz/marketing/tracking/TrackingCodeEvents.java</FilePath>
<LineStart>371</LineStart>
<Snippet>        java.sql.Timestamp nowStamp = UtilDateTime.nowTimestamp();

        String trackingCodeId = request.getParameter(&quot;autoTrackingCode&quot;);
        if (UtilValidate.isEmpty(trackingCodeId)) trackingCodeId = request.getParameter(&quot;atc&quot;);
        if (UtilValidate.isEmpty(trackingCodeId)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="062ACDC111E4B7807026601D4ABB4E47">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 363 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>363</LineStart>
<Snippet>            _ind = 1;
            if (specifyTypeAndConcur) {
                _ps = _connection.prepareStatement(sql, resultSetType, resultSetConcurrency);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>575</LineStart>
<Snippet>        while (e.hasMoreElements()) {
            String name = e.nextElement();
            request.setAttribute(name, request.getParameter(name));
        }
    }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="5AC73FB3FB9389092D5DB286B8182621">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 366 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>366</LineStart>
<Snippet>                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {
                _ps = _connection.prepareStatement(sql);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] (def) _ps=&quot; + _ps, module);
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>562</LineStart>
<Snippet>
        session.setAttribute(&quot;_CLIENT_FORWARDED_FOR_&quot;, request.getHeader(&quot;X-Forwarded-For&quot;));
        session.setAttribute(&quot;_CLIENT_REMOTE_ADDR_&quot;, request.getRemoteAddr());
        session.setAttribute(&quot;_CLIENT_REMOTE_HOST_&quot;, request.getRemoteHost());
        session.setAttribute(&quot;_CLIENT_REMOTE_USER_&quot;, request.getRemoteUser());</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="229DFDCA15A83D14CBA497027108760A">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>WebPosEvents.java</FileName>
<FilePath>specialpurpose/webpos/src/org/ofbiz/webpos/WebPosEvents.java</FilePath>
<LineStart>113</LineStart>
<Snippet>
            if (UtilValidate.isNotEmpty(posTerminalId)) {
                webPosSession = new WebPosSession(posTerminalId, null, userLogin, request.getLocale(), productStoreId, facilityId, currencyUomId, delegator, dispatcher, cart);
                session.setAttribute(&quot;webPosSession&quot;, webPosSession);
            } else {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="ECC9195E8CB5322C2E997AACBA18AF97">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>257</LineStart>
<Snippet>        Map&lt;String, Object&gt; results = null;
        try {
            results = dispatcher.runSync(&quot;renderContentPdf&quot;, mapIn);
        } catch (ServiceAuthException e) {
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, e.toString());</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="78F8993FAE3128DA480F47E7689DA03E">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>TrackingCodeEvents.java</FileName>
<FilePath>applications/marketing/src/org/ofbiz/marketing/tracking/TrackingCodeEvents.java</FilePath>
<LineStart>374</LineStart>
<Snippet>        if (UtilValidate.isEmpty(trackingCodeId)) trackingCodeId = request.getParameter(&quot;atc&quot;);
        if (UtilValidate.isEmpty(trackingCodeId)) {
            Cookie[] cookies = request.getCookies();
            if (cookies != null) {
                for (Cookie cookie : cookies) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="9E5B797286C6A6A9128E50694ED92867">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>DataEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/data/DataEvents.java</FilePath>
<LineStart>136</LineStart>
<Snippet>            Map&lt;String, Object&gt; permSvcResp;
            try {
                permSvcResp = dispatcher.runSync(permissionService, permSvcCtx);
            } catch (GenericServiceException e) {
                Debug.logError(e, module);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="91A5E3D215FDD10A1AAC35FB7258BCF5">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2609 of DatabaseUtil.java, the method deletePrimaryKey() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2609</LineStart>
<Snippet>            try {
                stmt = connection.createStatement();
                stmt.executeUpdate(sqlBuf.toString());
            } catch (SQLException e) {
                String errMsg = &quot;SQL Exception while executing the following:\n&quot; + sqlBuf.toString() + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>505</LineStart>
<Snippet>        Map&lt;String, Object&gt; ftlResults = null;
        try {
            ftlResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, ftlContext);
        } catch (ServiceAuthException e) {
            String msg = e.getMessage();</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="3AD1FD3EEFB6287849865E26E04CF8A5">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>261</LineStart>
<Snippet>        ByteBuffer imageData = (ByteBuffer) tempFile.get(&quot;imageData&quot;);
        if (UtilValidate.isEmpty(imageName) || UtilValidate.isEmpty(imageData)) {
            session.setAttribute(&quot;frameContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
            session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;There is no frame image, please select the image type *.PNG  uploading.&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="E35517680876E389F74C1656110A5DCA">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 1922 of DatabaseUtil.java, the method addColumn() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>1922</LineStart>
<Snippet>            try {
                stmt = connection.createStatement();
                stmt.executeUpdate(sql2);
            } catch (SQLException e2) {
                // if this also fails report original error, not this error...</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>104</LineStart>
<Snippet>        persistMap.put(&quot;userLogin&quot;, userLogin);
        try {
            Map&lt;String, Object&gt; persistResult = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, persistMap);
            contentId = (String)persistResult.get(&quot;contentId&quot;);
            //request.setAttribute(&quot;contentId&quot;, contentId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="B7B487DF4FCB5ACE9B6FEFBCEBEECCB1">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2085 of DatabaseUtil.java, the method repairColumnSize() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2085</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(sql2);
        } catch (SQLException e) {
            String thisMsg = &quot;SQL Exception while executing the following:\n&quot; + sql2 + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>104</LineStart>
<Snippet>        persistMap.put(&quot;userLogin&quot;, userLogin);
        try {
            Map&lt;String, Object&gt; persistResult = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, persistMap);
            contentId = (String)persistResult.get(&quot;contentId&quot;);
            //request.setAttribute(&quot;contentId&quot;, contentId);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="968F14825A8EC471306A3984D1DF6B66">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>261</LineStart>
<Snippet>        ByteBuffer imageData = (ByteBuffer) tempFile.get(&quot;imageData&quot;);
        if (UtilValidate.isEmpty(imageName) || UtilValidate.isEmpty(imageData)) {
            session.setAttribute(&quot;frameContentId&quot;, request.getParameter(&quot;frameExistContentId&quot;).toString());
            session.setAttribute(&quot;frameDataResourceId&quot;, request.getParameter(&quot;frameExistDataResourceId&quot;).toString());
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, &quot;There is no frame image, please select the image type *.PNG  uploading.&quot;);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="2C617584970C8583929BCC5DC9272C9F">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1354</LineStart>
<Snippet>        ShoppingCart cart = null;
        try {
            Map&lt;String, Object&gt; outMap = dispatcher.runSync(&quot;loadCartFromQuote&quot;,
                    UtilMisc.&lt;String, Object&gt;toMap(&quot;quoteId&quot;, quoteId,
                            &quot;applyQuoteAdjustments&quot;, &quot;true&quot;,</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="471584983CF45F24C38FF93FADDA0BF2">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ServiceMultiEventHandler.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/ServiceMultiEventHandler.java</FilePath>
<LineStart>308</LineStart>
<Snippet>                Map&lt;String, Object&gt; result = null;
                try {
                    result = dispatcher.runSync(serviceName, serviceContext);
                } catch (ServiceAuthException e) {
                    // not logging since the service engine already did</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="955E265A838B7B9C603898D249A47DF2">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>PayPalEvents.java</FileName>
<FilePath>applications/accounting/src/org/ofbiz/accounting/thirdparty/paypal/PayPalEvents.java</FilePath>
<LineStart>497</LineStart>
<Snippet>        try {
            String comment = UtilProperties.getMessage(resource, &quot;AccountingPaymentReceiveViaPayPal&quot;, locale);
            results = dispatcher.runSync(&quot;createPaymentFromPreference&quot;, UtilMisc.toMap(&quot;userLogin&quot;, userLogin,
                    &quot;orderPaymentPreferenceId&quot;, paymentPreference.get(&quot;orderPaymentPreferenceId&quot;), &quot;comments&quot;, comment));
        } catch (GenericServiceException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="2ECC175905F162C84E758982B6308373">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1327</LineStart>
<Snippet>        ShoppingCart cart = null;
        try {
            Map&lt;String, Object&gt; outMap = dispatcher.runSync(&quot;loadCartFromShoppingList&quot;,
                    UtilMisc.&lt;String, Object&gt;toMap(&quot;shoppingListId&quot;, shoppingListId,
                    &quot;userLogin&quot;, userLogin));</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="C7D0513CF6FA341162BDA1F920229F48">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1527</LineStart>
<Snippet>        Locale locale = UtilHttp.getLocale(request);

        String productStoreId = request.getParameter(&quot;productStoreId&quot;);

        if (UtilValidate.isNotEmpty(productStoreId)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="C30927321708001EE06D75ABD0F58CE5">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>234</LineStart>
<Snippet>
    public static Map&lt;String, Object&gt; getUrlOnlyParameterMap(HttpServletRequest request) {
        return getUrlOnlyParameterMap(request.getQueryString(), request.getPathInfo());
    }
</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="41151FC2F785FDA01395395C73F48AE2">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>UrlServletHelper.java</FileName>
<FilePath>framework/common/src/org/ofbiz/common/UrlServletHelper.java</FilePath>
<LineStart>122</LineStart>
<Snippet>        
        if (UtilValidate.isNotEmpty(httpRequest.getParameter(&quot;viewIndex&quot;))) {
            viewIndex = httpRequest.getParameter(&quot;viewIndex&quot;);
        }
        if (UtilValidate.isNotEmpty(httpRequest.getParameter(&quot;viewSize&quot;))) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="97F1CB6A0A38248A2E8FD86692604477">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 248 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>248</LineStart>
<Snippet>
                                sql = &quot;UPDATE &quot; + SequenceUtil.this.tableName + &quot; SET &quot; + SequenceUtil.this.idColName + &quot;=&quot; + SequenceUtil.this.idColName + &quot;+&quot; + bankSize + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                if (stmt.executeUpdate(sql) &lt;= 0) {
                                    throw new GenericEntityException(&quot;[SequenceUtil.SequenceBank.fillBank] update failed, no rows changes for seqName: &quot; + seqName);
                                }</Snippet>
                            </Primary>
                            <Source>
<FileName>FrameImage.java</FileName>
<FilePath>applications/product/src/org/ofbiz/product/imagemanagement/FrameImage.java</FilePath>
<LineStart>409</LineStart>
<Snippet>        }
        
        String frameContentId = request.getParameter(&quot;frameContentId&quot;);
        Delegator delegator = (Delegator) request.getAttribute(&quot;delegator&quot;);
        </Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="229DFDCA15A83D14CBA4970271087609">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>WebPosEvents.java</FileName>
<FilePath>specialpurpose/webpos/src/org/ofbiz/webpos/WebPosEvents.java</FilePath>
<LineStart>108</LineStart>
<Snippet>
            if (UtilValidate.isEmpty(cart)) {
                cart = new ShoppingCart(delegator, productStoreId, request.getLocale(), currencyUomId);
                session.setAttribute(&quot;shoppingCart&quot;, cart);
            }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="DA9C6AFFD82684D8189B86A9EC698F28">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ContentManagementEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/ContentManagementEvents.java</FilePath>
<LineStart>288</LineStart>
<Snippet>                        serviceIn.put(&quot;targetOperationList&quot;, targetOperationList);
                        serviceIn.put(&quot;contentPurposeList&quot;, contentPurposeList);
                        results = dispatcher.runSync(&quot;createContentAssoc&quot;, serviceIn);
                        responseMessage = (String)results.get(ModelService.RESPONSE_MESSAGE);
                        if (UtilValidate.isNotEmpty(responseMessage)) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="5870A527-08AF-452C-84B2-7F6C360CA7EF" iid="CB39458F29B15A367E8A3FFD7520290F">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 366 of SQLProcessor.java, the method prepareStatement() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SQLProcessor.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/SQLProcessor.java</FilePath>
<LineStart>366</LineStart>
<Snippet>                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] _ps=&quot; + _ps, module);
            } else {
                _ps = _connection.prepareStatement(sql);
                if (Debug.verboseOn()) Debug.logVerbose(&quot;[SQLProcessor.prepareStatement] (def) _ps=&quot; + _ps, module);
            }</Snippet>
                            </Primary>
                            <Source>
<FileName>CoreEvents.java</FileName>
<FilePath>framework/webapp/src/org/ofbiz/webapp/event/CoreEvents.java</FilePath>
<LineStart>412</LineStart>
<Snippet>        try {
            if (null!=request.getParameter(&quot;_RUN_SYNC_&quot;) &amp;&amp; request.getParameter(&quot;_RUN_SYNC_&quot;).equals(&quot;Y&quot;)) {
                syncServiceResult = dispatcher.runSync(serviceName, serviceContext);
            } else {
                dispatcher.schedule(jobName, poolName, serviceName, serviceContext, startTime, frequency, interval, count, endTime, maxRetry);</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="35A05898E9029CE003BA2300D25B0834">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 2085 of DatabaseUtil.java, the method repairColumnSize() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>DatabaseUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/jdbc/DatabaseUtil.java</FilePath>
<LineStart>2085</LineStart>
<Snippet>        try {
            stmt = connection.createStatement();
            stmt.executeUpdate(sql2);
        } catch (SQLException e) {
            String thisMsg = &quot;SQL Exception while executing the following:\n&quot; + sql2 + &quot;\nError was: &quot; + e.toString();</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>575</LineStart>
<Snippet>        while (e.hasMoreElements()) {
            String name = e.nextElement();
            request.setAttribute(name, request.getParameter(name));
        }
    }</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="1E6BFBB17F4BEDA9C0EF4C5A7516BC8F">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>OrderManagerEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/OrderManagerEvents.java</FilePath>
<LineStart>98</LineStart>
<Snippet>                    Map&lt;String, Object&gt; results = null;
                    try {
                        results = dispatcher.runSync(&quot;createPaymentFromPreference&quot;, UtilMisc.toMap(&quot;orderPaymentPreferenceId&quot;, ppref.get(&quot;orderPaymentPreferenceId&quot;),
                                &quot;paymentFromId&quot;, placingCustomer.getString(&quot;partyId&quot;), &quot;comments&quot;, &quot;Payment received offline and manually entered.&quot;));
                    } catch (GenericServiceException e) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="F3A2080DFA4FAA7EC33A6FF57736F8B0">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 257 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>257</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal2 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>CompDocEvents.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/compdoc/CompDocEvents.java</FilePath>
<LineStart>183</LineStart>
<Snippet>        Map&lt;String, Object&gt; results = null;
        try {
            results = dispatcher.runSync(&quot;renderCompDocPdf&quot;, mapIn);
        } catch (ServiceAuthException e) {
            request.setAttribute(&quot;_ERROR_MESSAGE_&quot;, e.toString());</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="1C0788CD544484BC9A6367180A97CC46">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>UploadContentAndImage.java</FileName>
<FilePath>applications/content/src/org/ofbiz/content/content/UploadContentAndImage.java</FilePath>
<LineStart>251</LineStart>
<Snippet>                txtContext.put(&quot;mapKey&quot;, &quot;ARTICLE&quot;);
                txtContext.put(&quot;dataTemplateTypeId&quot;, &quot;NONE&quot;);
                Map&lt;String, Object&gt; txtResults = dispatcher.runSync(&quot;persistContentAndAssoc&quot;, txtContext);
                isError = ModelService.RESPOND_ERROR.equals(txtResults.get(ModelService.RESPONSE_MESSAGE));
                if (isError) {</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="E04D3E1F-2D8C-400A-BB55-7DA143F987E3" iid="6104C0CEDBB041576A7E8667C6FE34AC">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 241 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>241</LineStart>
<Snippet>                                    Debug.logWarning(&quot;[SequenceUtil.SequenceBank.fillBank] first select failed: will try to add new row, result set was empty for sequence [&quot; + seqName + &quot;] \nUsed SQL: &quot; + sql + &quot; \n Thread Name is: &quot; + Thread.currentThread().getName() + &quot;:&quot; + Thread.currentThread().toString(), module);
                                    sql = &quot;INSERT INTO &quot; + SequenceUtil.this.tableName + &quot; (&quot; + SequenceUtil.this.nameColName + &quot;, &quot; + SequenceUtil.this.idColName + &quot;) VALUES ('&quot; + this.seqName + &quot;', &quot; + startSeqId + &quot;)&quot;;
                                    if (stmt.executeUpdate(sql) &lt;= 0) {
                                        throw new GenericEntityException(&quot;No rows changed when trying insert new sequence row with this SQL: &quot; + sql);
                                    }</Snippet>
                            </Primary>
                            <Source>
<FileName>UtilHttp.java</FileName>
<FilePath>framework/base/src/org/ofbiz/base/util/UtilHttp.java</FilePath>
<LineStart>562</LineStart>
<Snippet>
        session.setAttribute(&quot;_CLIENT_FORWARDED_FOR_&quot;, request.getHeader(&quot;X-Forwarded-For&quot;));
        session.setAttribute(&quot;_CLIENT_REMOTE_ADDR_&quot;, request.getRemoteAddr());
        session.setAttribute(&quot;_CLIENT_REMOTE_HOST_&quot;, request.getRemoteHost());
        session.setAttribute(&quot;_CLIENT_REMOTE_USER_&quot;, request.getRemoteUser());</Snippet>
                            </Source>
                        </Issue>
                        <Issue ruleID="9B5F0161-88EC-4104-B70B-0182FEB53BF2" iid="4478EF66C40F097EDD5265AE9EA84044">
                            <Category>SQL Injection</Category>
                            <Folder>Critical</Folder>
                            <Kingdom>Input Validation and Representation</Kingdom>
                            <Abstract>On line 230 of SequenceUtil.java, the method fillBank() invokes a SQL query built using unvalidated input. This call could allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Abstract>
                            <Friority>Critical</Friority>
                            <Primary>
<FileName>SequenceUtil.java</FileName>
<FilePath>framework/entity/src/org/ofbiz/entity/util/SequenceUtil.java</FilePath>
<LineStart>230</LineStart>
<Snippet>                                    sql = &quot;SELECT &quot; + SequenceUtil.this.idColName + &quot; FROM &quot; + SequenceUtil.this.tableName + &quot; WHERE &quot; + SequenceUtil.this.nameColName + &quot;='&quot; + this.seqName + &quot;'&quot;;
                                }
                                rs = stmt.executeQuery(sql);
                                boolean gotVal1 = false;
                                if (rs.next()) {</Snippet>
                            </Primary>
                            <Source>
<FileName>ShoppingCartEvents.java</FileName>
<FilePath>applications/order/src/org/ofbiz/order/shoppingcart/ShoppingCartEvents.java</FilePath>
<LineStart>1499</LineStart>
<Snippet>        String custRequestId = null;
        try {
            result = dispatcher.runSync(&quot;createCustRequestFromCart&quot;,
                    UtilMisc.toMap(&quot;cart&quot;, cart,
                            &quot;userLogin&quot;, userLogin));</Snippet>
                            </Source>
                        </Issue>
                    </GroupingSection>
                </Chart>
            </IssueListing>
        </SubSection>
    </ReportSection>
</ReportDefinition>
